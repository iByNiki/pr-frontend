/*! For license information please see viewer-core-compiled.js.LICENSE.txt */
(()=>{var e={9987:(e,t,n)=>{"use strict";n.r(t),n.d(t,{HandPose:()=>C,load:()=>T});var r=n(3916),a=n(558);function s(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function o(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function i(e){return[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])]}function u(e){return[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2]}function l(e,t){void 0===t&&(t=1.5);var n=u(e),r=i(e),a=[t*r[0]/2,t*r[1]/2];return{startPoint:[n[0]-a[0],n[1]-a[1]],endPoint:[n[0]+a[0],n[1]+a[1]],palmLandmarks:e.palmLandmarks}}function c(e){var t=u(e),n=i(e),r=Math.max.apply(Math,n)/2;return{startPoint:[t[0]-r,t[1]-r],endPoint:[t[0]+r,t[1]+r],palmLandmarks:e.palmLandmarks}}function p(e,t){var n=[e.endPoint[0]-e.startPoint[0],e.endPoint[1]-e.startPoint[1]],r=[n[0]*t[0],n[1]*t[1]];return{startPoint:[e.startPoint[0]+r[0],e.startPoint[1]+r[1]],endPoint:[e.endPoint[0]+r[0],e.endPoint[1]+r[1]],palmLandmarks:e.palmLandmarks}}var d=function(){function e(e,t,n,r,s,o){this.model=e,this.width=t,this.height=n,this.iouThreshold=s,this.scoreThreshold=o,this.anchors=r.map((function(e){return[e.x_center,e.y_center]})),this.anchorsTensor=(0,a.tensor2d)(this.anchors),this.inputSizeTensor=(0,a.tensor1d)([t,n]),this.doubleInputSizeTensor=(0,a.tensor1d)([2*t,2*n])}return e.prototype.normalizeBoxes=function(e){var t=this;return(0,a.tidy)((function(){var n=(0,a.slice)(e,[0,0],[-1,2]),r=(0,a.slice)(e,[0,2],[-1,2]),s=(0,a.add)((0,a.div)(n,t.inputSizeTensor),t.anchorsTensor),o=(0,a.div)(r,t.doubleInputSizeTensor),i=(0,a.mul)((0,a.sub)(s,o),t.inputSizeTensor),u=(0,a.mul)((0,a.add)(s,o),t.inputSizeTensor);return(0,a.concat2d)([i,u],1)}))},e.prototype.normalizeLandmarks=function(e,t){var n=this;return(0,a.tidy)((function(){var r=(0,a.add)((0,a.div)((0,a.reshape)(e,[-1,7,2]),n.inputSizeTensor),n.anchors[t]);return(0,a.mul)(r,n.inputSizeTensor)}))},e.prototype.getBoundingBoxes=function(e){return s(this,void 0,void 0,(function(){var t,n,r,s,i,u,l,c,p,d,h,f,m,g,x,y=this;return o(this,(function(o){switch(o.label){case 0:return t=(0,a.tidy)((function(){return(0,a.mul)((0,a.sub)(e,.5),2)})),"webgl"===(0,a.getBackend)()?(r=(0,a.env)().get("WEBGL_PACK_DEPTHWISECONV"),(0,a.env)().set("WEBGL_PACK_DEPTHWISECONV",!0),n=this.model.predict(t),(0,a.env)().set("WEBGL_PACK_DEPTHWISECONV",r)):n=this.model.predict(t),s=(0,a.squeeze)(n),i=(0,a.tidy)((function(){return(0,a.squeeze)((0,a.sigmoid)((0,a.slice)(s,[0,0],[-1,1])))})),u=(0,a.slice)(s,[0,1],[-1,4]),l=this.normalizeBoxes(u),c=console.warn,console.warn=function(){},p=a.image.nonMaxSuppression(l,i,1,this.iouThreshold,this.scoreThreshold),console.warn=c,[4,p.array()];case 1:return d=o.sent(),h=[t,n,p,s,l,u,i],0===d.length?(h.forEach((function(e){return e.dispose()})),[2,null]):(f=d[0],m=(0,a.slice)(l,[f,0],[1,-1]),g=(0,a.slice)(s,[f,5],[1,14]),x=(0,a.tidy)((function(){return(0,a.reshape)(y.normalizeLandmarks(g,f),[-1,2])})),h.push(g),h.forEach((function(e){return e.dispose()})),[2,{boxes:m,palmLandmarks:x}])}}))}))},e.prototype.estimateHandBounds=function(e){return s(this,void 0,void 0,(function(){var t,n,r,s,i,u,l,c,p=this;return o(this,(function(o){switch(o.label){case 0:return t=e.shape[1],n=e.shape[2],r=(0,a.tidy)((function(){return(0,a.div)(a.image.resizeBilinear(e,[p.width,p.height]),255)})),[4,this.getBoundingBoxes(r)];case 1:return null===(s=o.sent())?(r.dispose(),[2,null]):(i=s.boxes.arraySync(),u=i[0].slice(0,2),l=i[0].slice(2,4),c=s.palmLandmarks.arraySync(),r.dispose(),s.boxes.dispose(),s.palmLandmarks.dispose(),[2,(d={startPoint:u,endPoint:l,palmLandmarks:c},h=[n/this.width,t/this.height],{startPoint:[d.startPoint[0]*h[0],d.startPoint[1]*h[1]],endPoint:[d.endPoint[0]*h[0],d.endPoint[1]*h[1]],palmLandmarks:d.palmLandmarks.map((function(e){return[e[0]*h[0],e[1]*h[1]]}))})])}var d,h}))}))},e}(),h={thumb:[1,2,3,4],indexFinger:[5,6,7,8],middleFinger:[9,10,11,12],ringFinger:[13,14,15,16],pinky:[17,18,19,20],palmBase:[0]},f=function(e,t){return[[1,0,e],[0,1,t],[0,0,1]]};function m(e,t){for(var n=0,r=0;r<e.length;r++)n+=e[r]*t[r];return n}function g(e,t){for(var n=[],r=0;r<e.length;r++)n.push(e[r][t]);return n}function x(e,t){for(var n=[],r=e.length,a=0;a<r;a++){n.push([]);for(var s=0;s<r;s++)n[a].push(m(e[a],g(t,s)))}return n}function y(e,t){var n=Math.cos(e),r=Math.sin(e),a=[[n,-r,0],[r,n,0],[0,0,1]],s=x(f(t[0],t[1]),a);return x(s,f(-t[0],-t[1]))}function b(e,t){return[m(e,t[0]),m(e,t[1])]}var v=[0,-.4],w=[0,-.1],k=[0,5,9,13,17,1,2],S=function(){function e(e,t,n,r,a,s){this.boundingBoxDetector=e,this.meshDetector=t,this.meshWidth=n,this.meshHeight=r,this.maxContinuousChecks=a,this.detectionConfidence=s,this.regionsOfInterest=[],this.runsWithoutHandDetector=0,this.maxHandsNumber=1}return e.prototype.getBoxForPalmLandmarks=function(e,t){var n=e.map((function(e){return b(e.concat([1]),t)}));return l(c(p(this.calculateLandmarksBoundingBox(n),v)),3)},e.prototype.getBoxForHandLandmarks=function(e){for(var t=l(c(p(this.calculateLandmarksBoundingBox(e),w)),1.65),n=[],r=0;r<k.length;r++)n.push(e[k[r]].slice(0,2));return t.palmLandmarks=n,t},e.prototype.transformRawCoords=function(e,t,n,r){var a,s,o,l,c=this,p=i(t),d=[p[0]/this.meshWidth,p[1]/this.meshHeight],h=e.map((function(e){return[d[0]*(e[0]-c.meshWidth/2),d[1]*(e[1]-c.meshHeight/2),e[2]]})),f=y(n,[0,0]),g=h.map((function(e){return b(e,f).concat([e[2]])})),x=(s=[[(a=r)[0][0],a[1][0]],[a[0][1],a[1][1]]],o=[a[0][2],a[1][2]],l=[-m(s[0],o),-m(s[1],o)],[s[0].concat(l[0]),s[1].concat(l[1]),[0,0,1]]),v=u(t).concat([1]),w=[m(v,x[0]),m(v,x[1])];return g.map((function(e){return[e[0]+w[0],e[1]+w[1],e[2]]}))},e.prototype.estimateHand=function(e){return s(this,void 0,void 0,(function(){var t,n,r,s,i,l,c,p,d,h,f,m,g,x,b,v,w,k,S,I;return o(this,(function(o){switch(o.label){case 0:return!0!==(t=this.shouldUpdateRegionsOfInterest())?[3,2]:[4,this.boundingBoxDetector.estimateHandBounds(e)];case 1:return null===(n=o.sent())?(e.dispose(),this.regionsOfInterest=[],[2,null]):(this.updateRegionsOfInterest(n,!0),this.runsWithoutHandDetector=0,[3,3]);case 2:this.runsWithoutHandDetector++,o.label=3;case 3:return r=this.regionsOfInterest[0],s=function(e,t){var n;return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}(r.palmLandmarks[0],r.palmLandmarks[2]),i=u(r),l=[i[0]/e.shape[2],i[1]/e.shape[1]],c=a.image.rotateWithOffset(e,s,0,l),p=y(-s,i),d=!0===t?this.getBoxForPalmLandmarks(r.palmLandmarks,p):r,h=function(e,t,n){var r=t.shape[1],s=t.shape[2],o=[[e.startPoint[1]/r,e.startPoint[0]/s,e.endPoint[1]/r,e.endPoint[0]/s]];return a.image.cropAndResize(t,o,[0],n)}(d,c,[this.meshWidth,this.meshHeight]),f=(0,a.div)(h,255),h.dispose(),c.dispose(),"webgl"===(0,a.getBackend)()?(g=(0,a.env)().get("WEBGL_PACK_DEPTHWISECONV"),(0,a.env)().set("WEBGL_PACK_DEPTHWISECONV",!0),m=this.meshDetector.predict(f),(0,a.env)().set("WEBGL_PACK_DEPTHWISECONV",g)):m=this.meshDetector.predict(f),x=m[0],b=m[1],f.dispose(),v=x.dataSync()[0],x.dispose(),v<this.detectionConfidence?(b.dispose(),this.regionsOfInterest=[],[2,null]):(w=(0,a.reshape)(b,[-1,3]),k=w.arraySync(),b.dispose(),w.dispose(),S=this.transformRawCoords(k,d,s,p),I=this.getBoxForHandLandmarks(S),this.updateRegionsOfInterest(I,!1),[2,{landmarks:S,handInViewConfidence:v,boundingBox:{topLeft:I.startPoint,bottomRight:I.endPoint}}])}}))}))},e.prototype.calculateLandmarksBoundingBox=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{startPoint:[Math.min.apply(Math,t),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,t),Math.max.apply(Math,n)]}},e.prototype.updateRegionsOfInterest=function(e,t){if(t)this.regionsOfInterest=[e];else{var n=this.regionsOfInterest[0],r=0;if(null!=n&&null!=n.startPoint){var a=e.startPoint,s=a[0],o=a[1],i=e.endPoint,u=i[0],l=i[1],c=n.startPoint,p=c[0],d=c[1],h=n.endPoint,f=h[0],m=h[1],g=Math.max(s,p),x=Math.max(o,d),y=(Math.min(u,f)-g)*(Math.min(l,m)-x);r=y/((u-s)*(l-o)+(f-p)*(m-o)-y)}this.regionsOfInterest[0]=r>.8?n:e}},e.prototype.shouldUpdateRegionsOfInterest=function(){return this.regionsOfInterest.length!==this.maxHandsNumber||this.runsWithoutHandDetector>=this.maxContinuousChecks},e}();function I(){return s(this,void 0,void 0,(function(){return o(this,(function(e){return[2,(0,r.loadGraphModel)("https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1",{fromTFHub:!0})]}))}))}function N(){return s(this,void 0,void 0,(function(){return o(this,(function(e){return[2,(0,r.loadGraphModel)("https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1",{fromTFHub:!0})]}))}))}function $(){return s(this,void 0,void 0,(function(){return o(this,(function(e){return[2,a.util.fetch("https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file").then((function(e){return e.json()}))]}))}))}function T(e){var t=void 0===e?{}:e,n=t.maxContinuousChecks,r=void 0===n?1/0:n,a=t.detectionConfidence,i=void 0===a?.8:a,u=t.iouThreshold,l=void 0===u?.3:u,c=t.scoreThreshold,p=void 0===c?.5:c;return s(this,void 0,void 0,(function(){var e,t,n,a,s,u;return o(this,(function(o){switch(o.label){case 0:return[4,Promise.all([$(),I(),N()])];case 1:return e=o.sent(),t=e[0],n=e[1],a=e[2],s=new d(n,256,256,t,l,p),u=new S(s,a,256,256,r,i),[2,new C(u)]}}))}))}var C=function(){function e(e){this.pipeline=e}return e.getAnnotations=function(){return h},e.prototype.estimateHands=function(e,t){return void 0===t&&(t=!1),s(this,void 0,void 0,(function(){var n,r,s,i,u,l,c,p,d;return o(this,(function(o){switch(o.label){case 0:return n=function(e){return e instanceof a.Tensor?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),r=n[1],s=(0,a.tidy)((function(){return e instanceof a.Tensor||(e=a.browser.fromPixels(e)),(0,a.expandDims)((0,a.cast)(e,"float32"))})),[4,this.pipeline.estimateHand(s)];case 1:if(i=o.sent(),s.dispose(),null===i)return[2,[]];for(u=i,!0===t&&(u=function(e,t){var n=e.handInViewConfidence,r=e.landmarks,a=e.boundingBox;return{handInViewConfidence:n,landmarks:r.map((function(e){return[t-1-e[0],e[1],e[2]]})),boundingBox:{topLeft:[t-1-a.topLeft[0],a.topLeft[1]],bottomRight:[t-1-a.bottomRight[0],a.bottomRight[1]]}}}(i,r)),l={},c=0,p=Object.keys(h);c<p.length;c++)d=p[c],l[d]=h[d].map((function(e){return u.landmarks[e]}));return[2,[{handInViewConfidence:u.handInViewConfidence,boundingBox:u.boundingBox,landmarks:u.landmarks,annotations:l}]]}}))}))},e}()},5597:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GPGPUContext:()=>pt,MathBackendWebGL:()=>Or,forceHalfFloat:()=>Br,gpgpu_util:()=>a,setWebGLContext:()=>l,version_webgl:()=>Fr,webgl:()=>Mr,webgl_util:()=>r});var r={};n.r(r),n.d(r,{assertNotComplex:()=>he,bindCanvasToFramebuffer:()=>z,bindColorTextureToFramebuffer:()=>W,bindTextureToProgramUniformSampler:()=>V,bindTextureUnit:()=>B,bindVertexBufferToProgramAttribute:()=>F,callAndCheck:()=>y,canBeRepresented:()=>b,createFragmentShader:()=>S,createFramebuffer:()=>O,createProgram:()=>$,createStaticIndexBuffer:()=>_,createStaticVertexBuffer:()=>E,createTexture:()=>A,createVertexShader:()=>k,getBatchDim:()=>j,getExtensionOrThrow:()=>w,getFramebufferErrorMessage:()=>X,getMaxTexturesInShader:()=>se,getNumChannels:()=>R,getProgramUniformLocation:()=>L,getProgramUniformLocationOrThrow:()=>P,getRowsCols:()=>K,getShapeAs3D:()=>Y,getTextureShapeFromLogicalShape:()=>Q,getWebGLDisjointQueryTimerVersion:()=>oe,getWebGLErrorMessage:()=>v,getWebGLMaxTextureSize:()=>ne,hasExtension:()=>ie,isCapableOfRenderingToFloatTexture:()=>le,isDownloadFloatTextureEnabled:()=>ce,isReshapeFree:()=>J,isWebGLFenceEnabled:()=>de,isWebGLVersionEnabled:()=>ue,linkProgram:()=>T,logShaderSourceAndInfoLog:()=>N,resetMaxTextureSize:()=>re,resetMaxTexturesInShader:()=>ae,unbindColorTextureFromFramebuffer:()=>U,unbindTextureUnit:()=>M,validateFramebuffer:()=>G,validateProgram:()=>C,validateTextureSize:()=>D});var a={};n.r(a),n.d(a,{bindVertexProgramAttributeStreams:()=>rt,createBufferFromOutputTexture:()=>ot,createFloat16MatrixTexture:()=>Ye,createFloat16PackedMatrixTexture:()=>nt,createFloat32MatrixTexture:()=>je,createIndexBuffer:()=>Xe,createPackedMatrixTexture:()=>et,createUnsignedBytesMatrixTexture:()=>Ze,createVertexBuffer:()=>Ge,createVertexShader:()=>Ue,downloadByteEncodedFloatMatrixFromOutputTexture:()=>ut,downloadFloat32MatrixFromBuffer:()=>it,downloadMatrixFromPackedOutputTexture:()=>ct,downloadPackedMatrixFromBuffer:()=>lt,getInternalFormatForFloat16MatrixTexture:()=>Ke,getInternalFormatForFloat16PackedMatrixTexture:()=>tt,getInternalFormatForFloat32MatrixTexture:()=>qe,getInternalFormatForPackedMatrixTexture:()=>Je,getInternalFormatForUnsignedBytesMatrixTexture:()=>Qe,uploadDenseMatrixToTexture:()=>at,uploadPixelDataToTexture:()=>st});var s={};n.r(s),n.d(s,{addImpl:()=>kt,bincountImpl:()=>It,bincountReduceImpl:()=>Nt,castImpl:()=>yt,ceilImpl:()=>Et,concatImpl:()=>_t,equalImpl:()=>Rt,expImpl:()=>At,expm1Impl:()=>Dt,floorImpl:()=>Ot,gatherNdImpl:()=>Ft,gatherV2Impl:()=>Bt,greaterEqualImpl:()=>Pt,greaterImpl:()=>Mt,lessEqualImpl:()=>Vt,lessImpl:()=>Lt,linSpaceImpl:()=>zt,logImpl:()=>Wt,maxImpl:()=>Ut,maximumImpl:()=>Gt,minimumImpl:()=>Xt,multiplyImpl:()=>Ht,negImpl:()=>jt,notEqualImpl:()=>Kt,prodImpl:()=>Qt,raggedTensorToTensorImpl:()=>nn,rangeImpl:()=>rn,rsqrtImpl:()=>an,scatterImpl:()=>sn,sigmoidImpl:()=>on,simpleAbsImpl:()=>ht,sliceImpl:()=>un,sparseFillEmptyRowsImpl:()=>ln,sparseReshapeImpl:()=>cn,sparseSegmentReductionImpl:()=>pn,sqrtImpl:()=>dn,squaredDifferenceImpl:()=>hn,stridedSliceImpl:()=>fn,stringNGramsImpl:()=>gn,stringSplitImpl:()=>yn,stringToHashBucketFastImpl:()=>bn,subImpl:()=>vn,tileImpl:()=>kn,topKImpl:()=>Nn,transposeImpl:()=>Yt,uniqueImpl:()=>$n});var o=n(558);const i={},u={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function l(e,t){i[e]=t}function c(e,t){if(!(e in i)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete i[e]}),!1),(0,o.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&(u.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",u)||n.getContext("experimental-webgl",u):n.getContext("webgl2",u)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;i[e]=n}const n=i[e];return null==n||n.isContextLost()?(delete i[e],c(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),i[e])}var p,d,h;function f(e,t){return[t,e]}function m(e){const t=o.util.sizeFromShape(e),n=Math.ceil(t/4);return o.util.sizeToSquarishShape(n)}function g(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function x(e,t){const n=e;let r,a,s,i,u,l,c,p,d,h;return 2===(0,o.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,a=n.R16F,s=n.RGBA16F,i=n.RGBA32F,u=n.RED,c=4,p=1,d=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(r=e.RGBA,a=e.RGBA,s=e.RGBA,i=n.RGBA,u=e.RGBA,c=4,p=4,d=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:p,textureTypeHalfFloat:d,textureTypeFloat:h}}function y(e,t){const n=t();return(0,o.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+v(e,t))}(e),n}function b(e){return!!((0,o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function v(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function w(e,t){return H(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function k(e,t){const n=H(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(y(e,(()=>e.shaderSource(n,t))),y(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function S(e,t){const n=H(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(y(e,(()=>e.shaderSource(n,t))),y(e,(()=>e.compileShader(n))),(0,o.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw N(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(p||(p={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(d||(d={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(h||(h={}));const I=/ERROR: [0-9]+:([0-9]+):/g;function N(e,t){const n=I.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],a=e.split("\n"),s=a.length.toString().length+2,i=a.map(((e,t)=>o.util.rightPad((t+1).toString(),s)+e));let u=0;for(let e=0;e<i.length;e++)u=Math.max(i[e].length,u);const l=i.slice(0,r-1),c=i.slice(r-1,r),p=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${o.util.rightPad(c[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(p.join("\n"))}function $(e){return H(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function T(e,t){if(y(e,(()=>e.linkProgram(t))),!(0,o.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function C(e,t){if(y(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function E(e,t){const n=H(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),y(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function _(e,t){const n=H(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return y(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),y(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function R(){return 2===(0,o.env)().getNumber("WEBGL_VERSION")?1:4}function A(e){return H(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function D(e,t){const n=(0,o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}function O(e){return H(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function F(e,t,n,r,a,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),y(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,s,o))),y(e,(()=>e.enableVertexAttribArray(i))),!0)}function B(e,t,n){q(e,n),y(e,(()=>e.activeTexture(e.TEXTURE0+n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function M(e,t){q(e,t),y(e,(()=>e.activeTexture(e.TEXTURE0+t))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function P(e,t,n){return H(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function L(e,t,n){return e.getUniformLocation(t,n)}function V(e,t,n,r){y(e,(()=>B(e,t,r))),y(e,(()=>e.uniform1i(n,r)))}function z(e){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),y(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),y(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))}function W(e,t,n){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),y(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function U(e,t){y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),y(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function G(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+X(e,t))}function X(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function H(e,t,n){const r=y(e,(()=>t()));if(null==r)throw new Error(n);return r}function q(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}function j(e,t=2){return o.util.sizeFromShape(e.slice(0,e.length-t))}function K(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Y(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[j(e),...K(e)]),t}function Q(e,t=!1){let n=(0,o.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?o.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=o.util.squeezeShape(e);e=t.newShape}let r=o.util.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=j(e);let n=2,a=2;return e.length&&([n,a]=K(e)),r=t*(n/2)*(a/2),o.util.sizeToSquarishShape(r).map((e=>2*e))}return o.util.sizeToSquarishShape(r)}function Z(e){return e%2==0}function J(e,t){if(e=e.slice(-2),t=t.slice(-2),o.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(Z(n)&&Z(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Z(e[0])&&Z(t[0])}let ee,te;function ne(e){if(null==ee){const t=c(e);ee=t.getParameter(t.MAX_TEXTURE_SIZE)}return ee}function re(){ee=null}function ae(){te=null}function se(e){if(null==te){const t=c(e);te=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,te)}function oe(e){if(0===e)return 0;let t;const n=c(e);return t=ie(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:ie(n,"EXT_disjoint_timer_query")?1:0,t}function ie(e,t){return null!=e.getExtension(t)}function ue(e){try{if(null!=c(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function le(e){if(0===e)return!1;const t=c(e);if(1===e){if(!ie(t,"OES_texture_float"))return!1}else if(!ie(t,"EXT_color_buffer_float"))return!1;return pe(t)}function ce(e){if(0===e)return!1;const t=c(e);if(1!==e){if(ie(t,"EXT_color_buffer_float"))return pe(t);const e="EXT_color_buffer_half_float";if(ie(t,e)){const n=t.getExtension(e);return function(e,t){const n=x(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(a),s}(t,n)}return!1}return!!ie(t,"OES_texture_float")&&(!!ie(t,"WEBGL_color_buffer_float")&&pe(t))}function pe(e){const t=x(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function de(e){return 2===e&&null!=c(e).fenceSync}function he(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const fe=(0,o.env)();function me(){let e,t,n,r,a,s,i,u,l,c;return 2===(0,o.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",s="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",a="texture2D",s="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:s,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function ge(e,t,n="index"){const r=o.util.computeStrides(t);return r.map(((t,a)=>`int ${e[a]} = ${n} / ${t}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function xe(e,t,n="index"){const r=o.util.computeStrides(t);return r.map(((t,a)=>`int ${e[a]} = ${n} / outShapeStrides[${a}]; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function ye(e){const t=o.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}fe.registerFlag("HAS_WEBGL",(()=>fe.getNumber("WEBGL_VERSION")>0)),fe.registerFlag("WEBGL_VERSION",(()=>ue(2)?2:ue(1)?1:0)),fe.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),fe.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===fe.get("WEBGL_VERSION"))),fe.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),fe.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),fe.registerFlag("WEBGL_PACK",(()=>fe.getBool("HAS_WEBGL"))),fe.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_CLIP",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_PACK_REDUCE",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_LAZILY_UNPACK",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_CONV_IM2COL",(()=>fe.getBool("WEBGL_PACK"))),fe.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>ne(fe.getNumber("WEBGL_VERSION")))),fe.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>se(fe.getNumber("WEBGL_VERSION")))),fe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=fe.getNumber("WEBGL_VERSION");return 0===e?0:oe(e)})),fe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>fe.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!o.device_util.isMobile())),fe.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>le(fe.getNumber("WEBGL_VERSION")))),fe.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!fe.getBool("WEBGL_FORCE_F16_TEXTURES")&&fe.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),fe.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>ce(fe.getNumber("WEBGL_VERSION")))),fe.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>de(fe.getNumber("WEBGL_VERSION")))),fe.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>fe.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),fe.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),fe.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>o.device_util.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),fe.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),fe.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),fe.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),fe.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),fe.registerFlag("WEBGL_EXP_CONV",(()=>!1)),fe.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>fe.getBool("IS_TEST")));const be="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:ve}=o.backend_util;function we(e,t,n){const r=[];if(e.forEach((e=>{const t=o.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=Re(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=r.join("\n"),s=e.map((e=>function(e,t,n=!1,r){let a="";a+=n?Se(e,r):ke(e,r);const s=e.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(a+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",s=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,u=ve(e.shapeInfo.logicalShape,t.logicalShape),l=_e(i),c=i-s;let p;const d=["x","y","z","w","u","v"];p=0===s?"":i<2&&u.length>=1?"coords = 0;":u.map((e=>`coords.${d[e+c]} = 0;`)).join("\n");let h="";h=i<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+c]}`)).join(", ");let f="return outputValue;";const m=1===o.util.sizeFromShape(e.shapeInfo.logicalShape),g=1===o.util.sizeFromShape(t.logicalShape);if(1!==s||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=s-2,t=s-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      vec4 outputValue = get${r}(${h});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",s=t.texShape,i=e.shapeInfo.texShape,u=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&u===l&&null==e.shapeInfo.flatOffset&&o.util.arraysEqual(i,s))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=_e(l),p=ve(e.shapeInfo.logicalShape,t.logicalShape),d=l-u;let h;const f=["x","y","z","w","u","v"];h=0===u?"":l<2&&p.length>=1?"coords = 0;":p.map((e=>`coords.${f[e+d]} = 0;`)).join("\n");let m="";return m=l<2&&u>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+d]}`)).join(", "),`\n    float ${a}() {\n      ${c} coords = getOutputCoords();\n      ${h}\n      return get${r}(${m});\n    }\n  `}(e,t)),a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,u=me(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,p,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Ie}\n    ${Ne}\n    ${$e}\n  `}(u);return t.isPacked?(c=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `:1===r[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(o.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),s=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),s=a*Math.ceil(e[e.length-2]/2);let o=s,i="",u="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return o.util.arraysEqual(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${xe(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const r=ge(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${xe(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const r=ge(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=ge(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=ge(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),n.packedInputs&&(d+=Te),[d,l,p,a,c,s,n.userCode].join("\n")}function ke(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[a,s]=e.shapeInfo.texShape;if(1===a&&1===s)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=Ce(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${Ee(e)}\n      }\n    `;const a=e.shapeInfo.texShape,s=a[0],o=a[1];if(1===o&&1===s)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=Ce(n);return 1===o?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===s?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape;if(null!=s&&o.util.arraysEqual(n,s)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=s[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:i,keptDims:u}=o.util.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${ke(Ae(e,l),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${De(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Ee(e)}\n      }\n    `;const c=s[0],p=s[1],d=Ce(r);return 1===p?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `:1===c?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${d}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${d}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${p}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `:t?`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${d};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${d};\n    vec2 uv = uvFromFlat(${c}, ${p}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=n[1]*n[2],i=n[2],{newShape:u,keptDims:l}=o.util.squeezeShape(n),c=u;if(c.length<n.length){const n=["row","col","depth"];return`\n        ${ke(Ae(e,c),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${De(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${i}, 1)));\n        ${Ee(e)}\n      }\n    `;const p=e.shapeInfo.texShape,d=p[0],h=p[1],f=e.shapeInfo.flatOffset;if(h===s&&null==f)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${d}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===i&&null==f)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${d}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const m=Ce(r);return t?`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${s} + col * ${i} + depth + ${m};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${i} + depth + ${m};\n        vec2 uv = uvFromFlat(${d}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=n[3],i=n[2]*s,u=n[1]*i,{newShape:l,keptDims:c}=o.util.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${ke(Ae(e,l),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${De(n,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${i}, ${s}, 1)));\n        ${Ee(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,h=d[0],f=d[1],m=`int stride2 = ${r}Shape[3];`,g=`int stride1 = ${r}Shape[2] * stride2;`,x=`int stride0 = ${r}Shape[1] * stride1;`;if(f===u&&null==p)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(f===s&&null==p)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=Ce(r);return t?`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${g}\n      ${x}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${f}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],s=t[3]*a,i=t[2]*s,u=t[1]*i,{newShape:l,keptDims:c}=o.util.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${ke(Ae(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${De(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${i}, ${s}, ${a})) +\n          depth3;\n        ${Ee(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,h=d[0],f=d[1];if(f===u&&null==p)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${s}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==p)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} + depth * ${s} +\n          depth2 * ${a} + depth3 + ${Ce(n)};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:s}=o.util.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ke(Ae(e,a))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${De(t,s)});\n      }\n    `}const i=t[5],u=t[4]*i,l=t[3]*u,c=t[2]*l,p=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${p}, ${c}, ${l}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Ee(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],m=h[1];if(m===p&&null==d)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===i&&null==d)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${p} + col * ${c} + depth * ${l} +\n          depth2 * ${u} + depth3 * ${i} + depth4 + ${Ce(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function Se(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${me().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=me();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,i=s[0],u=s[1],l=me();if(null!=s&&o.util.arraysEqual(n,s))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${i}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const c=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${c[0]}, ${c[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){const r=[1,2],s=["b","row","col"];return`\n        ${Se(Ae(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${De(s,r)});\n        }\n      `}const i=me();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const u=o[0],l=o[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=me();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const s=e.shapeInfo.logicalShape,o=s.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],p=Math.ceil(s[o-1]/2);let d=p*Math.ceil(s[o-2]/2),h="int b, int row, int col",f=`b * ${d} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)h=`int b${e}, `+h,d*=s[o-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${r}(${h}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Ie="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ne="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",$e="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Te="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ce(e){return`offset${e}`}function Ee(e){const t=e.name,n=o.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function _e(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Re(e,t,n){const{newShape:r,keptDims:a}=o.util.squeezeShape(t),s=t.length,i=e&&3===s&&1===t[0],u=i?t.slice(1):r,l=!e&&s>1&&!o.util.arraysEqual(t,n)&&r.length<s||i;return{useSqueezeShape:l,uniformShape:l?u:t,keptDims:a}}function Ae(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function De(e,t){return t.map((t=>e[t])).join(", ")}function Oe(e,t,n){const r={},a={},s={},i=[];let u,l,c,p=null,d=null;d=e.getUniformLocation(n,"NAN",!1),1===(0,o.env)().getNumber("WEBGL_VERSION")&&(p=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];r[i]=e.getUniformLocation(n,i,h),r[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,h),t.enableShapeUniforms&&(a[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,h),s[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,h))}return t.enableShapeUniforms&&(u=e.getUniformLocation(n,"outShape",h),c=e.getUniformLocation(n,"outShapeStrides",h),l=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,r)=>{i[r]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:r,customUniformLocations:i,infLoc:p,nanLoc:d,inShapesLocations:a,inTexShapesLocations:s,outShapeLocation:u,outShapeStridesLocation:c,outTexShapeLocation:l}}function Fe(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,a=t[n],s=a.shape;if(!o.util.arraysEqual(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!o.util.arraysEqual(i,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`)}))}function Be(e){return(0,o.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Me{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=p.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=me();this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?xe(["r","c","d"],e):ge(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Pe{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=p.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=me();this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?xe(["r","c","d"],e):ge(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Le{constructor(e){this.variableNames=["A"],this.outTexUsage=d.DOWNLOAD;const t=me();this.outputShape=e,this.userCode=`\n      ${be}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class Ve{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=d.DOWNLOAD;const t=me();this.outputShape=e,this.userCode=`\n      ${be}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class ze{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=me();this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ye(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class We{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=me();this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length);let r="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const s=2*t+a;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${s}] = values[0];\n            } else if (offset == 1) {\n              result[${s}] = values[1];\n            } else if (offset == 2) {\n              result[${s}] = values[2];\n            } else {\n              result[${s}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ye(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${a};\n        }\n    `}}function Ue(e){const t=me();return k(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ge(e){return E(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Xe(e){return _(e,new Uint16Array([0,1,2,2,1,3]))}function He(e,t,n,r,a,s){D(t,n);const i=A(e),u=e.TEXTURE_2D;return y(e,(()=>e.bindTexture(u,i))),y(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),y(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),y(e,(()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST))),y(e,(()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,o.env)().getNumber("WEBGL_VERSION")?y(e,(()=>e.texImage2D(u,0,r,t,n,0,a,s,null))):y(e,(()=>e.texStorage2D(u,1,r,t,n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function qe(e){return e.internalFormatFloat}function je(e,t,n,r){const[a,s]=f(t,n);return He(e,a,s,qe(r),r.textureFormatFloat,e.FLOAT)}function Ke(e){return e.internalFormatHalfFloat}function Ye(e,t,n,r){const[a,s]=f(t,n);return He(e,a,s,Ke(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function Qe(e){return e.downloadTextureFormat}function Ze(e,t,n,r){const[a,s]=f(t,n);return He(e,a,s,Qe(r),e.RGBA,e.UNSIGNED_BYTE)}function Je(e){return e.internalFormatPackedFloat}function et(e,t,n,r){const[a,s]=g(t,n);return He(e,a,s,Je(r),e.RGBA,e.FLOAT)}function tt(e){return e.internalFormatPackedHalfFloat}function nt(e,t,n,r){const[a,s]=g(t,n);return He(e,a,s,tt(r),e.RGBA,r.textureTypeHalfFloat)}function rt(e,t,n){return y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),F(e,t,"clipSpacePos",n,3,20,0)&&F(e,t,"uv",n,2,20,12)}function at(e,t,n,r,a,s){let i,u,l;y(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(i=new Uint8Array(n*r*4),u=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*r*4),u=e.FLOAT,l=s.internalFormatPackedFloat),i.set(a),2===(0,o.env)().getNumber("WEBGL_VERSION")?y(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,u,i))):y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,u,i))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function st(e,t,n){y(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===(0,o.env)().getNumber("WEBGL_VERSION")?y(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===(0,o.env)().getNumber("WEBGL_VERSION")?y(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):y(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),y(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function ot(e,t,n,r){const a=e.createBuffer();y(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const s=16*t*n;return y(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),y(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),y(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}function it(e,t,n){const r=e,a=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,a),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),a}function ut(e,t,n,r){const[a,s]=f(t,n),o=new Uint8Array(t*n*4);return y(e,(()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}function lt(e,t,n,r,a,s,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=g(e,t);return n*r*4}(s,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}function ct(e,t,n){const r=new Float32Array(t*n*4);return y(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}class pt{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=(0,o.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,l(t,e)):this.gl=c(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,o.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=w(this.gl,e),ie(this.gl,t))this.textureHalfFloatExtension=w(this.gl,t);else if((0,o.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),ie(this.gl,r))this.colorBufferHalfFloatExtension=w(this.gl,r);else if((0,o.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",ie(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!ie(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=Ge(this.gl),this.indexBuffer=Xe(this.gl),this.framebuffer=O(this.gl),this.textureConfig=x(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,o.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;y(e,(()=>e.finish())),y(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),y(e,(()=>e.deleteFramebuffer(this.framebuffer))),y(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),y(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),y(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),je(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),Ye(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),Ze(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),st(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),at(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),nt(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),et(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(U(this.gl,this.framebuffer),this.outputTexture=null),y(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>ut(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return lt(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return it(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=ot(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,o.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(a,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=a}else(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>ct(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=Ue(t));const n=$(t);return y(t,(()=>t.attachShader(n,this.vertexShader))),y(t,(()=>t.attachShader(n,e))),T(t,n),this.debug&&C(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=rt(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&y(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&C(this.gl,this.program),y(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?P(this.gl,e,t):L(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),y(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),V(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,a]=g(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&C(this.gl,this.program),G(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),y(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),y(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=w(this.gl,2===(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await o.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||o.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),W(this.gl,e,this.framebuffer),this.debug&&G(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(W(this.gl,this.outputTexture,this.framebuffer),this.debug&&G(this.gl)):U(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;W(r,e,this.framebuffer),this.debug&&G(r),this.outputTexture=e,y(r,(()=>r.viewport(0,0,t,n))),y(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),y(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function dt(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function ht(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}function ft(e){return(t,n,r,a,s)=>{const i=o.backend_util.assertAndGetBroadcastShape(t,n),u=i.length,l=o.util.computeStrides(i),c=o.util.sizeFromShape(i),p=o.util.getTypedArrayFromDType(s,c),d=t.length,h=n.length,f=o.util.computeStrides(t),m=o.util.computeStrides(n),g=o.backend_util.getBroadcastDims(t,i),x=o.backend_util.getBroadcastDims(n,i);if(g.length+x.length===0)for(let t=0;t<p.length;++t)p[t]=e(r[t%r.length],a[t%a.length]);else for(let t=0;t<p.length;++t){const n=o.util.indexToLoc(t,u,l),s=n.slice(-d);g.forEach((e=>s[e]=0));const i=o.util.locToIndex(s,d,f),c=n.slice(-h);x.forEach((e=>c[e]=0));const y=o.util.locToIndex(c,h,m);p[t]=e(r[i],a[y])}return[p,i]}}function mt(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}function gt(e,t,n="float32"){if("complex64"===n)return mt({inputs:{real:gt(e,t,"float32"),imag:gt(e,t,"float32")},backend:e});const r=o.util.makeZerosTypedArray(o.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function xt(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function yt(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){const r=o.util.toTypedArray([0],n),[a,s]=ft(((e,t)=>e!==t?1:0))(t,[],e,r,"bool");return[s,"bool",a]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}function bt(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:s}=r;if("complex64"===s){if("complex64"===a.dtype)return xt({inputs:{x:a},backend:n});const e=gt(n,a.shape,a.dtype),t=bt({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=mt({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}({inputs:{input:a},backend:n}),t=bt({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!o.util.hasEncodingLoss(a.dtype,s)){const e=xt({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}const i=n.data.get(a.dataId).values,[u,l,c]=yt(i,a.shape,a.dtype,s);return n.makeTensorInfo(u,l,c)}function vt(e,t,n,r){return null==n?({inputs:n,backend:a})=>{const{a:s,b:i}=n,u=a;dt([s,i],e);const l=u.data.get(s.dataId).values,c=u.data.get(i.dataId).values,p="string"===s.dtype?o.backend_util.fromUint8ToStringArray(l):l,d="string"===s.dtype?o.backend_util.fromUint8ToStringArray(c):c,h=r||s.dtype,[f,m]=t(s.shape,i.shape,p,d,h);return u.makeTensorInfo(m,h,f)}:({inputs:e,backend:a})=>{const{a:s,b:o}=e,i=a;if("complex64"===s.dtype||"complex64"===o.dtype){const e=bt({inputs:{x:s},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(a.dataId).values,c=bt({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),d=p.complexTensorInfos.real,h=p.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(h.dataId).values,[g,x,y]=n(s.shape,o.shape,u,l,f,m),b=i.makeTensorInfo(y,"float32",g),v=i.makeTensorInfo(y,"float32",x),w=mt({inputs:{real:b,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(b),i.disposeIntermediateTensorInfo(v),w}{const e=i.data.get(s.dataId).values,n=i.data.get(o.dataId).values,a=r||s.dtype,[u,l]=t(s.shape,o.shape,e,n,a);return i.makeTensorInfo(l,a,u)}}}function wt(e){return(t,n,r,a,s,i)=>{const u=o.backend_util.assertAndGetBroadcastShape(t,n),l=o.util.sizeFromShape(u),c=u.length,p=o.util.computeStrides(u),d=o.util.getTypedArrayFromDType("float32",l),h=o.util.getTypedArrayFromDType("float32",l),f=o.backend_util.getBroadcastDims(t,u),m=o.backend_util.getBroadcastDims(n,u),g=o.backend_util.mergeRealAndImagArrays(r,a),x=o.backend_util.mergeRealAndImagArrays(s,i),y=t.length,b=o.util.computeStrides(t),v=n.length,w=o.util.computeStrides(n);if(f.length+m.length===0)for(let t=0;t<d.length;t++){const n=t%g.length,r=t%x.length,a=e(g[2*n],g[2*n+1],x[2*r],x[2*r+1]);d[t]=a.real,h[t]=a.imag}else for(let t=0;t<d.length;t++){const n=o.util.indexToLoc(t,c,p),r=n.slice(-y);f.forEach((e=>r[e]=0));const a=o.util.locToIndex(r,y,b),s=n.slice(-v);m.forEach((e=>s[e]=0));const i=o.util.locToIndex(s,v,w),u=e(g[2*a],g[2*a+1],x[2*i],x[2*i+1]);d[t]=u.real,h[t]=u.imag}return[d,h,u]}}o.Abs,o.Complex,o.Identity,o.Real,o.Cast;const kt=ft(((e,t)=>e+t)),St=wt(((e,t,n,r)=>({real:e+n,imag:t+r})));function It(e,t,n,r,a){const s=o.util.sizeFromShape(r),i=o.util.makeZerosTypedArray(a,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=a||(i[r]+=s>0?t[n]:1)}return i}function Nt(e,t,n,r=!1){const a=e.shape[0],s=e.shape[1],i=(0,o.buffer)([a,n],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<s;a++){const s=e.get(o,a);if(s<0)throw new Error("Input x must be non-negative!");s>=n||(r?i.set(1,o,s):t.size>0?i.set(i.get(o,s)+t.get(o,a),o,s):i.set(i.get(o,s)+1,o,s))}return i}function $t(e){return(t,n,r)=>{const a=o.util.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],r);return a}}function Tt(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:i}=r;if(dt(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=s,l=u.data.get(i.dataId).values,c=o.util.sizeFromShape(i.shape),p=n||i.dtype,d=o.util.getArrayFromDType(p,c);for(let e=0;e<c;++e)d[e]=t(l[e],a);return u.makeTensorInfo(i.shape,p,d)}}function Ct(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(dt(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=n||o.dtype,c=t(u,l,a);return i.makeTensorInfo(o.shape,l,c)}}vt(o.Add,kt,St),o.Add;const Et=$t((e=>Math.ceil(e)));function _t(e,t,n,r){const a=o.util.getArrayFromDType(n,o.util.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=o.util.sizeFromShape(e.shape);a.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const s="string"===n?o.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[o+t]=s[i++]}r+=e.shape[1]}))}return a}Ct(o.Ceil,Et),o.Ceil;const Rt=ft(((e,t)=>e===t?1:0)),At=(vt(o.Equal,Rt,null,"bool"),o.Equal,$t((e=>Math.exp(e)))),Dt=(Ct(o.Exp,At,"float32"),o.Exp,$t((e=>Math.expm1(e)))),Ot=(Ct(o.Expm1,Dt),o.Expm1,$t((e=>Math.floor(e))));function Ft(e,t,n,r,a,s,i,u,l){const c=(0,o.buffer)([r,s],n);for(let n=0;n<r;n++){const r=[];let o=0;for(let t=0;t<a;t++){const s=e[n*a+t];o+=s*i[t],r.push(s)}if(o<0||o>=l/s)throw new Error(`Invalid indices: ${r} does not index into ${u}`);for(let e=0;e<s;e++)c.values[n*s+e]=t.get(...t.indexToLoc(o*s+e))}return c}function Bt(e,t,n){const r=(0,o.buffer)(n,e.dtype);for(let n=0;n<r.size;++n){const a=r.indexToLoc(n).slice(),s=a[0],o=a[2],i=t.locToIndex([s,o]);a[2]=t.values[i];const u=e.locToIndex(a);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}Ct(o.Floor,Ot),o.Floor;const Mt=ft(((e,t)=>e>t?1:0)),Pt=(vt(o.Greater,Mt,null,"bool"),o.Greater,ft(((e,t)=>e>=t?1:0))),Lt=(vt(o.GreaterEqual,Pt,null,"bool"),o.GreaterEqual,ft(((e,t)=>e<t?1:0))),Vt=(vt(o.Less,Lt,null,"bool"),o.Less,ft(((e,t)=>e<=t?1:0)));function zt(e,t,n){const r=(t-e)/(n-1),a=o.util.makeZerosTypedArray(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a}vt(o.LessEqual,Vt,null,"bool"),o.LessEqual;const Wt=$t((e=>Math.log(e)));function Ut(e,t,n,r){const a=o.util.getTypedArrayFromDType(r,o.util.sizeFromShape(n));for(let n=0;n<a.length;++n){const r=n*t;let s=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>s)&&(s=t)}a[n]=s}return a}Ct(o.Log,Wt),o.Log;const Gt=ft(((e,t)=>Math.max(e,t))),Xt=(vt(o.Maximum,Gt),o.Maximum,ft(((e,t)=>Math.min(e,t)))),Ht=(vt(o.Minimum,Xt),o.Minimum,ft(((e,t)=>e*t))),qt=wt(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})));function jt(e,t,n){const r=o.util.createScalarValue(-1,n);return Ht([],t,r,e,n)}vt(o.Multiply,Ht,qt),o.Multiply,o.Neg;const Kt=ft(((e,t)=>e!==t?1:0));function Yt(e,t,n,r,a){const s=t.length,i=o.util.sizeFromShape(t),u=o.util.computeStrides(t),l=o.util.computeStrides(a),c=o.util.getTypedArrayFromDType(n,o.util.sizeFromShape(a));for(let t=0;t<i;++t){const n=o.util.indexToLoc(t,s,u),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[r[e]];c[o.util.locToIndex(a,s,l)]=e[t]}return c}function Qt(e,t,n,r){const[a,s]=o.backend_util.computeOutAndReduceShapes(e,r),i=(0,o.upcastType)(t,"int32"),u=o.util.makeZerosTypedArray(o.util.sizeFromShape(a),i),l=o.util.sizeFromShape(s);for(let e=0;e<u.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];u[e]=r}return{outVals:u,outShape:a,outDtype:i}}vt(o.NotEqual,Kt,null,"bool"),o.NotEqual,o.Transpose,o.Prod;var Zt=o.backend_util.RowPartitionType;class Jt{constructor(e,t,n,r,a,s,i,u,l,c){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=a,this.defaultValue=s,this.defaultValueShape=i,this.rowPartitionValues=u,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=o.backend_util.getRowPartitionTypesHelper(c),this.raggedRank=o.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Zt.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Zt.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Zt.VALUE_ROWIDS:return Jt.getMaxWidthValueRowID(t);case Zt.ROW_SPLITS:return Jt.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Zt[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],a=0;for(let s=1;s<t;++s){const t=e[s];t!==r&&(r=t,a=Math.max(s-n,a),n=s)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return tn(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;o.backend_util.validateDefaultValueShape(n,t);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=o.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),a=[];let s=0;for(let e=0;e<r;++e,s+=t)a.push(s);for(let t=r;t<e;++t)a.push(-1);return o.util.assert(a.length===e,(()=>"Final length of result must be equal to firstDimension.")),a}calculateOutputIndexRowSplit(e,t,n,r){const a=e.length,s=[];for(let o=0;o<a-1;++o){const a=e[o+1]-e[o];let i=Math.min(r,a),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)s.push(u),u+=n;for(let e=0;e<a-i;++e)s.push(-1)}if(a>0&&s.length!==e[a-1])throw new Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,r){const a=e.length,s=[];if(0===a)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];s.push(u);for(let l=1;l<a;++l){const a=e[l];if(a===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=a,a>=t.length)throw new Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);u=t[a]}s.push(u)}if(s.length!==e.length)throw new Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,r){const a=this.getRowPartitionTensor(e),s=this.getRowPartitionTypeByDimension(e);switch(s){case Zt.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,r);case Zt.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,r);default:throw new Error(`Unsupported partition type: ${Zt[s]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Zt.FIRST_DIM_SIZE:return e[0];case Zt.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Zt.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Zt[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=tn(t,!1),a=o.util.getArrayFromDType(this.valuesDType,o.util.sizeFromShape(r));if(n[0]*t[0]>0){let s=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)s=this.calculateOutputIndex(e-1,s,n[e],t[e]);this.setOutput(this.raggedRank,s,a,r)}return[r,a]}setOutput(e,t,n,r){if(0===n.length)return;const a=this.values,s=n;let i=r.slice();i=i.slice(e+1);const u=o.util.sizeFromShape(i),l=t.length;let c=this.defaultValue;if(c.length!==u&&1!==c.length){const e=this.defaultValueShape;(0,o.tidy)((()=>{const t=(0,o.reshape)(c,e),n=(0,o.broadcastTo)(t,i);c=n.dataSync()}))}let p=0,d=0,h=0;for(let e=0;e<=l;++e){let r=e<l?t[e]:-1;if(r!==h){if(d<h){const e=a.subarray(p*u);en(s.subarray(d*u),e,(h-d)*u)}if(e>=l){const e=n.length;r=Math.floor(e/u)}if(r>h)if(1===this.defaultValue.length)s.subarray(h*u,r*u).fill(this.defaultValue[0]),h=r;else for(;r>h;)en(s.slice(h*u),c,u),++h;r<0?(p=e+1,d=h):(p=e,d=h,h=d+1)}else++h}}}function en(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function tn(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function nn(e,t,n,r,a,s,o,i,u,l){return new Jt(e,t,n,r,a,s,o,i,u,l).compute()}function rn(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return o.util.makeZerosTypedArray(0,r);const a=Math.abs(Math.ceil((t-e)/n)),s=o.util.makeZerosTypedArray(a,r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const an=$t((e=>1/Math.sqrt(e)));function sn(e,t,n,r,a,s,i,u,l,c){const p=[r/a,a],d=e.values,h=t.values;if(0===r)return(0,o.buffer)(n,t.dtype);const f=(0,o.buffer)(p,t.dtype);"string"==typeof l||"number"==typeof l?f.values.fill(l):"boolean"==typeof l&&f.values.fill(+l);for(let e=0;e<s;e++){const s=[];let o=0;for(let t=0;t<i;t++){const n=d[e*i+t];s.push(n),o+=n*u[t]}if(o<0||o>=r/a)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<a;n++)c?f.values[o*a+n]+=h[e*a+n]:f.values[o*a+n]=0===t.rank?h[0]:h[e*a+n]}return f}Ct(o.Rsqrt,an),o.Rsqrt;const on=$t((e=>1/(1+Math.exp(-e))));function un(e,t,n,r,a){const s=o.slice_util.isSliceContinous(r,t,n),i=o.util.sizeFromShape(n),u=o.util.computeStrides(r);if(s){const n=o.slice_util.computeFlatOffset(t,u);return"string"===a?e.slice(n,n+i):e.subarray(n,n+i)}const l="string"===a?o.backend_util.fromUint8ToStringArray(e):e,c=(0,o.buffer)(r,a,l),p=(0,o.buffer)(n,a);for(let e=0;e<p.size;++e){const n=p.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));p.set(c.get(...r),...n)}return"string"===a?o.backend_util.fromStringArrayToUint8(p.values):p.values}function ln(e,t,n,r,a,s,i){const u=t[0],l=s[0],c=new Array(l),p=new Array(u),d=t[1];if(0===l){if(0!==u)throw new Error(o.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[o.util.getArrayFromDType(n,0),[0,d],o.util.getArrayFromDType(a,0),c,p]}let h=!0,f=0;const m=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*d];if(n<0)throw new Error(o.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(o.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++m[n],h=h&&n>=f,f=n}let g=!0;for(let e=0;e<l;++e){const t=0===m[e];c[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&h){const t=e,n=r;for(let e=0;e<u;++e)p[e]=e;return[t,[u,d],n,c,p]}{const t=m[l-1],s=o.util.getArrayFromDType(n,t*d),h=o.util.getArrayFromDType(a,t),f=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*d],a=f[n],o=(0===n?0:m[n-1])+a;f[n]++;for(let n=0;n<d;++n)s[o*d+n]=e[t*d+n];h[o]=r[t],p[t]=o}for(let e=0;e<l;++e)if(0===f[e]){const t=0===e?0:m[e-1];s[t*d+0]=e;for(let e=1;e<d;++e)s[t*d+e]=0;h[t]=i}return[s,[t,d],h,c,p]}}function cn(e,t,n,r,a){const s=o.util.sizeFromShape(r),i=t[0],u=a.length,l=[];let c=1,p=-1;for(let e=0;e<u;++e){const t=a[e];if(-1===t){if(-1!==p)throw new Error(o.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(p,e));p=e,l.push(1)}else{if(t<0)throw new Error(o.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));c*=t,l.push(t)}}if(-1!==p){if(c<=0)throw new Error(o.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(s/c);if(c*e!==s)throw new Error(o.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[p]=e}if(o.util.sizeFromShape(l)!==s)throw new Error(o.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const d=r.length,h=[];if(d>0){h[d-1]=1;for(let e=d-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=o.util.getArrayFromDType(n,i*u);for(let t=0;t<i;++t){let n=0;for(let r=0;r<d;++r)n+=e[t*d+r]*h[r];for(let e=0;e<u;++e)m[t*u+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[i,u],l]}function pn(e,t,n,r,a,s=!1,i=0){const u=r.length,l=[t[0],e.length/t[0]],c=l[1],p=u>0?a[u-1]+1:0;if(p<0)throw new Error(o.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const d=t.slice();d[0]=p;const h=d.reduce(((e,t)=>e*t),1),f=o.util.getArrayFromDType(n,h);if(0===u)return p>0&&f.fill(i),[f,d];if(p<=0)throw new Error(o.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,x=0,y=a[m];for(;;){let t=0;if(g<u){if(t=a[g],y===t){++g;continue}if(y>=t)throw new Error(o.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=p)throw new Error(o.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,p));y>x&&f.fill(i,x*c,y*c);for(let t=m;t<g;++t){const n=r[t];if(n<0||n>=l[0])throw new Error(o.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<c;t++)f[y*c+t]+=e[n*c+t]}if(s)for(let e=0;e<c;e++)f[y*c+e]/=g-m;if(m=g,++g,x=y+1,y=t,g>u)break}return x<p&&f.fill(i,x*c,p*c),[f,d]}Tt(o.Sigmoid,(e=>1/(1+Math.exp(-e)))),o.Sigmoid,o.Slice;const dn=$t((e=>Math.sqrt(e))),hn=(Tt(o.Sqrt,(e=>Math.sqrt(e))),o.Sqrt,ft(((e,t)=>{const n=e-t;return n*n})));function fn(e,t,n,r){const a=(0,o.buffer)(e,t.dtype);for(let e=0;e<a.size;e++){const s=a.indexToLoc(e),o=new Array(s.length);for(let e=0;e<o.length;e++)o[e]=s[e]*n[e]+r[e];a.set(t.get(...o),...s)}return a}vt(o.SquaredDifference,hn),o.SquaredDifference;class mn{constructor(e,t,n,r,a,s){this.separator=o.util.encodeString(e),this.nGramWidths=t,this.leftPad=o.util.encodeString(n),this.rightPad=o.util.encodeString(r),this.padWidth=a,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),l=Math.max(0,i-(a-(o+1))),c=s-(u+l),p=t+(u>0?0:o-i);let d=0;d+=u*this.leftPad.length;for(let t=0;t<c;++t)d+=e[p+t].length;d+=l*this.rightPad.length,d+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(d);const h=n[r+o];let f=0;const m=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(r=r&&t[a]<=n,!r)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=r-1,s=o.util.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=a;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),s[e]=s[e-1]+r}const i=new Array(s[a]);for(let n=0;n<a;++n){const r=t[n];let a=s[n];if(this.nGramWidths.forEach((s=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,s);this.createNGrams(e,r,i,a,u,s),a+=u})),this.preserveShort&&a===s[n]){const s=t[n+1]-t[n];if(0===s)continue;const o=s+2*this.padWidth,u=1;this.createNGrams(e,r,i,a,u,o)}}return[i,s]}}function gn(e,t,n,r,a,s,o,i){return new mn(n,r,a,s,o,i).compute(e,t)}function xn(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return void(n&&0===e.length||r.push(e))}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}function yn(e,t,n){const r=e.length,a=[];let s=0,i=0;const u=new Array(r);for(let o=0;o<r;++o){const r=a.length;xn(e[o],t,n,a);const l=a.length-r;u[o]=l,s+=l,i=Math.max(i,l)}const l=o.util.getArrayFromDType("int32",2*s),c=new Array(s),p=[r,i];let d=0;for(let e=0;e<r;++e)for(let t=0;t<u[e];++t)l[2*d]=e,l[2*d+1]=t,c[d]=a[d],++d;return[l,c,p]}function bn(e,t){const n=o.util.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=o.util.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const vn=ft(((e,t)=>e-t)),wn=wt(((e,t,n,r)=>({real:e-n,imag:t-r})));function kn(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=(0,o.buffer)(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const s=e.locToIndex(a);r.values[t]=e.values[s]}return r}vt(o.Sub,vn,wn),o.Sub;const Sn=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function In(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const a=r-n+1,s=t-n+1,o=Math.log(a),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(a-i)/a)*Math.sign(s-a/2);In(e,t,Math.max(n,Math.floor(t-s*i/a+u)),Math.min(r,Math.floor(t+(a-s)*i/a+u)))}const a=e[t];let s=n,i=r;for(o.util.swap(e,n,t),Sn(e[r],a)>0&&o.util.swap(e,n,r);s<i;){for(o.util.swap(e,s,i),s++,i--;Sn(e[s],a)<0;)s+=1;for(;Sn(e[i],a)>0;)i-=1}0===Sn(e[n],a)?o.util.swap(e,n,i):(i+=1,o.util.swap(e,i,r)),i<=t&&(n=i+1),t<=i&&(r=i-1)}}function Nn(e,t,n,r,a){const s=t[t.length-1],[i,u]=[e.length/s,s],l=o.util.getTypedArrayFromDType(n,i*r),c=o.util.getTypedArrayFromDType("int32",i*r);for(let t=0;t<i;t++){const n=t*u,s=e.subarray(n,n+u);let o=new Array(s.length);s.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(In(o,r),o=o.slice(0,r)),a&&o.sort(Sn);const i=t*r,p=l.subarray(i,i+r),d=c.subarray(i,i+r);for(let e=0;e<r;e++)p[e]=o[e].value,d[e]=o[e].index}const p=t.slice();return p[p.length-1]=r,[(0,o.buffer)(p,n,l),(0,o.buffer)(p,"int32",c)]}function $n(e,t,n,r){const a=o.util.parseAxisParam(t,n)[0],s=[1,n[0],1];for(let e=0;e<a;e++)s[0]*=n[e];s[1]=n[a];for(let e=a+1;e<n.length;e++)s[2]*=n[e];const i={},u=new Int32Array(n[a]),l=new o.TensorBuffer(s,r,e),c=[],p=1===s[0]&&1===s[2];for(let t=0;t<n[a];t++){let n;if(p)n=e[t].toString();else{const e=[];for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==i[n])u[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,u[t]=e,c.push(t)}}const d=s.slice();d[1]=Object.keys(i).length;const h=new o.TensorBuffer(d,r);c.forEach(((e,t)=>{for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)h.set(l.get(n,e,r),n,t,r)}));const f=n.slice();return f[a]=d[1],{outputValues:h.values,outputShape:f,indices:u}}const{addImpl:Tn,bincountImpl:Cn,bincountReduceImpl:En,castImpl:_n,ceilImpl:Rn,concatImpl:An,equalImpl:Dn,expImpl:On,expm1Impl:Fn,floorImpl:Bn,gatherNdImpl:Mn,gatherV2Impl:Pn,greaterImpl:Ln,greaterEqualImpl:Vn,lessImpl:zn,lessEqualImpl:Wn,linSpaceImpl:Un,logImpl:Gn,maxImpl:Xn,maximumImpl:Hn,minimumImpl:qn,multiplyImpl:jn,negImpl:Kn,notEqualImpl:Yn,prodImpl:Qn,raggedTensorToTensorImpl:Zn,rangeImpl:Jn,rsqrtImpl:er,scatterImpl:tr,sigmoidImpl:nr,simpleAbsImpl:rr,sliceImpl:ar,sparseFillEmptyRowsImpl:sr,sparseReshapeImpl:or,sparseSegmentReductionImpl:ir,sqrtImpl:ur,stridedSliceImpl:lr,stringNGramsImpl:cr,stringSplitImpl:pr,stringToHashBucketFastImpl:dr,subImpl:hr,tileImpl:fr,topKImpl:mr,transposeImpl:gr,uniqueImpl:xr}=s;function yr(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function br(e,t){return 1===t?[e]:yr(e,t)}class vr{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Be(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=br("rc",this.rank),t=_e(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let a=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class wr{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r,a;this.userCode=`\n      ${r=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?function(e,t,n="index"){const r=function(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=r[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${r[e+1]})`;return a}(e.map(((e,t)=>t)),t);return r.map(((t,a)=>`int ${e[a]} = ${n} / ${r[a]}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${r[a]}`:`index -= ${e[a]} * ${r[a]}`};`)).join("")}(["r","c","d"],"inputShape"):ge(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ye(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class kr{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Ir(t,n),a=Nr(e,r,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const s=Sr(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return r===h.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===h.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===h.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===h.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===h.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const a=Ir(n,r),s=Nr(t,a,r);s in this.freeTextures||(this.freeTextures[s]=[]);const i=Sr(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=(0,o.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[s],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Sr(e,t,n,r,a){const s=function(e,t){switch(e){case h.PACKED_2X2_FLOAT32:return Je(t);case h.PACKED_2X2_FLOAT16:return tt(t);case h.UNPACKED_FLOAT32:return qe(t);case h.UNPACKED_FLOAT16:return Ke(t);case h.PACKED_4X1_UNSIGNED_BYTE:return Qe(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(a){const[t,n]=g(e[0],e[1]);o=t*n}else{const[t,n]=f(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,s);return o*i}function Ir(e,t){if(e===d.UPLOAD)return h.PACKED_2X2_FLOAT32;if(e===d.RENDER||null==e)return function(e){return(0,o.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?h.PACKED_2X2_FLOAT32:h.UNPACKED_FLOAT32:e?h.PACKED_2X2_FLOAT16:h.UNPACKED_FLOAT16}(t);if(e===d.DOWNLOAD||e===d.PIXELS)return h.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Nr(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class $r{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Tr="return abs(x);",Cr="return x;";class Er{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class _r{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length);const t=e.length,n=br("rc",t),r=_e(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const Rr=o.kernel_impls.whereImpl,Ar={},Dr=(0,o.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Or extends o.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,o.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof pt)t=e;else{const n=c((0,o.env)().getNumber("WEBGL_VERSION"),e);t=new pt(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=c((0,o.env)().getNumber("WEBGL_VERSION"));t=new pt(e),this.binaryCache=((n=(0,o.env)().getNumber("WEBGL_VERSION"))in Ar||(Ar[n]={}),Ar[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new kr(this.gpgpu),this.numMBBeforeWarning=null==(0,o.env)().global.screen?1024:(0,o.env)().global.screen.height*(0,o.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o.DataStorage(this,(0,o.engine)())}nextDataId(){return Or.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if(((0,o.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,o.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:d.UPLOAD,refCount:1}),r}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r,a){if((0,o.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:d.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:a,slice:s,shape:i,isPacked:u}=t;if(null!=s){let t;t=u?new Er(i,Cr):new $r(i,Cr);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let c,p;if(l&&(c=o.util.now()),"complex64"===r){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);p=o.backend_util.mergeRealAndImagArrays(e,t)}else p=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=o.util.now()-c),this.convertAndCacheOnCPU(e,p)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:s,complexTensorInfos:i,isPacked:u}=t;if(null!=a){let t;t=u?new Er(r,Cr):new $r(r,Cr);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:s}],s),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if((0,o.env)().getBool("DEBUG")&&!(0,o.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,o.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,p=null;if("complex64"!==s&&(0,o.env)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);p=this.gpgpu.createBufferFromTexture(t.texture.texture,...m(r))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];c=o.backend_util.mergeRealAndImagArrays(t,n)}else if(null==p)c=this.getValuesFromTexture(e);else{const e=o.util.sizeFromShape(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(p,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=p){const e=this.gpgpu.gl;y(e,(()=>e.deleteBuffer(p)))}const d=this.convertAndCacheOnCPU(e,c),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(d))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,o.engine)().removeDataId(e,this),this.pendingDeletes--),d}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:a,slice:s,dtype:i,isPacked:u,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=s){let n;n=u?new Er(a,Cr):new $r(a,Cr);const r=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:i}],i),s=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),s}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const c=this.decode(e,t.customTexShape),p=(0,o.engine)().makeTensorFromTensorInfo(c),d=this.texData.get(c.dataId);return Object.assign({tensorRef:p},d.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>o.util.decodeString(e)));return(0,o.buffer)(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,o.buffer)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!b(n)){if((0,o.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=o.util.sizeFromShape(t);if((0,o.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...m(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const s=(0,o.env)().getBool("WEBGL_PACK")&&!0===r,i=s?Y(t):t,u=s?new Ve(i):new Le(i),l=this.runWebGLProgram(u,[{shape:i,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),p}timerAvailable(){return(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=o.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),s=o.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=o.util.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:s[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:o.util.now(),endMs:null}}endTimer(e){return(0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=o.util.now(),e)}async getQueryTime(e){if((0,o.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Dr){return(0,o.env)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&o.util.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){o.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Rr(e.shape,t)}packedUnaryOp(e,t,n){const r=new Er(e.shape,t),a=this.compileAndRun(r,[e],n);return(0,o.engine)().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=rr(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Tr,e.dtype);const t=new $r(e.shape,Tr),n=this.compileAndRun(t,[e]);return(0,o.engine)().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&o.util.isString(n[0])){const a=n.map((e=>o.util.encodeString(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return(0,o.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new _r(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new vr(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[j(e.shape),...K(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[j(t),...K(t)],s=new wr(a,n),o=[n],i=this.runWebGLProgram(s,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:a,dtype:s}=n;if(null!=t){const e=o.util.sizeFromShape(a),n=t[0]*t[1]*4;o.util.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=Y(a);let u;u=r?new Pe(i):new Me(i);const l=[null!=t?t:m(i)];return{dtype:s,shape:a,dataId:this.runWebGLProgram(u,[{shape:i,dtype:s,dataId:e}],s,l,!0,t).dataId}}runWebGLProgram(e,t,n,r,a=!1,s){const i=this.makeTensorInfo(e.outputShape,n),u=this.texData.get(i.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===p.DENSE){const t=null!=s?s:m(e.outputShape);u.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===o.util.sizeFromShape(i.shape))return u.values=o.util.getTypedArrayFromDType(i.dtype,0),i;const l=[],c=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&o.util.sizeFromShape(t.shape)<=(0,o.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!J(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const d={shape:i.shape,texData:u,isUniform:!1},h=function(e,t,n){let r="";t.concat(n).forEach((t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const s=t.texData.texShape,{useSqueezeShape:i,uniformShape:u,keptDims:l}=Re(e.packedInputs,t.shape,s);let c="",p="",d="";if(1===u.length&&e.packedInputs){const e=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];c=`${e[0]>1}_${e[1]>1}`}else if(2!==u.length||e.packedInputs){if(u.length>2&&!e.packedInputs){const e=o.util.computeStrides(u);d=`${e[0]===s[1]}_${e[e.length-1]===s[1]}`}}else p=`${u[0]>1}_${u[1]>1}`;const h=t.shape.length,f=2===u.length&&o.util.arraysEqual(t.shape,s),m=1===o.util.sizeFromShape(t.shape),g=o.backend_util.getBroadcastDims(t.shape,n.shape),x=!e.packedInputs&&h===n.shape.length&&o.util.arraysEqual(s,n.texData.texShape),y=e.packedInputs||u.length>2?"":`${s[0]>1}_${s[1]>1}`;r+=`${h}_${x}_${i?l:""}_${u.length}_${m}_${g}_${f}_${c}_${p}_${d}_${y}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${a}`}}));const a=e.userCode;let s=e.constructor.name;return s+="_"+r+"_"+a+`${(0,o.env)().getNumber("WEBGL_VERSION")}`,s}(e,c,d),f=this.getAndSaveBinary(h,(()=>function(e,t,n,r){const a=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),s=a.map((e=>e.shapeInfo)),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=we(a,i,t),l=S(e.gl,u),c=e.createProgram(l);return(0,o.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:s,outShapeInfo:i},Oe(e,t,c))}(this.gpgpu,e,c,d))),g=null!=this.activeTimers;let x;g&&(x=this.startTimer()),(0,o.env)().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,a){t.program.enableShapeUniforms||(Fe(t.inShapeInfos,n),Fe([t.outShapeInfo],[r]));const s=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):e.setOutputMatrixTexture(s.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===(0,o.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const a=t.program.variableNames[r],s=t.uniformLocations[a],i=t.uniformLocations[`offset${a}`],u=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(u){const{uniformShape:r}=Re(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(u,new Int32Array(r));break;case 2:e.gl.uniform2iv(u,new Int32Array(r));break;case 3:e.gl.uniform3iv(u,new Int32Array(r));break;case 4:e.gl.uniform4iv(u,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=s)if(n.isUniform)if(o.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,s,r)}));const u=t.outShapeLocation;if(u)switch(r.shape.length){case 1:e.gl.uniform1iv(u,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(u,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(u,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(u,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=o.util.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach(((n,r)=>{const s=t.customUniformLocations[r],o=a[r];if("float"===n.type)e.gl.uniform1fv(s,o);else if("vec2"===n.type)e.gl.uniform2fv(s,o);else if("vec3"===n.type)e.gl.uniform3fv(s,o);else if("vec4"===n.type)e.gl.uniform4fv(s,o);else if("int"===n.type)e.gl.uniform1iv(s,o);else if("ivec2"===n.type)e.gl.uniform2iv(s,o);else if("ivec3"===n.type)e.gl.uniform3iv(s,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,o)}})),e.executeProgram()}(this.gpgpu,f,c,d,r),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),g&&(x=this.endTimer(x),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(x)}));const y=(0,o.env)().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const e=o.util.now();e-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,o.env)().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,r,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,o.env)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,o.tidy)((()=>{if(!(0,o.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,o.env)().getBool("DEBUG");(0,o.env)().set("DEBUG",!1);const t=this.abs((0,o.scalar)(1e-8)).dataSync()[0];if((0,o.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:s,usage:i,isPacked:u}=t;if(null!=s)return;const l=null!=this.activeTimers;let c;l&&(c=o.util.now());let p=t.texShape;if(null==p&&(p=Q(n,u),t.texShape=p),null!=a){const e=Y(n);let s,i=p[1],h=p[0];const f=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!u&&f||([i,h]=g(p[0],p[1])),s=u?new We(e,f):new ze(e,f);const m=f?[h,i]:p,x=this.makeTensorInfo(m,r),y=this.texData.get(x.dataId);y.usage=f?d.PIXELS:d.UPLOAD,y.texShape=m,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(x.dataId),i,h,a);const b=[[h,i]],v=!0,w=this.runWebGLProgram(s,[x],r,b,v),k=this.texData.get(w.dataId);t.texShape=k.texShape,t.isPacked=k.isPacked,t.usage=k.usage,(0,o.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(w.dataId):(t.texture=k.texture,t.values=null,this.texData.delete(w.dataId)),this.disposeIntermediateTensorInfo(x),l&&(this.uploadWaitMs+=o.util.now()-c)}else{const e=this.acquireTexture(p,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*o.util.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,o.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw N(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:a,inShapesLocations:s,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}=Oe(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=a,e.inShapesLocations=s,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}}Or.nextDataId=0;const Fr="3.20.0";function Br(){(0,o.env)().set("WEBGL_FORCE_F16_TEXTURES",!0)}o.device_util.isBrowser()&&(0,o.registerBackend)("webgl",(()=>new Or),2);const Mr={forceHalfFloat:Br};class Pr{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=Be(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class Lr{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=Be(a);let s="";if(r)if(0===a||1===o.util.sizeFromShape(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(s=`\n          ${_e(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?s+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=br("coords",a);this.enableShapeUniforms?s+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:s+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}function Vr(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const zr={kernelName:o.Identity,backendName:"webgl",kernelFunc:Vr};function Wr(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(s.dataId),i=Vr({inputs:{x:r},backend:n}),u=Vr({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:u},s}const Ur={kernelName:o.Complex,backendName:"webgl",kernelFunc:Wr},Gr="return (a < 0.) ? b * a : a;",Xr="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Hr={kernelName:o.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r,i=n.makeTensorInfo([],"float32",o.util.createScalarValue(s,"float32")),u=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lr(Xr,a.shape,i.shape):new Pr(Gr,a.shape,i.shape),l=n.runWebGLProgram(u,[a,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},qr="return (a < 0.) ? b * a : a;",jr="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Kr={kernelName:o.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t,s=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lr(jr,r.shape,a.shape):new Pr(qr,r.shape,a.shape);return n.runWebGLProgram(s,[r,a],"float32")}};function Yr({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:s})=>{const{x:i}=a,u=s,l=r||i.dtype;if(u.shouldExecuteOnCPU([i])&&null!=n){const e=u.texData.get(i.dataId),t=n(e.values,l);return u.makeTensorInfo(i.shape,l,t)}let c;return c=(0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Er(i.shape,t):new $r(i.shape,e),u.runWebGLProgram(c,[i],l)}}function Qr({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:s}){return({inputs:i,backend:u})=>{const{a:l,b:c}=i,p=u;if(r&&"complex64"===l.dtype){const t=p.texData.get(l.dataId),n=p.texData.get(c.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},s={dataId:r.dataId,dtype:r.dtype,shape:c.shape},i=new Pr(e,l.shape,c.shape);return p.runWebGLProgram(i,[a,s],(0,o.upcastType)(n.dtype,r.dtype))})),s=Wr({inputs:{real:r,imag:a},backend:p});return p.disposeIntermediateTensorInfo(r),p.disposeIntermediateTensorInfo(a),s}const d=s||(0,o.upcastType)(l.dtype,c.dtype);if(("string"===l.dtype||"string"===c.dtype||p.shouldExecuteOnCPU([l,c]))&&null!=a){const e=p.texData.get(l.dataId).values,t=p.texData.get(c.dataId).values,n="string"===l.dtype?o.backend_util.fromUint8ToStringArray(e):e,r="string"===l.dtype?o.backend_util.fromUint8ToStringArray(t):t,[s,i]=a(l.shape,c.shape,n,r,d),u=p.makeTensorInfo(i,d);return p.texData.get(u.dataId).values=s,u}let h;return h=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Lr(t,l.shape,c.shape,n):new Pr(e,l.shape,c.shape),p.runWebGLProgram(h,[l,c],d)}}function Zr(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?jr:qr;if("leakyrelu"===e)return t?Xr:Gr;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Jr{constructor(e,t,n,r=!1,a=!1,s=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Be(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),p=r?"i * 2, rc.y":"rc.y, i * 2",d=a?"rc.z, i * 2":"i * 2, rc.z",h=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const x=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let y="rc.x",b="rc.x";e[0]<t[0]?y=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class ea{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=o.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ta="return a * b;";function na(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,s=o.backend_util.upcastType(r.dtype,a.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),s=new ea("return areal * breal - aimag * bimag;",r.shape,a.shape),o=new ea("return areal * bimag + aimag * breal;",r.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],u=n.runWebGLProgram(s,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=Wr({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,a])){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),[o,i]=jn(r.shape,a.shape,e.values,t.values,s),u=n.makeTensorInfo(i,s);return n.texData.get(u.dataId).values=o,u}let i;return i=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lr(ta,r.shape,a.shape):new Pr(ta,r.shape,a.shape),n.runWebGLProgram(i,[r,a],s)}const ra={kernelName:o.Multiply,backendName:"webgl",kernelFunc:na};function aa(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,i=n,u=o.util.sizeFromShape(a.shape),l=o.util.inferFromImplicitShape(s,u),c=o.util.sizeFromShape(l);o.util.assert(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const p=i.texData.get(a.dataId);return!p.isPacked||J(a.shape,l)||null!==p.texture&&J(p.shape,l)?(i.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const r=[j(e.shape),...K(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[j(t),...K(t)],o=new wr(s,r),i=[r],u=n.runWebGLProgram(o,[a],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(a,l,i)}const sa={kernelName:o.Reshape,backendName:"webgl",kernelFunc:aa};class oa{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];const i=4*Math.floor(n/4),u=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${o.util.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ia{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}function ua(e,t,n,r){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=o.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let s=e;for(let o=0;o<a.length;o++){const{inSize:i,windowSize:u,outSize:l}=a[o];let c,p;c="mean"===n?0===o?new oa({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new oa({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new ia({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),p=s,s=r.runWebGLProgram(c,[s],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return s}class la{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=_e(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class ca{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=_e(this.rank),a=yr("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];const o=`vec2(${s.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function pa(e,t,n){const r=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ca(e.shape,t):new la(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function da(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;return function(e,t,n,r){const a=t,s=e.shape.length,i=o.util.parseAxisParam(a,e.shape);let u=i;const l=o.backend_util.getAxesPermutation(u,s),c=null!=l;let p=e;c&&(p=pa(e,l,r),u=o.backend_util.getInnerMostAxes(u.length,s)),o.backend_util.assertAxesAreInnerMostDims("sum",u,s);const[d,h]=o.backend_util.computeOutAndReduceShapes(p.shape,u);let f=d;n&&(f=o.backend_util.expandShapeToKeepDim(d,i));const m=o.util.sizeFromShape(h),g=aa({inputs:{x:p},attrs:{shape:[o.util.sizeFromShape(e.shape)/m,m]},backend:r}),x=ua(g,(0,o.sumOutType)(e.dtype),"sum",r),y=aa({inputs:{x},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(x),c&&r.disposeIntermediateTensorInfo(p),y}(a,s,i,n)}const ha={kernelName:o.Sum,backendName:"webgl",kernelFunc:da};function fa(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{perm:s}=r,o=n,i=a.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=a.shape[s[e]];let l;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=gr(e,a.shape,a.dtype,s,u);l=o.makeTensorInfo(u,a.dtype),o.texData.get(l.dataId).values=t}else l=pa(a,s,o);return l}const ma={kernelName:o.Transpose,backendName:"webgl",kernelFunc:fa};function ga({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:l=null}){const c=e.shape.length,p=t.shape.length,d=n?e.shape[c-2]:e.shape[c-1],h=r?t.shape[p-1]:t.shape[p-2],f=n?e.shape[c-1]:e.shape[c-2],m=r?t.shape[p-2]:t.shape[p-1],g=e.shape.slice(0,-2),x=t.shape.slice(0,-2),y=o.util.sizeFromShape(g),b=o.util.sizeFromShape(x),v=o.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);o.util.assert(d===h,(()=>`Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,d,f]:[y,f,d],k=r?[b,m,h]:[b,h,m],S=aa({inputs:{x:e},backend:a,attrs:{shape:w}}),I=aa({inputs:{x:t},backend:a,attrs:{shape:k}}),N=[S,I],$=Math.max(y,b),T=n?S.shape[1]:S.shape[2],C=null!=s,E=null!=i,_="leakyrelu"===l,R=null!=l?Zr(l,!0):null;let A;if((1===f||1===m)&&T>1e3&&!1===(C||E||_||null!=R)){let e=S,t=I;n&&(e=fa({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),N.push(e)),r&&(t=fa({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),N.push(t));const s=1===m;let o=e;1!==m&&(o=aa({inputs:{x:e},backend:a,attrs:{shape:[$,T,1]}}),N.push(o));const i=1===m?2:1;let u=t;s&&(u=aa({inputs:{x:t},backend:a,attrs:{shape:[$,1,T]}}),N.push(u));const l=na({inputs:{a:o,b:u},backend:a});A=da({inputs:{x:l},backend:a,attrs:{axis:i,keepDims:!0}}),N.push(l)}else{const l=(0,o.upcastType)(e.dtype,t.dtype),c=new Jr(w,k,[$,f,m],n,r,C,R,E,_),p=[S,I];if(null!=s&&p.push(s),E&&p.push(i),_){const e=a.makeTensorInfo([],"float32",o.util.createScalarValue(u,"float32"));p.push(e),N.push(e)}A=a.runWebGLProgram(c,p,l)}const D=aa({inputs:{x:A},backend:a,attrs:{shape:v}});N.push(A);for(const e of N)a.disposeIntermediateTensorInfo(e);return D}const xa={kernelName:o._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;return ga({a,b:s,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:c})}},ya="return abs(x);",ba={kernelName:o.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=rr(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let a;return a=(0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Er(r.shape,ya):new $r(r.shape,ya),n.runWebGLProgram(a,[r],r.dtype)}},va=Yr({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),wa={kernelName:o.Acos,backendName:"webgl",kernelFunc:va},ka=Yr({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Sa={kernelName:o.Acosh,backendName:"webgl",kernelFunc:ka},Ia="return a + b;",Na=Qr({opSnippet:Ia,packedOpSnippet:Ia,supportsComplex:!0,cpuKernelImpl:Tn}),$a={kernelName:o.Add,backendName:"webgl",kernelFunc:Na};class Ta{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Ca{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const Ea={kernelName:o.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,a=n;if(1===a.length)return Vr({inputs:{x:a[0]},backend:r});if(a.length>(0,o.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:r}),s=e({inputs:a.slice(t),backend:r});return e({inputs:[n,s],backend:r})}const s=a.map((e=>e.dtype)).reduce(((e,t)=>(0,o.upcastType)(e,t))),i=a.map((e=>e.shape)),u=(0,o.env)().getBool("WEBGL_PACK")?new Ca(a[0].shape,i):new Ta(a[0].shape,i);return r.runWebGLProgram(u,a,s)}},_a={kernelName:o.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r,u=a.shape.length,l=o.util.parseAxisParam(s,a.shape);let c=l;const p=o.backend_util.getAxesPermutation(c,u);let d=a;null!=p&&(d=fa({inputs:{x:a},backend:n,attrs:{perm:p}}),c=o.backend_util.getInnerMostAxes(c.length,u)),o.backend_util.assertAxesAreInnerMostDims("all",c,u);const[h,f]=o.backend_util.computeOutAndReduceShapes(d.shape,c),m=aa({inputs:{x:d},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(f)]}}),g=ua(m,m.dtype,"all",n);let x;return x=aa(i?{inputs:{x:g},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(h,l)}}:{inputs:{x:g},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(d),x}},Ra={kernelName:o.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r,u=a.shape.length,l=o.util.parseAxisParam(s,a.shape);let c=l;const p=o.backend_util.getAxesPermutation(c,u);let d=a;null!=p&&(d=fa({inputs:{x:a},backend:n,attrs:{perm:p}}),c=o.backend_util.getInnerMostAxes(c.length,u)),o.backend_util.assertAxesAreInnerMostDims("any",c,u);const[h,f]=o.backend_util.computeOutAndReduceShapes(d.shape,c),m=aa({inputs:{x:d},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(f)]}}),g=ua(m,m.dtype,"any",n);let x;return x=aa(i?{inputs:{x:g},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(h,l)}}:{inputs:{x:g},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(d),x}};class Aa{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Da{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,o.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],s=Math.ceil(a/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,u=i.length,l=_e(u),c=br("coords",u);let p,d;if(1===s){d=u+1;const e=_e(d);p=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else d=u,p=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,d),f="."+h[d-1],m=h.map((e=>"int "+e)),g=br("sourceLocR",d-1).concat("inIdx.r"),x=br("sourceLocG",d-1).concat("inIdx.g"),y=br("sourceLocB",d-1).concat("inIdx.b"),b=br("sourceLocA",d-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${x.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,S=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${S}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${i[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${i[u-2]-1};\n        ${p}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Oa(e,t,n,r=null){let a=t.shape[0],s=t.shape[1];null!=r&&(a=r.shape[0],s=r.shape[1]);const i=o.backend_util.computeOptimalWindowSize(s),u={windowSize:i,inSize:s,batchSize:a,outSize:Math.ceil(s/i)},l=new Aa(u,n,null==r),c=[t];null!=r&&c.push(r);const p=e.runWebGLProgram(l,c,"int32");if(1===p.shape[1])return p;const d=Oa(e,t,n,p);return e.disposeIntermediateTensorInfo(p),d}function Fa(e,t,n,r=null){const a=null!=r?r.shape:t.shape,s=a[a.length-1],i=o.backend_util.computeOptimalWindowSize(s),u=new Da(a,i,n,null==r),l=null==r?[t]:[t,r],c=e.runWebGLProgram(u,l,"int32");if(c.shape.length===t.shape.length){const r=Fa(e,t,n,c);return e.disposeIntermediateTensorInfo(c),r}return c}function Ba(e,t,n,r){const a=[n];if(o.backend_util.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!(0,o.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],s=e.texData.get(t.dataId);let i=t;null!==s&&s.isPacked&&(i=e.unpackTensor(t),n.push(i));const[u,l]=o.backend_util.computeOutAndReduceShapes(i.shape,a),c=o.util.sizeFromShape(l),p=aa({inputs:{x:i},backend:e,attrs:{shape:[-1,c]}});n.push(p);const d=Oa(e,p,r);n.push(d);const h=aa({inputs:{x:d},backend:e,attrs:{shape:u}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return Fa(e,t,r)}const Ma={kernelName:o.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;let i=o.util.parseAxisParam(s,a.shape);const u=o.backend_util.getAxesPermutation(i,a.shape.length);let l=a;const c=[];null!=u&&(l=fa({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),i=o.backend_util.getInnerMostAxes(i.length,l.shape.length)),o.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const p=Ba(n,l,i[0],"max");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},Pa={kernelName:o.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;let i=o.util.parseAxisParam(s,a.shape);const u=o.backend_util.getAxesPermutation(i,a.shape.length);let l=a;const c=[];null!=u&&(l=fa({inputs:{x:a},backend:n,attrs:{perm:u}}),c.push(l),i=o.backend_util.getInnerMostAxes(i.length,l.shape.length)),o.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const p=Ba(n,l,i[0],"min");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},La=Yr({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Va={kernelName:o.Asin,backendName:"webgl",kernelFunc:La},za=Yr({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),Wa={kernelName:o.Asinh,backendName:"webgl",kernelFunc:za},Ua=Yr({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),Ga={kernelName:o.Atan,backendName:"webgl",kernelFunc:Ua},Xa=Qr({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Ha={kernelName:o.Atan2,backendName:"webgl",kernelFunc:Xa},qa=Yr({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),ja={kernelName:o.Atanh,backendName:"webgl",kernelFunc:qa};class Ka{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let y=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(y="avgValue / count");const b=4*Math.floor(s/4),v=s%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${h});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${y});\n      }\n    `}}class Ya{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,d=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const y="avg"===t;let b="0.0";if(y||(b="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const w=4*Math.floor(s/4),k=s%4,S=`\n      if (${y}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${x});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${S}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${S}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const Qa={kernelName:o.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;he(a,"avgPool");const{filterSize:s,strides:i,pad:u,dimRoundingMode:l}=r;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=o.backend_util.computePool2DInfo(a.shape,s,i,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&o.util.arraysEqual(c.inShape,c.outShape))return Vr({inputs:{x:a},backend:n});const p=new Ka(c,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}},Za={kernelName:o.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:u,dimRoundingMode:l,dataFormat:c}=r,p=o.backend_util.computePool3DInfo(a.shape,s,i,[1,1,1],u,l,c),d=new Ya(p,"avg",!1);return n.runWebGLProgram(d,[a],"float32")}};class Ja{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class es{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,d=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ts={kernelName:o.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,i=s,{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,d=o.backend_util.computePool3DInfo(i.shape,u,l,[1,1,1],c,p),h=new es(d);return n.runWebGLProgram(h,[a],i.dtype)}},ns={kernelName:o.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,i=s;he([a,s],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,p=o.backend_util.computePool2DInfo(i.shape,u,l,1,c),d=new Ja(p);return n.runWebGLProgram(d,[a],i.dtype)}},rs={kernelName:o.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s}=t,{transposeA:o,transposeB:i}=r;return ga({a,b:s,transposeA:o,transposeB:i,backend:n})}};class as{constructor(e,t,n,r,a,s){this.outputShape=[],this.variableNames=["x","mean","variance"],o.backend_util.assertAndGetBroadcastShape(e,t),o.backend_util.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(o.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="1.0";null!=a&&(o.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ss{constructor(e,t,n,r,a,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],o.backend_util.assertAndGetBroadcastShape(e,t),o.backend_util.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(o.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=a&&(o.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const os={kernelName:o.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:a,variance:s,offset:i,scale:u}=e;o.util.assert(a.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.util.assert(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.util.assert(null==u||a.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[r,a,s];let p=null;null!=i&&(p=i.shape,c.push(i));let d=null;null!=u&&(d=u.shape,c.push(u));const h=(0,o.env)().getBool("WEBGL_PACK_NORMALIZATION")?new ss(r.shape,a.shape,s.shape,p,d,l):new as(r.shape,a.shape,s.shape,p,d,l);return t.runWebGLProgram(h,c,c[0].dtype)}};class is{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=_e(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return us.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${us[t]} = start[${t}] + coords.${us[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const us=["x","y","z","w","u","v"];class ls{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=_e(this.rank),n=br("coords",this.rank),r=br("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function cs(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:i}=r,[u,l]=o.slice_util.parseSliceParams(a,s,i);if(o.slice_util.assertParamsValid(a,u,l),0===o.util.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=ar(e.values,u,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:c}=n.texData.get(a.dataId),p=o.slice_util.isSliceContinous(a.shape,u,l);if(c||!p){const e=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ls(l):new is(l),t=[u];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){const a=r.texData.get(e.dataId),s=r.makeTensorInfo(n,e.dtype),i=r.texData.get(s.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let u=o.slice_util.computeFlatOffset(t,o.util.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),i.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,l+1),s}(a,u,l,n)}const ps={kernelName:o.Slice,backendName:"webgl",kernelFunc:cs},ds={kernelName:o.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:i}=r;o.util.assert(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const u=s.reduce(((e,t)=>e*t)),l=o.backend_util.getReshaped(a.shape,s,u),c=o.backend_util.getPermuted(l.length,s.length),p=o.backend_util.getReshapedPermuted(a.shape,s,u),d=o.backend_util.getSliceBeginCoords(i,s.length),h=o.backend_util.getSliceSize(p,i,s.length),f=[],m=aa({inputs:{x:a},backend:n,attrs:{shape:l}}),g=fa({inputs:{x:m},backend:n,attrs:{perm:c}}),x=aa({inputs:{x:g},backend:n,attrs:{shape:p}}),y=cs({inputs:{x},backend:n,attrs:{begin:d,size:h}});return f.push(m),f.push(g),f.push(x),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},hs={kernelName:o.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.readSync(a.dataId),u=n.readSync(s.dataId),l=Cn(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,l)}},fs={kernelName:o.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.readSync(r.dataId),i=n.readSync(a.dataId),u=o.backend_util.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},ms=Qr({opSnippet:"return float(a != b);",cpuKernelImpl:Yn,dtype:"bool"}),gs={kernelName:o.NotEqual,backendName:"webgl",kernelFunc:ms};function xs(e){const{inputs:t,backend:n}=e,{input:r}=t;return Vr({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const ys={kernelName:o.Real,backendName:"webgl",kernelFunc:xs},bs={kernelName:o.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:a}=t,{x:s}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===s.dtype)return Vr({inputs:{x:s},backend:r});const t=o.zeros(s.shape),n=e({inputs:{x:s},backend:r,attrs:{dtype:"float32"}}),a=Wr({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===s.dtype){const t=xs({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!o.util.hasEncodingLoss(s.dtype,i)){const e=Vr({inputs:{x:s},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(r.shouldExecuteOnCPU([s])){const e=r.texData.get(s.dataId).values,[t,n,a]=_n(e,s.shape,s.dtype,i);return r.makeTensorInfo(t,n,a)}if("int32"===i)return function(e,t){const n=new $r(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(s,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",o.util.getTypedArrayFromDType("bool",1)),t=ms({inputs:{a:s,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}},vs="return ceil(x);",ws=Yr({opSnippet:vs,packedOpSnippet:vs,cpuKernelImpl:Rn}),ks={kernelName:o.Ceil,backendName:"webgl",kernelFunc:ws};class Ss{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Is{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Ns={kernelName:o.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{clipValueMin:s,clipValueMax:i}=r;let u;u=(0,o.env)().getBool("WEBGL_PACK_CLIP")?new Is(a.shape):new Ss(a.shape);const l=[[s],[i]];return n.runWebGLProgram(u,[a],a.dtype,l)}};class $s{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Ts(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Cs={kernelName:o.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new $s(r.shape),o=[Ts(r,a.complexTensorInfos.real),Ts(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,o,o[0].dtype)}};class Es{constructor(e){this.outputShape=[],this.outputShape=o.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class _s{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=o.backend_util.computeOutShape(e,t);const n=this.outputShape,r=n.length,a=_e(r),s=br("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const u=new Array(e.length-1);u[0]=e[0][t];for(let n=1;n<u.length;n++)u[n]=u[n-1]+e[n][t];const l=i[t],c=i.slice(-2),p=i.join();let d=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${p}), vec2(${c.join()}));\n        }`;for(let e=1;e<u.length;e++){const t=u[e-1];d+=`\n        if (${l} < ${u[e]}  && ${l} >= ${u[e-1]}) {\n          return getChannel(\n            getT${e}(${Rs(i,l,t)}),\n            vec2(${Rs(c,l,t)}));\n        }`}const h=u.length,f=u[u.length-1];d+=`\n        return getChannel(\n          getT${h}(${Rs(i,l,f)}),\n          vec2(${Rs(c,l,f)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${d}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[r-1]} = ${s[r-1]} + 1;\n        if (${s[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[r-2]} = ${s[r-2]} + 1;\n        if (${s[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[r-1]} = ${s[r-1]} - 1;\n        if (${s[r-2]} < ${n[r-2]} &&\n            ${s[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function Rs(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function As(e){const{inputs:t,backend:n}=e,{input:r}=t;return Vr({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const Ds={kernelName:o.Imag,backendName:"webgl",kernelFunc:As};function Os(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>xs({inputs:{input:e},backend:n}))),a=e.map((e=>As({inputs:{input:e},backend:n}))),s=Os(r,t,n),o=Os(a,t,n),i=Wr({inputs:{real:s,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}let a=n.shouldExecuteOnCPU(e);if("string"===r&&(a=!0),a){const a=e.map((e=>{const r=o.util.sizeFromShape(e.shape.slice(t));return aa({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),s=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=o.backend_util.computeOutShape(a.map((e=>e.shape)),1),u=1===a[0].shape[0],l=An(s,i,r,u),c=o.backend_util.computeOutShape(e.map((e=>e.shape)),t),p=n.makeTensorInfo(c,r,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}const s=(0,o.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>s){const r=[];for(let a=0;a<e.length;a+=s){const o=e.slice(a,a+s);r.push(Os(o,t,n))}const a=Os(r,t,n);for(const e of r)n.disposeIntermediateTensorInfo(e);return a}if((0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new _s(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,r)}const{tensors2D:i,outShape:u}=function(e,t,n){const r=o.backend_util.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>aa({inputs:{x:e},attrs:{shape:[-1,o.util.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),l=new Es(i.map((e=>e.shape))),c=n.runWebGLProgram(l,i,r);i.forEach((e=>n.disposeIntermediateTensorInfo(e)));const p=aa({inputs:{x:c},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(c),p}function Fs(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=o.util.parseAxisParam(a,t[0].shape)[0],i=o.backend_util.computeOutShape(t.map((e=>e.shape)),s);if(0===o.util.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>o.util.sizeFromShape(e.shape)>0));if(1===u.length)return Vr({inputs:{x:u[0]},backend:n});const l=u.map((e=>e.shape));return o.backend_util.assertParamsConsistent(l,s),Os(u,s,n)}const Bs={kernelName:o.Concat,backendName:"webgl",kernelFunc:Fs};class Ms{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,x=m?2:3,y=m?3:1;let b="",v="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class Ps{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${s}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ls{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Be(this.outputShape.length);const s=e.padInfo.left,i=e.strideWidth,u=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,p=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)d+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;d+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<c;e++)d+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(p+1)/2;t++){const n=2*t;if(d+=`\n           xC = xCCorner + ${n*u};\n           `,1===i){if(n<c&&(s%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,d+=1===u&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<c)){const e=s%2==0?o.util.nearestLargerEven(u):u;u%2==0&&s%2==1||u%2!=0&&s%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,d+=u>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):d+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<c&&(s%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<c&&(d+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<c&&(d+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<c&&(d+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let h="",f="";n&&(h=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:a?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${h}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${m}\n         ${f}\n         setOutput(result);\n       }\n     `}}class Vs{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Be(this.outputShape.length);const{dataFormat:n}=t,r=me(),a="channelsLast"===n,s=a?1:2,o=a?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${s}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function zs(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function Ws({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:u=null}){const l=e.shape,c=r.texData.get(e.dataId),p=n.inChannels,d=l[0]*l[1]*l[2],h=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[];if(null!=s){const e=zs(s.shape,f);null!=e&&(s=aa({inputs:{x:s},backend:r,attrs:{shape:e}}),g.push(s))}if(null!=a){const e=zs(a.shape,f);null!=e&&(a=aa({inputs:{x:a},backend:r,attrs:{shape:e}}),g.push(a))}if((1!==d&&1!==h||!(p>1e3))&&c.isPacked&&f&&null!=c.texture&&l[2]%2!=0&&o.util.arraysEqual(c.shape.slice(-3),l.slice(-3))){const p=l[0]*l[1]*(l[2]+1),d={dataId:e.dataId,shape:[1,p,n.inChannels],dtype:e.dtype},h=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,o.util.assert(J(c.shape,d.shape),(()=>`packed reshape ${c.shape} to ${d.shape} isn't free`));const f=aa({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(f);const x=ga({a:d,b:f,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:s,leakyreluAlpha:i}),y=r.texData.get(x.dataId);o.util.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=h,y.shape=n.outShape,m=Vr({inputs:{x},backend:r}),m.shape=n.outShape,g.push(x)}else{const o=n.outHeight*n.outWidth,l=aa({inputs:{x:e},backend:r,attrs:{shape:f?[n.batchSize,o,n.inChannels]:[n.batchSize,n.inChannels,o]}}),c=aa({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=ga({a:f?l:c,b:f?c:l,transposeA:!f,transposeB:!1,backend:r,bias:a,activation:u,preluActivationWeights:s,leakyreluAlpha:i});m=aa({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),g.push(l),g.push(c),g.push(p)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}function Us({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:u=null}){const{filterWidth:l,filterHeight:c,inChannels:p,outWidth:d,outHeight:h,dataFormat:f}=n,m="channelsLast"===f,g=l*c*p,x=h*d,y=[n.batchSize,g,x],b=[];if(null!=s){const e=zs(s.shape,m);null!=e&&(s=aa({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}if(null!=a){const e=zs(a.shape,m);null!=e&&(a=aa({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}const v=aa({inputs:{x:t},backend:r,attrs:{shape:[1,g,o.util.sizeFromShape(t.shape)/g]}});b.push(v);const w=new Vs(y,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],S=r.runWebGLProgram(w,[e],"float32",k),I=aa({inputs:{x:S},backend:r,attrs:{shape:y}});b.push(S),b.push(I);const N=null!=a,$=null!=s,T="leakyrelu"===u,C=u?Zr(u,!0):null,E=new Jr(m?I.shape:v.shape,m?v.shape:I.shape,m?[n.batchSize,x,n.outChannels]:[n.batchSize,n.outChannels,x],!0,!1,N,C,$,T),_=m?[I,v]:[v,I];if(a&&_.push(a),$&&_.push(s),T){const e=r.makeTensorInfo([],"float32",o.util.createScalarValue(i,"float32"));_.push(e),b.push(e)}const R=r.runWebGLProgram(E,_,"float32"),A=aa({inputs:{x:R},backend:r,attrs:{shape:n.outShape}});b.push(R);for(const e of b)r.disposeIntermediateTensorInfo(e);return A}const Gs={kernelName:o.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:u,dataFormat:l,dilations:c,dimRoundingMode:p}=r,d=o.backend_util.convertConv2DDataFormat(l),h=o.backend_util.computeConv2DInfo(a.shape,s.shape,i,c,u,p,!1,d);let f;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if(h.strideWidth<=2&&"channelsLast"===d&&(0,o.env)().getBool("WEBGL_EXP_CONV")){const e=new Ls(h),t=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];f=n.runWebGLProgram(e,[a,s],"float32",t)}else if((0,o.env)().getBool("WEBGL_CONV_IM2COL"))f=Us({x:a,filter:s,convInfo:h,backend:n});else{const e=new Ms(h);f=n.runWebGLProgram(e,[a,s],"float32")}else f=Ws({x:a,filter:s,convInfo:h,backend:n});const m=aa({inputs:{x:f},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class Xs{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Hs{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=s?1:2,l=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qs{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class js{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Ks={kernelName:o.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:p}=r,d=o.backend_util.convertConv2DDataFormat(l),h=o.backend_util.computeConv2DInfo(a.shape,p,i,1,u,c,!1,d),f=new Xs(h);return n.runWebGLProgram(f,[a,s],"float32")}},Ys={kernelName:o.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:i,strides:u,pad:l,dataFormat:c,dimRoundingMode:p}=r,d=o.backend_util.convertConv2DDataFormat(c),h=o.backend_util.computeConv2DInfo(i,s.shape,u,1,l,p,!1,d),f=new Hs(h);return n.runWebGLProgram(f,[a,s],"float32")}},Qs={kernelName:o.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:u,dilations:l}=r,c=o.backend_util.computeConv3DInfo(a.shape,s.shape,i,l,u),p=new Ps(c);return n.runWebGLProgram(p,[a,s],"float32")}},Zs={kernelName:o.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:u,filterShape:l}=r,c=o.backend_util.computeConv3DInfo(a.shape,l,i,1,u),p=new qs(c);return n.runWebGLProgram(p,[a,s],"float32")}},Js={kernelName:o.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:i,strides:u,inputShape:l}=r,c=o.backend_util.computeConv3DInfo(l,s.shape,u,1,i),p=new js(c);return n.runWebGLProgram(p,[a,s],"float32")}},eo=Yr({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),to={kernelName:o.Cos,backendName:"webgl",kernelFunc:eo},no=Yr({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),ro={kernelName:o.Cosh,backendName:"webgl",kernelFunc:no};class ao{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,u]=e,[l]=t,[c,p]=n;this.outputShape=[l,c,p,u];const d="bilinear"===r?1:0,[h,f]=[o-1+".0",i-1+".0"],[m,g,x]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[y,b,v]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${y});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${b};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const so={kernelName:o.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new ao(a.shape,s.shape,i,u,l);return n.runWebGLProgram(c,[a,s,o],"float32")}};var oo;!function(e){e.Prod="*",e.Sum="+"}(oo||(oo={}));class io{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,s=this.op===oo.Prod?"1.0":"0.0",o=n?s:`getX(${uo(a,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=r?"end != "+(i-1):"end != 0",l=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${i}`:"end >= pow2",l=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${_e(a)} coords = getOutputCoords();\n        int end = ${lo(a,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${lo(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${uo(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function uo(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function lo(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function co(e,t,n,r,a,s){const i=t.shape.length,u=o.backend_util.getAxesPermutation([r],i);let l=t;null!=u&&(l=fa({inputs:{x:t},backend:n,attrs:{perm:u}}));const c=o.backend_util.getInnerMostAxes(1,i)[0];if(c!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const p=l.shape[c];let d=Vr({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(p))-1;t++){const r=new io(e,l.shape,!1,s),a=[[t]],o=d;d=n.runWebGLProgram(r,[d],d.dtype,a),n.disposeIntermediateTensorInfo(o)}if(a){const t=new io(e,l.shape,a,s),r=d;d=n.runWebGLProgram(t,[d],d.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=u){const e=fa({inputs:{x:d},backend:n,attrs:{perm:o.backend_util.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(l),e}return d}const po={kernelName:o.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;return co(oo.Prod,a,n,s,o,i)}},ho={kernelName:o.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;return co(oo.Sum,a,n,s,o,i)}},fo={kernelName:o.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(s.dataId),r=Cn(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=En(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class mo{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const go={kernelName:o.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:o}=r,i=a.shape[0],u=("NHWC"===o?a.shape[1]:a.shape[2])*s,l=("NHWC"===o?a.shape[2]:a.shape[3])*s,c=("NHWC"===o?a.shape[3]:a.shape[1])/(s*s),p=new mo("NHWC"===o?[i,u,l,c]:[i,c,u,l],s,o);return n.runWebGLProgram(p,[a],a.dtype)}};class xo{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Be(this.outputShape.length);const s=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${s}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class yo{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Be(this.outputShape.length);const s=e.outChannels/e.inChannels,i=e.padInfo.left,u=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,p=e.filterWidth,d=p;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<p;e++)h+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;h+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let e=0;e<p;e++)h+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(d+1)/2;e++){const t=2*e;if(h+=`\n          xC = xCCorner + ${t*l};\n          `,1===u){if(t<p&&(i%2==1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,h+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<p)){const e=i%2==0?o.util.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,h+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):h+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<p&&(i%2==1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<p&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<p&&(h+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<p&&(h+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<p&&(h+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let f="",m="";n&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${s};\n        int q = d2 - d1 * ${s};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const bo={kernelName:o.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:u,dilations:l,dimRoundingMode:c}=r;let p=l;null==p&&(p=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=o.backend_util.computeConv2DInfo(a.shape,s.shape,i,p,u,c,!0);let h;h=(0,o.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new yo(d):new xo(d);const f=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return n.runWebGLProgram(h,[a,s],"float32",f)}};class vo{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wo{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ko={kernelName:o.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,dilations:u,pad:l,dimRoundingMode:c,filterShape:p}=r,d=o.backend_util.computeConv2DInfo(a.shape,p,i,u,l,c,!0),h=new vo(d);return n.runWebGLProgram(h,[a,s],"float32")}},So={kernelName:o.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:i,dilations:u,pad:l,dimRoundingMode:c,inputShape:p}=r,d=o.backend_util.computeConv2DInfo(p,s.shape,i,u,l,c,!0),h=new wo(d);return n.runWebGLProgram(h,[a,s],"float32")}};class Io{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const No={kernelName:o.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],s=o.util.sizeFromShape(r.shape),i=aa({inputs:{x:r},backend:n,attrs:{shape:[s]}}),u=new Io(s),l=n.runWebGLProgram(u,[i],i.dtype),c=aa({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),c}};class $o{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${s});\n      const ivec2 pads = ivec2(${c}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const To={kernelName:o.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:u,dilations:l}=r,c=o.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",l);let p;const d=new $o(c);p=n.runWebGLProgram(d,[a,s],"float32");const h=aa({inputs:{x:p},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(p),h}},Co={kernelName:o.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,s=t,{allDims:i,summedDims:u,idDims:l}=o.backend_util.decodeEinsumEquation(a,s.length);o.backend_util.checkEinsumDimSizes(i.length,l,s);const{path:c,steps:p}=o.backend_util.getEinsumComputePath(u,l),d=p.length;let h=null,f=i.length;const m=[];for(let e=0;e<d;++e){for(const t of p[e]){const{permutationIndices:e,expandDims:r}=o.backend_util.getEinsumPermutation(f,l[t]);let a;o.backend_util.isIdentityPermutation(e)?a=s[t]:(a=fa({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),m.push(a));const i=a.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);o.util.arraysEqual(a.shape,i)||(a=aa({inputs:{x:a},backend:n,attrs:{shape:i}}),m.push(a)),null===h?h=a:(h=na({inputs:{a,b:h},backend:n}),m.push(h))}e<d-1&&(c[e]>=0&&(h=da({inputs:{x:h},backend:n,attrs:{axis:c[e]-(i.length-f),keepDims:!1}}),m.push(h)),f--)}for(const e of m)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},Eo=Yr({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),_o={kernelName:o.Elu,backendName:"webgl",kernelFunc:Eo},Ro={kernelName:o.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:a}=t,s=(0,o.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Lr("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,a.shape):new Pr("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(s,[r,a],r.dtype)}},Ao=Qr({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Dn}),Do={kernelName:o.Equal,backendName:"webgl",kernelFunc:Ao},Oo=Yr({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${o.backend_util.ERF_P};\n  float a1 = ${o.backend_util.ERF_A1};\n  float a2 = ${o.backend_util.ERF_A2};\n  float a3 = ${o.backend_util.ERF_A3};\n  float a4 = ${o.backend_util.ERF_A4};\n  float a5 = ${o.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Fo={kernelName:o.Erf,backendName:"webgl",kernelFunc:Oo},Bo=Yr({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:On,dtype:"float32"}),Mo={kernelName:o.Exp,backendName:"webgl",kernelFunc:Bo};function Po(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:s}=t,i=s.shape.length,u=s.shape.slice();let l=a;return a<0&&(o.util.assert(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),u.splice(l,0,1),aa({inputs:{x:s},backend:r,attrs:{shape:u}})}const Lo={kernelName:o.ExpandDims,backendName:"webgl",kernelFunc:Po},Vo="return exp(x) - 1.0;",zo=Yr({opSnippet:Vo,packedOpSnippet:Vo,cpuKernelImpl:Fn}),Wo={kernelName:o.Expm1,backendName:"webgl",kernelFunc:zo};class Uo{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Go(e,t,n){const r=n.texData.get(e.dataId),a=o.util.sizeFromShape(e.shape),s=e.shape[e.shape.length-1],i=aa({inputs:{x:e},backend:n,attrs:{shape:[a/s,s]}}),u=i.shape,l=new Uo("real",u,t),c=new Uo("imag",u,t),p=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],d=n.runWebGLProgram(l,p,"float32"),h=n.runWebGLProgram(c,p,"float32"),f=Wr({inputs:{real:d,imag:h},backend:n});n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(h);const m=aa({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const Xo={kernelName:o.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Go(r,!1,n)}};class Ho{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function qo(e){const{backend:t,attrs:n}=e,{shape:r,value:a}=n;let{dtype:s}=n;if(s=s||o.util.inferDtype(a),"string"===s){const e=o.util.getArrayFromDType(s,o.util.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,s,e)}{const e=new Ho(r,a),n=[[a]];return t.runWebGLProgram(e,[],s,n)}}const jo={kernelName:o.Fill,backendName:"webgl",kernelFunc:qo};class Ko{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Yo={kernelName:o.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,a=new Ko(n.shape);return r.runWebGLProgram(a,[n],n.dtype)}},Qo="return floor(x);",Zo=Yr({opSnippet:Qo,packedOpSnippet:Qo,cpuKernelImpl:Bn}),Jo={kernelName:o.Floor,backendName:"webgl",kernelFunc:Zo},ei=Qr({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),ti={kernelName:o.FloorDiv,backendName:"webgl",kernelFunc:ei};class ni{constructor(e){this.variableNames=["A"];const t=me(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ri{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=me(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const ai={kernelName:o.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:s}=r,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,c]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],p=[c,l],h=[c,l,s];if(u||i){const e=(0,o.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=si&&e===oi||(oi=e,si=document.createElement("canvas").getContext("2d",{willReadFrequently:oi})),si.canvas.width=l,si.canvas.height=c,si.drawImage(a,0,0,l,c),a=si.canvas}const f=n.makeTensorInfo(p,"int32");n.texData.get(f.dataId).usage=d.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(f.dataId),a);const m=(0,o.env)().getBool("WEBGL_PACK")?new ri(h):new ni(h),g=n.runWebGLProgram(m,[f],"int32");return n.disposeData(f.dataId),g}};let si,oi=(0,o.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const ii={kernelName:o.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:i,preluActivationWeights:u}=t,{strides:l,pad:c,dataFormat:p,dilations:d,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r,g=o.backend_util.convertConv2DDataFormat(p),x=o.backend_util.computeConv2DInfo(a.shape,s.shape,l,d,c,h,!1,g);let y;const b=[],v=null!=i,w=null!=u,k="leakyrelu"===f,S=()=>{const e=[a,s],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=aa({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(v&&e.push(t(i,p)),w&&e.push(t(u,p)),k){const t=n.makeTensorInfo([],"float32",o.util.createScalarValue(m,"float32"));e.push(t),b.push(t)}return e};if(1!==x.filterHeight||1!==x.filterWidth||1!==x.dilationHeight||1!==x.dilationWidth||1!==x.strideHeight||1!==x.strideWidth||"SAME"!==x.padInfo.type&&"VALID"!==x.padInfo.type)if(x.strideWidth<=2&&"channelsLast"===g&&(0,o.env)().getBool("WEBGL_EXP_CONV")){const e=f?Zr(f,!0):null,t=new Ls(x,v,e,w,k),r=[[x.padInfo.top,x.padInfo.left],[x.strideHeight,x.strideWidth],[x.dilationHeight,x.dilationWidth],[x.inHeight,x.inWidth]],a=S();y=n.runWebGLProgram(t,a,"float32",r)}else if((0,o.env)().getBool("WEBGL_CONV_IM2COL"))y=Us({x:a,filter:s,convInfo:x,backend:n,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:m});else{const e=f?Zr(f,!1):null,t=new Ms(x,v,e,w,k),r=S();y=n.runWebGLProgram(t,r,"float32")}else y=Ws({x:a,filter:s,convInfo:x,backend:n,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:m});const I=aa({inputs:{x:y},backend:n,attrs:{shape:x.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}},ui={kernelName:o.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:i,preluActivationWeights:u}=t,{strides:l,pad:c,dilations:p,dimRoundingMode:d,activation:h,leakyreluAlpha:f}=r,m=[];let g=p;null==g&&(g=[1,1]),o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const x=o.backend_util.computeConv2DInfo(a.shape,s.shape,l,g,c,d,!0),y=(0,o.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&x.strideWidth<=2&&x.outChannels/x.inChannels==1,b=h?Zr(h,y):null,v=[a,s],w=null!=i,k=null!=u,S="leakyrelu"===h;if(w&&v.push(i),k&&v.push(u),S){const e=n.makeTensorInfo([],"float32",o.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let I;I=y?new yo(x,w,b,k,S):new xo(x,w,b,k,S);const N=[[x.padInfo.top,x.padInfo.left],[x.strideHeight,x.strideWidth],[x.dilationHeight,x.dilationWidth],[x.inHeight,x.inWidth]],$=n.runWebGLProgram(I,v,"float32",N);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),$}};class li{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const a=_e(t.length),s=_e(n.length),o=this.sliceDim>1?"strides[j]":"strides",i=_e(r.length),u=r.length>1?"paramsShape[j]":"paramsShape";this.userCode=`\n        ${a} strides = ${a}(${this.strides});\n        ${i} paramsShape = ${i}(${this.paramsShape});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            out_of_bounds = out_of_bounds || index < 0;\n            out_of_bounds = out_of_bounds || index >= ${u};\n            flattenIndex += index * ${o};\n          }\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const ci={kernelName:o.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=a.shape,i=s[s.length-1],u=o.util.sizeFromShape(r.shape),[l,c,p,d]=o.backend_util.prepareAndValidate(r,a),h=aa({inputs:{x:a},backend:n,attrs:{shape:[c,i]}}),f=aa({inputs:{x:r},backend:n,attrs:{shape:[o.util.sizeFromShape(r.shape)/p,p]}});if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(r),s=Mn(e,t,r.dtype,c,i,p,d,r.shape,u);return n.makeTensorInfo(l,r.dtype,s.values)}const m=new li(i,d,[c,p],r.shape),g=n.runWebGLProgram(m,[f,h],f.dtype),x=aa({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),x}};class pi{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=_e(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function di(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:i,batchDims:u}=r,l=o.util.parseAxisParam(i,a.shape)[0];if((0,o.env)().get("DEBUG")){const e=n.readSync(s.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){const r=e[n];o.util.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const c=o.backend_util.segment_util.collectGatherOpShapeInfo(a,s,l,u),p=o.util.sizeFromShape(s.shape),d=[],h=aa({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=aa({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,p/c.batchSize]}});d.push(h),d.push(f);const m=[c.batchSize,c.outerSize,p/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,s])||"string"===a.dtype){const e=n.bufferSync(f),t=n.bufferSync(h),r=Pn(t,e,m);return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c.outputShape,r.dtype,r.values)}const g=new pi(h.shape,m),x=n.runWebGLProgram(g,[h,f],h.dtype);d.push(x);const y=aa({inputs:{x},backend:n,attrs:{shape:c.outputShape}});return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const hi={kernelName:o.GatherV2,backendName:"webgl",kernelFunc:di},fi=Qr({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Ln,dtype:"bool"}),mi={kernelName:o.Greater,backendName:"webgl",kernelFunc:fi},gi=Qr({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Vn}),xi={kernelName:o.GreaterEqual,backendName:"webgl",kernelFunc:gi},yi={kernelName:o.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Go(r,!0,n)}},bi=Yr({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),vi={kernelName:o.IsFinite,backendName:"webgl",kernelFunc:bi},wi=Yr({opSnippet:"return float(isinf(x));",dtype:"bool"}),ki={kernelName:o.IsInf,backendName:"webgl",kernelFunc:wi},Si=Yr({opSnippet:"return float(isnan(x));",dtype:"bool"}),Ii={kernelName:o.IsNan,backendName:"webgl",kernelFunc:Si},Ni=Qr({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:zn,dtype:"bool"}),$i={kernelName:o.Less,backendName:"webgl",kernelFunc:Ni},Ti=Qr({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:Wn,dtype:"bool"}),Ci={kernelName:o.LessEqual,backendName:"webgl",kernelFunc:Ti},Ei={kernelName:o.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=Un(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},_i=Yr({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:Gn}),Ri={kernelName:o.Log,backendName:"webgl",kernelFunc:_i},Ai=Yr({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),Di={kernelName:o.Log1p,backendName:"webgl",kernelFunc:Ai},Oi=Qr({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Fi={kernelName:o.LogicalAnd,backendName:"webgl",kernelFunc:Oi},Bi=Yr({opSnippet:"return float(!(x >= 1.0));"}),Mi={kernelName:o.LogicalNot,backendName:"webgl",kernelFunc:Bi},Pi=Qr({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Li={kernelName:o.LogicalOr,backendName:"webgl",kernelFunc:Pi};class Vi{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[];const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class zi{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Wi={kernelName:o.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:i,alpha:u,beta:l}=r,c=(0,o.env)().getBool("WEBGL_PACK_NORMALIZATION")?new zi(a.shape,s,i,u,l):new Vi(a.shape,s,i,u,l);return n.runWebGLProgram(c,[a],a.dtype)}};class Ui{constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Gi={kernelName:o.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r,p=new Ui(a.shape,i,u,l,c);return n.runWebGLProgram(p,[a,s,o],a.dtype)}};function Xi(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:s,keepDims:i}=r,u=a.shape.length,l=o.util.parseAxisParam(s,a.shape);let c=l;const p=o.backend_util.getAxesPermutation(c,u),d=null!=p,h=n.shouldExecuteOnCPU([a]);let f=a;if(d){if(h){const e=n.texData.get(f.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=a.shape[p[e]];const r=gr(e,a.shape,a.dtype,p,t);f=n.makeTensorInfo(t,a.dtype),n.texData.get(f.dataId).values=r}else f=pa(a,p,n);c=o.backend_util.getInnerMostAxes(c.length,u)}o.backend_util.assertAxesAreInnerMostDims("max",c,u);const[m,g]=o.backend_util.computeOutAndReduceShapes(f.shape,c);let x,y=m;if(i&&(y=o.backend_util.expandShapeToKeepDim(m,l)),h){const e=n.texData.get(f.dataId).values,t=Xn(e,o.util.sizeFromShape(g),y,a.dtype);x=n.makeTensorInfo(y,a.dtype),n.texData.get(x.dataId).values=t}else x=function(e,t,n,r){const a=o.util.sizeFromShape(t),s=aa({inputs:{x:e},attrs:{shape:[o.util.sizeFromShape(e.shape)/a,a]},backend:r}),i=ua(s,e.dtype,"max",r),u=aa({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),u}(f,g,y,n);return d&&n.disposeIntermediateTensorInfo(f),x}const Hi={kernelName:o.Max,backendName:"webgl",kernelFunc:Xi},qi=Qr({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Hn}),ji={kernelName:o.Maximum,backendName:"webgl",kernelFunc:qi},Ki={kernelName:o.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;he(a,"maxPool");const{filterSize:s,strides:i,pad:u,dimRoundingMode:l}=r;o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=o.backend_util.computePool2DInfo(a.shape,s,i,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&o.util.arraysEqual(c.inShape,c.outShape))return Vr({inputs:{x:a},backend:n});const p=new Ka(c,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}},Yi={kernelName:o.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,p=o.backend_util.computePool3DInfo(a.shape,s,i,[1,1,1],u,c,l),d=new Ya(p,"max",!1);return n.runWebGLProgram(d,[a],a.dtype)}};class Qi{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=s-1-e.padInfo.left,u=a*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Zi{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=u-1-e.padInfo.top,d=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Ji={kernelName:o.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,i=s,{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=r,d=o.backend_util.computePool3DInfo(i.shape,u,l,[1,1,1],c,p),h=new Ya(d,"max",!0),f=n.runWebGLProgram(h,[i],i.dtype),m=new Zi(d),g=n.runWebGLProgram(m,[a,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},eu={kernelName:o.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:i}=t,u=s;he([s,i],"maxPoolGrad");const{filterSize:l,strides:c,pad:p,dimRoundingMode:d}=r,h=o.backend_util.computePool2DInfo(u.shape,l,c,1,p,d),f=new Ka(h,"max",!0),m=n.runWebGLProgram(f,[u],u.dtype),g=new Qi(h),x=n.runWebGLProgram(g,[a,m],u.dtype);return n.disposeIntermediateTensorInfo(m),x}},tu={kernelName:o.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:s,pad:i,includeBatchInIndex:u}=t,l=n;o.util.assert(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];o.util.assert(o.backend_util.eitherStridesOrDilationsAreOne(s,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${c}'`));const p=o.backend_util.computePool2DInfo(r.shape,a,s,c,i),[d,h]=function(e,t,n,r){let a=new Ka(n,"max",!1);const s=r.runWebGLProgram(a,[e],"float32");return a=new Ka(n,"max",!0,!0,t),[s,r.runWebGLProgram(a,[e],"float32")]}(r,u,p,l);return[d,h]}},nu={kernelName:o.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:a,axis:s}=t,i=n,u=r.shape.length,l=o.util.parseAxisParam(s,r.shape);let c=l;const p=o.backend_util.getAxesPermutation(c,u),d=null!=p,h=i.shouldExecuteOnCPU([r]),f=[];let m=r;if(d){if(h){const e=i.texData.get(m.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=r.shape[p[e]];const n=gr(e,r.shape,r.dtype,p,t);m=i.makeTensorInfo(t,r.dtype),i.texData.get(m.dataId).values=n}else m=pa(r,p,i);f.push(m),c=o.backend_util.getInnerMostAxes(c.length,u)}o.backend_util.assertAxesAreInnerMostDims("sum",c,u);const[g,x]=o.backend_util.computeOutAndReduceShapes(m.shape,c);let y=g;a&&(y=o.backend_util.expandShapeToKeepDim(g,l));const b=function(e,t,n,r){const a=o.util.sizeFromShape(t),s=aa({inputs:{x:e},attrs:{shape:[o.util.sizeFromShape(e.shape)/a,a]},backend:r}),i=ua(s,"float32","mean",r),u=aa({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),u}(m,x,y,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return b}},ru={kernelName:o.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r,u=a.shape.length,l=o.util.parseAxisParam(s,a.shape);let c=l;const p=o.backend_util.getAxesPermutation(c,u);let d=a;null!=p&&(d=fa({inputs:{x:a},backend:n,attrs:{perm:p}}),c=o.backend_util.getInnerMostAxes(c.length,a.shape.length)),o.backend_util.assertAxesAreInnerMostDims("min",c,u);const[h,f]=o.backend_util.computeOutAndReduceShapes(d.shape,c),m=aa({inputs:{x:d},backend:n,attrs:{shape:[-1,o.util.sizeFromShape(f)]}}),g=ua(m,m.dtype,"min",n);let x;return x=aa(i?{inputs:{x:g},backend:n,attrs:{shape:o.backend_util.expandShapeToKeepDim(h,l)}}:{inputs:{x:g},backend:n,attrs:{shape:h}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(d),x}},au=Qr({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:qn}),su={kernelName:o.Minimum,backendName:"webgl",kernelFunc:au};class ou{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=_e(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class iu{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=_e(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=br("rc",r),u=br("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p="reflect"===n?0:1;let d="";if(1===r){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;d=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const uu={kernelName:o.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:a,mode:s}=n,i=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iu(r.shape,a,s):new ou(r.shape,a,s);return t.runWebGLProgram(i,[r],r.dtype)}},lu=Qr({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),cu={kernelName:o.Mod,backendName:"webgl",kernelFunc:lu};class pu{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const du=Qr({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),hu={kernelName:o.RealDiv,backendName:"webgl",kernelFunc:du},fu="return a - b;",mu=Qr({opSnippet:fu,packedOpSnippet:fu,supportsComplex:!0,cpuKernelImpl:hr}),gu={kernelName:o.Sub,backendName:"webgl",kernelFunc:mu};function xu(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,i=o.util.parseAxisParam([s],a.shape),u=Xi({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=o.backend_util.expandShapeToKeepDim(u.shape,i),c=aa({inputs:{x:u},backend:n,attrs:{shape:l}}),p=mu({inputs:{a,b:c},backend:n}),d=Bo({inputs:{x:p},backend:n}),h=da({inputs:{x:d},backend:n,attrs:{axis:i,keepDims:!1}}),f=aa({inputs:{x:h},backend:n,attrs:{shape:l}}),m=du({inputs:{a:d,b:f},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}const yu={kernelName:o.Softmax,backendName:"webgl",kernelFunc:xu},bu={kernelName:o.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r,u=i?a:xu({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),l=u.shape[0],c=u.shape[1],p=new pu(l,c,s),d=[[o]],h=n.runWebGLProgram(p,[u],"int32",d);return i||n.disposeIntermediateTensorInfo(u),h}},vu={kernelName:o.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,a]=Kn(e.values,r.shape,r.dtype);return n.makeTensorInfo(a,r.dtype,t)}let a;return a=(0,o.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Er(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new $r(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(a,[r],r.dtype)}},wu=o.kernel_impls.nonMaxSuppressionV3Impl,ku={kernelName:o.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r,c=n.readSync(a.dataId),p=n.readSync(s.dataId),{selectedIndices:d}=wu(c,p,i,u,l);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},Su=o.kernel_impls.nonMaxSuppressionV4Impl,Iu={kernelName:o.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r,p=n.readSync(a.dataId),d=n.readSync(s.dataId),{selectedIndices:h,validOutputs:f}=Su(p,d,i,u,l,c);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},Nu=o.kernel_impls.nonMaxSuppressionV5Impl,$u={kernelName:o.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){o.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r,p=n.readSync(a.dataId),d=n.readSync(s.dataId),h=i,f=u,m=l,g=c,{selectedIndices:x,selectedScores:y}=Nu(p,d,h,f,m,g);return[n.makeTensorInfo([x.length],"int32",new Int32Array(x)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class Tu{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const Cu={kernelName:o.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:s,depth:i,onValue:u,offValue:l}=r,c=o.util.sizeFromShape(a.shape),p=new Tu(c,i,u,l),d=aa({inputs:{x:a},backend:n,attrs:{shape:[c]}}),h=n.runWebGLProgram(p,[d],s);n.disposeIntermediateTensorInfo(d);const f=aa({inputs:{x:h},backend:n,attrs:{shape:[...a.shape,i]}});return n.disposeIntermediateTensorInfo(h),f}};function Eu(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=xs({inputs:{input:r},backend:n}),t=Eu({inputs:{x:e},backend:n}),a=As({inputs:{input:r},backend:n}),s=Eu({inputs:{x:a},backend:n}),o=Wr({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return qo({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const _u={kernelName:o.ZerosLike,backendName:"webgl",kernelFunc:Eu},Ru={kernelName:o.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=xs({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=As({inputs:{input:a},backend:r}),o=Eu({inputs:{x:s},backend:r}),i=Wr({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return qo({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:r})}},Au={kernelName:o.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Po({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const s=t[0].shape,i=t[0].dtype;t.forEach((e=>{o.util.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),o.util.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Fs({inputs:t.map((e=>{const t=Po({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t})),backend:n,attrs:{axis:a}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class Du{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=_e(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Ou{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=_e(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=br("rc",r),u=br("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[`${a} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,t=1===r?2:4;e<t;e++)h+=`\n        ${p[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const Fu=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:i}=r;if(0===o.util.sizeFromShape(a.shape))return qo({backend:n,attrs:{shape:s.map(((e,t)=>e[0]+a.shape[t]+e[1])),value:i,dtype:a.dtype}});const u=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ou(a.shape,s,i):new Du(a.shape,s,i),l=[[i]];return n.runWebGLProgram(u,[a],a.dtype,l)},Bu={kernelName:o.PadV2,backendName:"webgl",kernelFunc:Fu},Mu=Qr({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Pu={kernelName:o.Pow,backendName:"webgl",kernelFunc:Mu},Lu={kernelName:o.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r,u=a.shape.length,l=[],c=o.util.parseAxisParam(s,a.shape);let p=c;const d=o.backend_util.getAxesPermutation(p,u);let h,f=a;if(null!=d&&(f=fa({inputs:{x:a},backend:n,attrs:{perm:d}}),p=o.backend_util.getInnerMostAxes(p.length,u),l.push(f)),o.backend_util.assertAxesAreInnerMostDims("prod",p,u),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:r,outDtype:a}=Qn(f.shape,f.dtype,e,p);h=n.makeTensorInfo(r,a,t)}else{const[e,t]=o.backend_util.computeOutAndReduceShapes(f.shape,p),r=o.util.sizeFromShape(t),s=aa({inputs:{x:f},backend:n,attrs:{shape:[-1,r]}}),i=ua(s,(0,o.sumOutType)(a.dtype),"prod",n);h=aa({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(s),l.push(i)}if(i){l.push(h);const e=o.backend_util.expandShapeToKeepDim(h.shape,c);h=aa({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Vu={kernelName:o.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.readSync(a.dataId),c=n.readSync(s.dataId),p=n.readSync(o.dataId),d=i.map((e=>n.readSync(e.dataId))),h=i.map((e=>e.shape)),[f,m]=Zn(l,a.shape,c,s.shape,s.dtype,p,o.shape,d,h,u);return n.makeTensorInfo(f,s.dtype,m)}},zu=e=>{const{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:o}=n,i=Jn(r,a,s,o);return t.makeTensorInfo([i.length],o,i)},Wu={kernelName:o.Range,backendName:"webgl",kernelFunc:zu},Uu=Yr({opSnippet:"return 1.0 / x;"}),Gu={kernelName:o.Reciprocal,backendName:"webgl",kernelFunc:Uu},Xu=Yr({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Hu={kernelName:o.Relu,backendName:"webgl",kernelFunc:Xu},qu=Yr({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ju={kernelName:o.Relu6,backendName:"webgl",kernelFunc:qu};class Ku{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Yu{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Qu={kernelName:o.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:u}=r,[l,c]=u,p=(0,o.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Yu(a.shape,l,c,s,i):new Ku(a.shape,l,c,s,i);return n.runWebGLProgram(p,[a],"float32")}};class Zu{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,d=1/c,h=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Ju={kernelName:o.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new Zu(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class el{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let d;d=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class tl{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let d;d=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const nl={kernelName:o.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:u}=r,[l,c]=u,p=(0,o.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new tl(a.shape,l,c,s,i):new el(a.shape,l,c,s,i);return n.runWebGLProgram(p,[a],a.dtype)}};class rl{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,d=1/c,h=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const al={kernelName:o.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new rl(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class sl{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),a=_e(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class ol{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=br("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=_e(n);function i(n){const r=e.map(((r,a)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(a,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const il={kernelName:o.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r,i=a.shape.length,u=o.util.parseAxisParam(s,a.shape);if(0===i)return Vr({inputs:{x:a},backend:n});const l=(0,o.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ol(a.shape,u):new sl(a.shape,u);return n.runWebGLProgram(l,[a],a.dtype)}};class ul{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const ll={kernelName:o.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:i}=t,u=n,l=new ul(r.shape,s),[c,p]=o.backend_util.getImageCenter(i,r.shape[1],r.shape[2]),d=[[c,p,Math.sin(a),Math.cos(a)]];return u.runWebGLProgram(l,[r],r.dtype,d)}},cl=Yr({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),pl={kernelName:o.Round,backendName:"webgl",kernelFunc:cl},dl=Yr({opSnippet:"return inversesqrt(x);",cpuKernelImpl:er}),hl={kernelName:o.Rsqrt,backendName:"webgl",kernelFunc:dl};class fl{constructor(e,t,n,r,a,s,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const i=_e(a.length),u=_e(s.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const d=`getUpdates(${p})`,h=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${h};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const ml={kernelName:o.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:d}=o.backend_util.calculateShapes(s,a,i),h=[d/c,c];if(0===d)return n.makeTensorInfo(i,a.dtype);const f=aa({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=aa({inputs:{x:s},backend:n,attrs:{shape:[l,c]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),x=new fl(l,u,f.shape.length,m.shape.length,p,h),y=n.runWebGLProgram(x,[m,f,g],m.dtype),b=aa({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(g),b}};class gl{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,s=2===(0,o.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":a,i="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${s}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const xl={kernelName:o.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:o}=r,i=new gl(a.shape[0],a.shape[1],s.shape[1],o),u=[[a.shape[1]]];return n.runWebGLProgram(i,[a,s],"int32",u)}};class yl{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&s.push(`${n[r]}`);r=s.join(),a=o.join()}const s=_e(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const bl={kernelName:o.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t,i=new yl(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[r,a,s],(0,o.upcastType)(a.dtype,s.dtype))}},vl=Yr({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${o.backend_util.SELU_SCALEALPHA};\n  float scale = ${o.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),wl={kernelName:o.Selu,backendName:"webgl",kernelFunc:vl},kl=Yr({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:nr}),Sl={kernelName:o.Sigmoid,backendName:"webgl",kernelFunc:kl},Il=Yr({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Nl={kernelName:o.Sign,backendName:"webgl",kernelFunc:Il},$l=Yr({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),Tl={kernelName:o.Sin,backendName:"webgl",kernelFunc:$l},Cl=Yr({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),El={kernelName:o.Sinh,backendName:"webgl",kernelFunc:Cl},_l=Yr({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Rl={kernelName:o.Softplus,backendName:"webgl",kernelFunc:_l},Al={kernelName:o.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:i}=r;o.util.assert(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const u=s.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);const c=[],p=Fu({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),d=o.backend_util.getReshaped(p.shape,s,u,!1),h=o.backend_util.getPermuted(d.length,s.length,!1),f=o.backend_util.getReshapedPermuted(p.shape,s,u,!1),m=aa({inputs:{x:p},backend:n,attrs:{shape:d}}),g=fa({inputs:{x:m},backend:n,attrs:{perm:h}}),x=aa({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(p),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},Dl={kernelName:o.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${s.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),u=n.readSync(a.dataId),l=n.readSync(s.dataId),c=n.readSync(o.dataId)[0],[p,d,h,f,m]=sr(i,r.shape,r.dtype,u,a.dtype,l,c);return[n.makeTensorInfo(d,r.dtype,p),n.makeTensorInfo([d[0]],a.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},Ol={kernelName:o.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.readSync(a.dataId)),i=n.readSync(r.dataId),u=Array.from(n.readSync(s.dataId)),[l,c,p]=or(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}},Fl={kernelName:o.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${s.shape}`);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=n.readSync(s.dataId),[l,c]=ir(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}},Bl={kernelName:o.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${s.shape}`);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=n.readSync(s.dataId),[l,c]=ir(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}},Ml={kernelName:o.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:s,defaultValue:i}=t,{outputShape:u}=r,{sliceRank:l,numUpdates:c,sliceSize:p,strides:d,outputSize:h}=o.backend_util.calculateShapes(s,a,u);if("string"===s.dtype){const e=n.bufferSync(a),t=n.bufferSync(s),r=o.util.decodeString(n.readSync(i.dataId)[0]),f=tr(e,t,u,h,p,c,l,d,r,!1);return n.makeTensorInfo(u,f.dtype,f.values)}const f=new fl(c,l,a.shape.length,s.shape.length,d,[h,1],!1),m=n.runWebGLProgram(f,[s,a,i],s.dtype),g=aa({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(m),g}},Pl={kernelName:o.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:i}=r,u=o.util.parseAxisParam(i,a.shape)[0],l=o.backend_util.prepareSplitSize(a,s,u),c=a.shape.length,p=new Array(c).fill(0),d=a.shape.slice();return l.map((e=>{const t=[...d];t[u]=e;const r=cs({inputs:{x:a},backend:n,attrs:{begin:p,size:t}});return p[u]+=e,r}))}},Ll="return sqrt(x);",Vl=Yr({opSnippet:Ll,packedOpSnippet:Ll,cpuKernelImpl:ur}),zl={kernelName:o.Sqrt,backendName:"webgl",kernelFunc:Vl},Wl=Yr({opSnippet:"return x * x;"}),Ul={kernelName:o.Square,backendName:"webgl",kernelFunc:Wl},Gl="return (a - b) * (a - b);",Xl=Qr({opSnippet:Gl,packedOpSnippet:Gl}),Hl={kernelName:o.SquaredDifference,backendName:"webgl",kernelFunc:Xl},ql={kernelName:o.Step,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,s=new $r(r.shape,a);return n.runWebGLProgram(s,[r],r.dtype)}};class jl{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,a=_e(n.length),s=_e(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const Kl={kernelName:o.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,end:i,strides:u,beginMask:l,endMask:c,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:h}=r,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:x,isSimpleSlice:y,begin:b,end:v,strides:w}=o.slice_util.sliceInfo(a.shape,s,i,u,l,c,p,d,h);let k;if(g)k=aa({inputs:{x:a},backend:n,attrs:{shape:m}});else if(x||y){o.util.assert(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=o.slice_util.computeOutShape(b,v,w),t=cs({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=aa({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=(0,o.buffer)(a.shape,a.dtype,e),r=lr(f,t,w,b);k=n.makeTensorInfo(m,a.dtype,r.values)}else{const e=new jl(b,w,f);k=n.runWebGLProgram(e,[a],a.dtype)}const S=aa({inputs:{x:k},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(k),S}},Yl={kernelName:o.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,d=n.readSync(c.dataId),h=n.readSync(p.dataId),[f,m]=cr(d,h,a,s,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},Ql={kernelName:o.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(s.dataId),u=n.readSync(o.dataId)[0],[l,c,p]=pr(i,u,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},Zl={kernelName:o.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(s.dataId),i=dr(o,a);return n.makeTensorInfo(s.shape,"int32",i)}},Jl=Yr({opSnippet:"return tan(x);"}),ec={kernelName:o.Tan,backendName:"webgl",kernelFunc:Jl},tc=Yr({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),nc={kernelName:o.Tanh,backendName:"webgl",kernelFunc:tc};class rc{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=_e(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function ac(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>o.util.decodeString(e))):e,r=(0,o.buffer)(a.shape,a.dtype,t),i=fr(r,s);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new rc(a.shape,s);return n.runWebGLProgram(i,[a],a.dtype)}const sc={kernelName:o.Tile,backendName:"webgl",kernelFunc:ac};class oc{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class ic{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function uc(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function lc(e){let t=1;for(;t<e;)t*=2;return t}const cc={kernelName:o.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:i}=r,u=(0,o.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=(0,o.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=a.shape,p=c[c.length-1];if(n.shouldExecuteOnCPU([a])||p<u||s>l){const e=n.readSync(a.dataId),[t,r]=mr(e,c,a.dtype,s,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===s)return c[c.length-1]=0,[n.makeTensorInfo(c,a.dtype,[]),n.makeTensorInfo(c,"int32",[])];if(1===p)return[a,qo({attrs:{shape:c,dtype:"int32",value:0},backend:n})];const d=n.texData.get(a.dataId),h=null!==d&&d.isPacked,f=h?n.unpackTensor(a):a,m=o.util.sizeFromShape(c)/p,g=aa({inputs:{x:f},attrs:{shape:[m,p]},backend:n});h&&uc(n,f);const x=lc(s),y=lc(p);let b=null;const v=()=>null===b?[g,g]:[g,b],w=(e,t,r)=>{const a=v(),s=new oc(r),o=[[p],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(s,a,"int32",o),uc(n,i)};for(let e=1;e<x;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[m,y])}for(let e=y;e>x;e/=2){const t=v(),r=new ic([m,e/2]),a=[[p],[null===b?1:0],[x]],s=b;b=n.runWebGLProgram(r,t,"int32",a),uc(n,s);const o=x/2,i=2*o;for(let e=o;e>=1;e/=2)w(i,e,b.shape)}let k=b;b=cs({inputs:{x:b},backend:n,attrs:{begin:0,size:[m,s]}}),uc(n,k);let S=di({inputs:{x:g,indices:b},backend:n,attrs:{axis:1,batchDims:1}});uc(n,g);const I=c.slice(0,-1);I.push(s),k=b,b=aa({inputs:{x:b},attrs:{shape:I},backend:n}),uc(n,k);const N=S;return S=aa({inputs:{x:S},attrs:{shape:I},backend:n}),uc(n,N),[S,b]}};class pc{constructor(e,t,n,r,a,s){this.variableNames=["Image","Transforms"],this.outputShape=s;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const dc={kernelName:o.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=r,[c,p,d,h]=a.shape,[f,m]=null!=l?l:[p,d],g=new pc(p,d,o,i,u,[c,f,m,h]);return n.runWebGLProgram(g,[a,s],"float32")}},hc={kernelName:o.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;he(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(s.dataId),{outputValues:i,outputShape:u,indices:l}=xr(o,a,s.shape,s.dtype);return[r.makeTensorInfo(u,s.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},fc={kernelName:o.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a,i=o.shape.length,u=a.shape[s],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==s&&(l[c++]=o.shape[e]);const p=[],d=new Array(i).fill(0),h=o.shape.slice();h[s]=1;const f=new Array(u);for(let e=0;e<f.length;e++){d[s]=e;const t=cs({inputs:{x:o},backend:n,attrs:{begin:d,size:h}}),r=aa({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,p.push(t)}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class mc{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,o=s*Math.ceil(a/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let p="";a%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const gc=[xa,ba,wa,Sa,$a,Ea,_a,Ra,Ma,Pa,Va,Wa,Ga,Ha,ja,Qa,Za,ts,ns,rs,os,ds,hs,fs,bs,ks,Ns,Ur,Cs,Bs,Gs,Ks,Ys,Qs,Zs,Js,to,ro,so,po,ho,fo,go,bo,ko,So,No,To,Co,_o,Ro,Do,Fo,Mo,Lo,Wo,Xo,jo,Yo,Jo,ti,ai,ii,ui,ci,hi,mi,xi,zr,yi,Ds,vi,ki,Ii,Hr,$i,Ci,Ei,Ri,Di,Fi,Mi,Li,Wi,Gi,Hi,ji,Ki,Yi,Ji,eu,tu,nu,ru,su,uu,cu,bu,ra,vu,ku,Iu,$u,gs,Cu,Ru,Au,Bu,Pu,Kr,Lu,Vu,Wu,ys,hu,Gu,Hu,ju,sa,Qu,Ju,nl,al,il,ll,pl,hl,ml,xl,bl,wl,Sl,Nl,Tl,El,ps,yu,Rl,Al,Dl,Ol,Fl,Bl,Ml,Pl,zl,Ul,Hl,ql,Kl,Yl,Ql,Zl,gu,ha,ec,nc,sc,cc,dc,ma,hc,fc,{kernelName:o.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:i}=r,u=a.shape.length,l=[];let c=0;const p=o.backend_util.getAxesPermutation([c],u);let d=a;null!=p&&(d=fa({inputs:{x:a},backend:n,attrs:{perm:p}}),l.push(d),c=o.backend_util.getInnerMostAxes(1,u)[0]);const h=o.backend_util.segment_util.computeOutShape(d.shape,c,i),f=o.util.sizeFromShape([d.shape[c]]),m=aa({inputs:{x:d},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=(0,o.sumOutType)(a.dtype),x=(e,t,r,a,s)=>{const i=e.shape[0],u=e.shape[1],c=o.backend_util.segment_util.segOpComputeOptimalWindowSize(u,s),p=new mc({windowSize:c,inSize:u,batchSize:i,numSegments:s},t),d=n.compileAndRun(p,[e,r],a);if(l.push(d),d.shape[1]===s)return d;const h=zu({backend:n,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),f=ac({inputs:{x:h},backend:n,attrs:{reps:[u/c]}});return l.push(h),l.push(f),x(d,t,f,a,s)},y=aa({inputs:{x:x(m,"unsortedSegmentSum",s,g,i)},backend:n,attrs:{shape:h}});let b=y;if(null!=p){l.push(y);const e=o.backend_util.getUndoAxesPermutation(p);b=fa({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},_u];for(const e of gc)(0,o.registerKernel)(e)},3916:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GraphModel:()=>sr,deregisterOp:()=>$,loadGraphModel:()=>or,registerOp:()=>I,version_converter:()=>ir});var r={};n.r(r),n.d(r,{json:()=>O});var a={};n.r(a),n.d(a,{json:()=>F});var s={};n.r(s),n.d(s,{json:()=>B});var o={};n.r(o),n.d(o,{json:()=>M});var i={};n.r(i),n.d(i,{json:()=>P});var u={};n.r(u),n.d(u,{json:()=>L});var l={};n.r(l),n.d(l,{json:()=>V});var c={};n.r(c),n.d(c,{json:()=>z});var p={};n.r(p),n.d(p,{json:()=>W});var d={};n.r(d),n.d(d,{json:()=>U});var h={};n.r(h),n.d(h,{json:()=>G});var f={};n.r(f),n.d(f,{json:()=>X});var m={};n.r(m),n.d(m,{json:()=>H});var g={};n.r(g),n.d(g,{json:()=>q});var x={};n.r(x),n.d(x,{json:()=>j});var y={};n.r(y),n.d(y,{json:()=>K});var b={};n.r(b),n.d(b,{json:()=>Y});var v,w,k=n(558);!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(v||(v={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(w||(w={}));const S={};function I(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};S[e]=n}function N(e){return S[e]}function $(e){delete S[e]}function T(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return C(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type)return t.inputNames.slice(e,o).map((e=>C(e,n,r,a)));const i=C(t.inputNames.slice(e)[0],n,r,a),u=i.dataSync();return"number"===s.type?u[0]:k.util.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function C(e,t,n,r){const[a,s]=R(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[_(a,e)]));return void 0!==o?t[_(a,o)][s]:void 0}function E(e,t){const[n,r]=R(e);return[_(n,t&&t.currentContextId),r]}function _(e,t){return t?`${e}-${t}`:e}function R(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function A(e,t,n){let r=T("pad",e,t,n);if("explicit"===r){r=T("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function D(e){return e.kept?e:(0,k.clone)(e)}const O=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],F=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],B=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],M=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],P=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],L=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],V=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],z=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],W=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],U=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],G=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],X=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],H=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],q=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],j=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],K=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Y=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class Q{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,a,s,o,i,u,l,h,d,c,f,m,g,x,y,b,p].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach((e=>{const[n]=E(e);t.inputs.push(o[n]),o[n].children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=E(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=E(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=N(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=J(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=J(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=le(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=le(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=te(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=te(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=ue(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ue(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=ee(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ee(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=pe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=ie(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=ce(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=ae(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ae(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=se(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=re(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=E(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ne(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach((e=>{const[n]=E(e);t.inputs.push(r[n]),r[n].children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=E(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Z(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,k.env)().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function J(e,t,n,r=!1){const a=e[t];return null!=a?Z(a.s,r):n}function ee(e,t,n){const r=e[t];return r?r.b:n}function te(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function ne(e){switch("string"==typeof e&&(e=v[e]),e){case v.DT_FLOAT:return"float32";case v.DT_INT32:case v.DT_INT64:case v.DT_INT8:case v.DT_UINT8:return"int32";case v.DT_BOOL:return"bool";case v.DT_DOUBLE:return"float32";case v.DT_STRING:return"string";default:return null}}function re(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function ae(e,t,n){const r=e[t];return r&&r.type?ne(r.type):n}function se(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>ne(e))):n}function oe(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function ie(e,t,n){const r=e[t];return r&&r.shape?oe(r.shape):n}function ue(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function le(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>Z(e,r))):n}function ce(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>oe(e))):n}function pe(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class de{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return C(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return C(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return te(this.node.rawAttrs,e,t);if(null!=n.s)return J(this.node.rawAttrs,e,t);if(null!=n.b)return ee(this.node.rawAttrs,e,t);if(null!=n.shape)return ie(this.node.rawAttrs,e,t);if(null!=n.type)return ae(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return ue(this.node.rawAttrs,e,t);if(null!=n.list.s)return le(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ce(this.node.rawAttrs,e,t);if(null!=n.list.b)return pe(this.node.rawAttrs,e,t);if(null!=n.list.type)return se(this.node.rawAttrs,e,t)}return t}}var he=n(6407),fe=n(3135),me=n(5228),ge=n(4841),xe=n(1274),ye=n(9322),be=n(9165),ve=n(827),we=n(4513),ke=n(632),Se=n(3453),Ie=n(5265),Ne=n(6235),$e=n(7839),Te=n(1470),Ce=n(2421),Ee=n(1891),_e=n(7037),Re=n(9812),Ae=n(369),De=n(6825),Oe=n(1661),Fe=n(173),Be=n(2699),Me=n(3233),Pe=n(4650),Le=n(4842),Ve=n(3426),ze=n(6943),We=n(2597),Ue=n(7474),Ge=n(4386),Xe=n(7370),He=n(9036),qe=n(766),je=n(7409),Ke=n(7809),Ye=n(5503),Qe=n(625),Ze=n(9331),Je=n(4434),et=n(3254),tt=n(3694),nt=n(3261),rt=n(248),at=n(1869),st=n(1173),ot=n(2279),it=n(3582),ut=n(2634),lt=n(9451),ct=n(9133),pt=n(8151);function dt(e,t,n=""){k.util.assert(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class ht{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=(0,k.scalar)(0),(0,k.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),dt(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,k.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,k.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return dt(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,k.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,k.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return dt(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,k.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,k.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];(0,k.tidy)((()=>{t=(0,k.reshape)(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=(0,k.reshape)((0,k.slice)(t,o,i),this.elementShape)}return s}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class ft{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);dt(t,e.shape,"TensorList shape mismatch: "),(0,k.keep)(e)})),this.idTensor=(0,k.scalar)(0),this.maxNumElements=r,(0,k.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ft([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return dt(e,this.elementShape,"TensorList shape mismatch: "),(0,k.tidy)((()=>{const t=this.tensors.map((t=>(0,k.reshape)(t,e)));return(0,k.stack)(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return dt(n.shape,e,"TensorList shape mismatch: "),(0,k.reshape)(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(dt(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,k.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return dt(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);dt(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,k.keep)(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return dt(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?(0,k.tensor)([],[0].concat(this.elementShape)):(0,k.tidy)((()=>{const t=e.map((e=>(0,k.reshape)(this.tensors[e],n)));return(0,k.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return dt(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?(0,k.tensor)([],[0].concat(this.elementShape)):(0,k.tidy)((()=>{const e=this.tensors.map((e=>(0,k.reshape)(e,t)));return(0,k.concat)(e,0)}))}}var mt=n(1355),gt=n(4794),xt=n(4624),yt=n(1405),bt=n(4718),vt=n(473),wt=n(5176),kt=n(1174),St=n(6877),It=n(1749),Nt=n(5020),$t=n(557);function Tt(e,t,n){const[r,a]=T("fusedOps",e,t,n),s="biasadd"===r,o="prelu"===a,i="fusedbatchnorm"===r,u=T("numArgs",e,t,n);if(s){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(i)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const l=T("strides",e,t,n),c=A(e,t,n),p=T("dataFormat",e,t,n).toUpperCase(),d=T("dilations",e,t,n),[h,f]=T("args",e,t,n);return{stride:l,pad:c,dataFormat:p,dilations:d,biasArg:h,preluArg:f,activationFunc:a,leakyreluAlpha:T("leakyreluAlpha",e,t,n)}}var Ct=n(4006),Et=n(4135),_t=n(686),Rt=n(6708),At=n(4917),Dt=n(7846),Ot=n(5002),Ft=n(7245),Bt=n(3596),Mt=n(9640),Pt=n(6577),Lt=n(1395),Vt=n(2271),zt=n(6380),Wt=n(6567);function Ut(e,t,n){return{boxes:T("boxes",e,t,n),scores:T("scores",e,t,n),maxOutputSize:T("maxOutputSize",e,t,n),iouThreshold:T("iouThreshold",e,t,n),scoreThreshold:T("scoreThreshold",e,t,n),softNmsSigma:T("softNmsSigma",e,t,n)}}var Gt=n(3243),Xt=n(9608),Ht=n(6092),qt=n(9494);class jt{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,k.scalar)(0),this.tensorMap=new Map,(0,k.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,k.tidy)((()=>{const e=(0,k.unstack)(t),r=n.length,a=e.length;k.util.assert(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let t=0;t<r;t++){const r=n[t],a=e[t];(0,k.keep)(a),this.tensorMap.set(r,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,k.tidy)((()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return(0,k.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}var Kt=n(6477),Yt=n(6500),Qt=n(636),Zt=n(7630),Jt=n(6573),en=n(624),tn=n(2856),nn=n(8651),rn=n(5750),an=n(5912),sn=n(8687),on=n(9065),un=n(7505),ln=n(9648),cn=n(682),pn=n(1510),dn=n(9758),hn=n(3307),fn=n(5130),mn=n(5735),gn=n(5475),xn=n(781),yn=n(2998),bn=n(47),vn=n(7394),wn=n(7405),kn=n(3865),Sn=n(5746),In=n(6884),Nn=n(4926),$n=n(7486),Tn=n(2676),Cn=n(5158),En=n(9590),_n=n(4968),Rn=n(2991),An=n(4136),Dn=n(7501),On=n(8644),Fn=n(3100),Bn=n(7494),Mn=n(7020),Pn=n(8447),Ln=n(3710),Vn=n(4415),zn=n(1300),Wn=n(1483),Un=n(9682),Gn=n(7918),Xn=n(8441),Hn=n(9112),qn=n(8247);function jn(e,t,n,r){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[he.I(T("a",e,t,n),T("b",e,t,n))];case"AddN":return[fe.Q(T("tensors",e,t,n))];case"FloorMod":case"Mod":return[me.w(T("a",e,t,n),T("b",e,t,n))];case"Mul":return[ge.d(T("a",e,t,n),T("b",e,t,n))];case"RealDiv":case"Div":return[xe.h(T("a",e,t,n),T("b",e,t,n))];case"DivNoNan":return[ye.N(T("a",e,t,n),T("b",e,t,n))];case"FloorDiv":return[be.q(T("a",e,t,n),T("b",e,t,n))];case"Sub":return[ve.l(T("a",e,t,n),T("b",e,t,n))];case"Minimum":return[we.L(T("a",e,t,n),T("b",e,t,n))];case"Maximum":return[ke.g(T("a",e,t,n),T("b",e,t,n))];case"Pow":return[Se.s(T("a",e,t,n),T("b",e,t,n))];case"SquaredDifference":return[Ie.$(T("a",e,t,n),T("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Ne.W(T("x",e,t,n))];case"Acos":return[$e.K(T("x",e,t,n))];case"Acosh":return[Te._(T("x",e,t,n))];case"Asin":return[Ce.Z(T("x",e,t,n))];case"Asinh":return[Ee.V(T("x",e,t,n))];case"Atan":return[_e.z(T("x",e,t,n))];case"Atan2":return[Re.f(T("x",e,t,n),T("y",e,t,n))];case"Atanh":return[Ae.C(T("x",e,t,n))];case"Ceil":return[De.m(T("x",e,t,n))];case"Complex":return[Oe.P(T("real",e,t,n),T("imag",e,t,n))];case"Cos":return[Fe.m(T("x",e,t,n))];case"Cosh":return[Be.f(T("x",e,t,n))];case"Elu":return[Me.p(T("x",e,t,n))];case"Erf":return[Pe.q(T("x",e,t,n))];case"Exp":return[Le.Q(T("x",e,t,n))];case"Expm1":return[Ve.t(T("x",e,t,n))];case"Floor":return[ze.G(T("x",e,t,n))];case"Log":return[We.c(T("x",e,t,n))];case"Log1p":return[Ue.K(T("x",e,t,n))];case"Imag":return[Ge.a(T("x",e,t,n))];case"Neg":return[Xe.W(T("x",e,t,n))];case"Reciprocal":return[He.M(T("x",e,t,n))];case"Real":return[qe.k(T("x",e,t,n))];case"Relu":return[je.U(T("x",e,t,n))];case"Round":return[Ke.N(T("x",e,t,n))];case"Selu":return[Ye.U(T("x",e,t,n))];case"Sigmoid":return[Qe.X(T("x",e,t,n))];case"Sin":return[Ze.O(T("x",e,t,n))];case"Sign":return[Je.X(T("x",e,t,n))];case"Sinh":return[et.R(T("x",e,t,n))];case"Softplus":return[tt.W(T("x",e,t,n))];case"Sqrt":return[nt._(T("x",e,t,n))];case"Square":return[rt.h(T("x",e,t,n))];case"Tanh":return[at.A(T("x",e,t,n))];case"Tan":return[st.O(T("x",e,t,n))];case"ClipByValue":return[ot.i(T("x",e,t,n),T("clipValueMin",e,t,n),T("clipValueMax",e,t,n))];case"Relu6":return[it.b(T("x",e,t,n))];case"Rsqrt":return[ut.b(C(e.inputNames[0],t,n))];case"Prod":return[lt.W(T("x",e,t,n),T("axes",e,t,n))];case"LeakyRelu":return[ct.h(T("x",e,t,n),T("alpha",e,t,n))];case"Prelu":return[pt.A(T("x",e,t,n),T("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=T("thenBranch",e,t,n),a=T("elseBranch",e,t,n),s=T("cond",e,t,n),o=T("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=T("body",e,t,n),a=T("cond",e,t,n),s=T("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[D(T("pred",e,t,n))];case"Switch":{const r=T("pred",e,t,n);let a=T("data",e,t,n);return a.kept||(a=D(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==C(e,t,n)));return r?[D(C(r,t,n))]:void 0}case"Enter":{const r=T("frameName",e,t,n),a=T("tensor",e,t,n);return n.enterFrame(r),[D(a)]}case"Exit":{const r=T("tensor",e,t,n);return n.exitFrame(),[D(r)]}case"NextIteration":{const r=T("tensor",e,t,n);return n.nextIteration(),[D(r)]}case"TensorArrayV3":{const r=T("size",e,t,n),a=T("dtype",e,t,n),s=T("elementShape",e,t,n),o=T("dynamicSize",e,t,n),i=T("clearAfterRead",e,t,n),u=T("identicalElementShapes",e,t,n),l=T("name",e,t,n),c=new ht(l,a,r,s,u,o,i);return n.addTensorArray(c),[c.idTensor,(0,k.scalar)(1)]}case"TensorArrayWriteV3":{const r=T("tensorArrayId",e,t,n),a=T("index",e,t,n),s=T("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=T("tensorArrayId",e,t,n),a=T("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=T("tensorArrayId",e,t,n),a=T("indices",e,t,n),s=T("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=T("tensorArrayId",e,t,n),a=T("indices",e,t,n),s=T("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=T("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=T("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=T("tensorArrayId",e,t,n),a=T("tensor",e,t,n),s=T("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=T("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return[(0,k.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const r=T("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=T("tensorListId",e,t,n),a=T("index",e,t,n),s=T("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=T("tensorListId",e,t,n),a=T("index",e,t,n),s=T("elementShape",e,t,n),o=T("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=T("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new ft([],n,e.dtype,r),o=(0,k.unstack)(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(T("tensor",e,t,n),r,T("elementShape",e,t,n),T("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=T("elementShape",e,t,n),a=T("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,n){return new ft([],e,t,n)}(r,a,T(s,e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=T("tensorListId",e,t,n),a=T("indices",e,t,n),s=T("elementShape",e,t,n),o=T("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=T("tensorListId",e,t,n),a=T("elementShape",e,t,n),s=T("elementDType",e,t,n),o=T("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);dt(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=(0,k.unstack)(e);return new ft(a,t,r)}(T("tensor",e,t,n),T("elementShape",e,t,n),T("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=T("tensorListId",e,t,n),a=n.getTensorList(r.id),s=T("dtype",e,t,n),o=T("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=T("tensorListId",e,t,n),a=T("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=T("tensorListId",e,t,n),a=T("elementShape",e,t,n),s=T("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=T("tensor",e,t,n),a=T("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=0===r?0:e.size/r,o=(0,k.tidy)((()=>{const o=[];e=(0,k.reshape)(e,[1,r,s]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],u=[1,t[r],s];o[r]=(0,k.reshape)((0,k.slice)(e,i,u),n)}return e.dispose(),o})),i=new ft([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)i.setItem(e,o[e]);return i}(r,T("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=T("stride",e,t,n),a=T("pad",e,t,n),s=T("dataFormat",e,t,n).toUpperCase(),o=T("dilation",e,t,n);return[mt.P(T("x",e,t,n),T("filter",e,t,n),r,a,s,o)]}case"Conv2D":{const r=T("strides",e,t,n),a=A(e,t,n),s=T("dataFormat",e,t,n).toUpperCase(),o=T("dilations",e,t,n);return[gt.T(T("x",e,t,n),T("filter",e,t,n),[r[1],r[2]],a,s,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=Tt(e,t,n);return[xt.conv2d({x:T("x",e,t,n),filter:T("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=Tt(e,t,n);return[xt.depthwiseConv2d({x:T("x",e,t,n),filter:T("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=T("outputShape",e,t,n),a=T("strides",e,t,n),s=A(e,t,n);return[yt.b(T("x",e,t,n),T("filter",e,t,n),r,[a[1],a[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=T("strides",e,t,n),a=A(e,t,n),s=T("dilations",e,t,n),o=T("dataFormat",e,t,n).toUpperCase();return[bt.B(T("input",e,t,n),T("filter",e,t,n),[r[1],r[2]],a,o,[s[1],s[2]])]}case"Conv3D":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("dataFormat",e,t,n).toUpperCase(),o=T("dilations",e,t,n);return[vt.p(T("x",e,t,n),T("filter",e,t,n),[r[1],r[2],r[3]],a,s,[o[1],o[2],o[3]])]}case"AvgPool":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("kernelSize",e,t,n);return[wt.w(T("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("kernelSize",e,t,n);return[kt._(T("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("kernelSize",e,t,n),o=T("includeBatchInIndex",e,t,n),{result:i,indexes:u}=St.I(T("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a,o);return[i,u]}case"AvgPool3D":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("kernelSize",e,t,n);return[It.u(T("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("kernelSize",e,t,n);return[Nt.Y(T("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=T("strides",e,t,n),a=T("pad",e,t,n),s=T("dilations",e,t,n),o=r[1],i=r[2],u=s[1],l=s[2];return[$t.W(T("x",e,t,n),T("filter",e,t,n),[o,i],a,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=T("shape",e,t,n),a=T("dtype",e,t,n),s=T("value",e,t,n);return[Ct.h(r,s,a)]}case"LinSpace":{const r=T("start",e,t,n),a=T("stop",e,t,n),s=T("num",e,t,n);return[Et.S(r,a,s)]}case"Multinomial":{const r=T("logits",e,t,n),a=T("numSamples",e,t,n),s=T("seed",e,t,n);return[_t.S(r,a,s)]}case"OneHot":{const r=T("indices",e,t,n),a=T("depth",e,t,n),s=T("onValue",e,t,n),o=T("offValue",e,t,n);return[Rt.l(r,a,s,o)]}case"Ones":return[At.i(T("shape",e,t,n),T("dtype",e,t,n))];case"OnesLike":return[Dt.J(T("x",e,t,n))];case"RandomUniform":return[Ot.L(T("shape",e,t,n),T("minval",e,t,n),T("maxval",e,t,n),T("dtype",e,t,n))];case"Range":{const r=T("start",e,t,n),a=T("stop",e,t,n),s=T("step",e,t,n);return[Ft.w(r,a,s,T("dtype",e,t,n))]}case"TruncatedNormal":{const r=T("shape",e,t,n),a=T("mean",e,t,n),s=T("stdDev",e,t,n),o=T("seed",e,t,n);return[Bt.X(r,a,s,T("dtype",e,t,n),o)]}case"Zeros":return[Mt.l(T("shape",e,t,n),T("dtype",e,t,n))];case"ZerosLike":return[Pt.P(T("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=Ut(e,t,n),l=await Lt.BHj.nonMaxSuppressionWithScoreAsync(r,a,s,o,i,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=Ut(e,t,n),u=T("padToMaxOutputSize",e,t,n),l=await Lt.BHj.nonMaxSuppressionPaddedAsync(r,a,s,o,i,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=Ut(e,t,n);return[await Lt.BHj.nonMaxSuppressionAsync(r,a,s,o,i)]}case"Where":{const r=Vt.p(T("condition",e,t,n),"bool"),a=[await zt.i(r)];return r.dispose(),a}case"ListDiff":return Wt.O(T("x",e,t,n),T("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=T("x",e,t,n),a=T("k",e,t,n),s=T("sorted",e,t,n),o=Gt.h(r,a,s);return[o.values,o.indices]}case"Unique":{const r=T("x",e,t,n),a=Xt.T(r);return[a.values,a.indices]}case"UniqueV2":{const r=T("x",e,t,n),a=T("axis",e,t,n),s=Xt.T(r,a);return[s.values,s.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=T("images",e,t,n),a=T("size",e,t,n),s=T("alignCorners",e,t,n),o=T("halfPixelCenters",e,t,n);return[Lt.BHj.resizeBilinear(r,[a[0],a[1]],s,o)]}case"ResizeNearestNeighbor":{const r=T("images",e,t,n),a=T("size",e,t,n),s=T("alignCorners",e,t,n),o=T("halfPixelCenters",e,t,n);return[Lt.BHj.resizeNearestNeighbor(r,[a[0],a[1]],s,o)]}case"CropAndResize":{const r=T("image",e,t,n),a=T("boxes",e,t,n),s=T("boxInd",e,t,n),o=T("cropSize",e,t,n),i=T("method",e,t,n),u=T("extrapolationValue",e,t,n);return[Lt.BHj.cropAndResize(r,a,s,o,i,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=T("default",e,t,n);return[C(e.name,t,n)||r];case"Placeholder":return[C(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[D(T("x",e,t,n))];case"IdentityN":return T("x",e,t,n).map((e=>D(e)));case"Shape":return[Ht.R(T("x",e,t,n).shape,"int32")];case"ShapeN":return T("x",e,t,n).map((e=>Ht.R(e.shape)));case"Size":return[qt.i(T("x",e,t,n).size,"int32")];case"Rank":return[qt.i(T("x",e,t,n).rank,"int32")];case"NoOp":return[qt.i(1)];case"Print":const a=T("x",e,t,n),s=T("data",e,t,n),o=T("message",e,t,n),i=T("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,i));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Kt.D(T("a",e,t,n),T("b",e,t,n))];case"NotEqual":return[Yt.Q(T("a",e,t,n),T("b",e,t,n))];case"Greater":return[Qt.p(T("a",e,t,n),T("b",e,t,n))];case"GreaterEqual":return[Zt.b(T("a",e,t,n),T("b",e,t,n))];case"Less":return[Jt.d(T("a",e,t,n),T("b",e,t,n))];case"LessEqual":return[en.z(T("a",e,t,n),T("b",e,t,n))];case"LogicalAnd":return[tn.H(T("a",e,t,n),T("b",e,t,n))];case"LogicalNot":return[nn.h(T("a",e,t,n))];case"LogicalOr":return[rn.K(T("a",e,t,n),T("b",e,t,n))];case"Select":case"SelectV2":return[an.a(T("condition",e,t,n),T("a",e,t,n),T("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[sn.O(T("a",e,t,n),T("b",e,t,n),T("transposeA",e,t,n),T("transposeB",e,t,n))];case"Transpose":return[on.p(T("x",e,t,n),T("perm",e,t,n))];case"_FusedMatMul":const[r,a]=T("fusedOps",e,t,n),s="biasadd"===r,o="prelu"===a,i=T("numArgs",e,t,n),u=T("leakyreluAlpha",e,t,n);if(s){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=T("args",e,t,n);return[xt.matMul({a:T("a",e,t,n),b:T("b",e,t,n),transposeA:T("transposeA",e,t,n),transposeB:T("transposeB",e,t,n),bias:l,activation:a,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[un.t(T("x",e,t,n),T("mean",e,t,n),T("variance",e,t,n),T("offset",e,t,n),T("scale",e,t,n),T("epsilon",e,t,n))];case"LRN":return[ln.G(T("x",e,t,n),T("radius",e,t,n),T("bias",e,t,n),T("alpha",e,t,n),T("beta",e,t,n))];case"Softmax":return[cn.X(T("x",e,t,n))];case"LogSoftmax":return[pn.C(T("x",e,t,n))];case"SparseToDense":return[dn.e(T("sparseIndices",e,t,n),T("outputShape",e,t,n),T("sparseValues",e,t,n),T("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[hn.F(T("x",e,t,n),r,a)]}case"Mean":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[fn.J(T("x",e,t,n),r,a)]}case"Min":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[mn.V(T("x",e,t,n),r,a)]}case"Sum":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[gn.S(T("x",e,t,n),r,a)]}case"All":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[xn.$(T("x",e,t,n),r,a)]}case"Any":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[yn.Y(T("x",e,t,n),r,a)]}case"ArgMax":{const r=T("axis",e,t,n);return[bn.N(T("x",e,t,n),r)]}case"ArgMin":{const r=T("axis",e,t,n);return[vn.v(T("x",e,t,n),r)]}case"Prod":{const r=T("axis",e,t,n),a=T("keepDims",e,t,n);return[lt.W(T("x",e,t,n),r,a)]}case"Cumsum":{const r=T("axis",e,t,n),a=T("exclusive",e,t,n),s=T("reverse",e,t,n);return[wn.z(T("x",e,t,n),r,a,s)]}case"Bincount":const r=T("x",e,t,n),a=T("weights",e,t,n),s=T("size",e,t,n);return[kn.y(r,a,s)];case"DenseBincount":{const r=T("x",e,t,n),a=T("weights",e,t,n),s=T("size",e,t,n),o=T("binaryOutput",e,t,n);return[Sn.p(r,a,s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=T("n",e,t,n),a=T("axis",e,t,n);let s=T("tensors",e,t,n);return s=s.slice(0,r),[In.z(s,a)]}case"Gather":{const r=T("x",e,t,n),a=T("indices",e,t,n);return[Nn.I(r,Vt.p(a,"int32"),0)]}case"GatherV2":{const r=T("axis",e,t,n),a=T("batchDims",e,t,n),s=T("x",e,t,n),o=T("indices",e,t,n);return[Nn.I(s,Vt.p(o,"int32"),r,a)]}case"Reverse":{const r=T("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const s=T("x",e,t,n);return[$n.G(s,a)]}case"ReverseV2":{const r=T("axis",e,t,n),a=T("x",e,t,n);return[$n.G(a,r)]}case"Slice":{const r=T("begin",e,t,n),a=T("size",e,t,n);return[Tn.t(T("x",e,t,n),r,a)]}case"StridedSlice":{const r=T("begin",e,t,n),a=T("end",e,t,n),s=T("strides",e,t,n),o=T("beginMask",e,t,n),i=T("endMask",e,t,n),u=T("ellipsisMask",e,t,n),l=T("newAxisMask",e,t,n),c=T("shrinkAxisMask",e,t,n),p=T("x",e,t,n);return[Cn.N(p,r,a,s,o,i,u,l,c)]}case"Pack":return(0,k.tidy)((()=>{const r=T("axis",e,t,n),a=T("tensors",e,t,n),s=a[0].shape,o=En.L(a[0]).shape,i=a.map((e=>{const t=k.util.arraysEqual(e.shape,s);if(!t&&!k.util.arraysEqual(En.L(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:_n.X(e,s)}));return[Rn.k(i,r)]}));case"Unpack":{const r=T("axis",e,t,n),a=T("tensor",e,t,n);return An.H(a,r)}case"Tile":{const r=T("reps",e,t,n);return[Dn.G(T("x",e,t,n),r)]}case"Split":case"SplitV":{const r=T("axis",e,t,n),a=T("numOrSizeSplits",e,t,n),s=T("x",e,t,n);return On.V(s,a,r)}case"ScatterNd":{const r=T("indices",e,t,n),a=T("values",e,t,n),s=T("shape",e,t,n);return[Fn.s(r,a,s)]}case"GatherNd":{const r=T("x",e,t,n),a=T("indices",e,t,n);return[Bn.d(r,a)]}case"SparseToDense":{const r=T("sparseIndices",e,t,n),a=T("outputShape",e,t,n),s=T("sparseValues",e,t,n),o=T("defaultValue",e,t,n);return[dn.e(r,s,a,s.dtype===o.dtype?o:Vt.p(o,s.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Mn.k(T("x",e,t,n))];case"IFFT":return[Pn.S(T("x",e,t,n))];case"RFFT":return[Ln.Q(T("x",e,t,n))];case"IRFFT":return[Vn.w(T("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return k.tidy((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Vt.p(T("x",e,t,n),T("dtype",e,t,n))];case"ExpandDims":{const r=T("axis",e,t,n);return[zn.d(T("x",e,t,n),r)]}case"Squeeze":{const r=T("axis",e,t,n);return[En.L(T("x",e,t,n),r)]}case"Reshape":return[_n.X(T("x",e,t,n),T("shape",e,t,n))];case"MirrorPad":return[Wn.V(T("x",e,t,n),T("padding",e,t,n),T("mode",e,t,n))];case"PadV2":case"Pad":return[Un.v(T("x",e,t,n),T("padding",e,t,n),T("constantValue",e,t,n))];case"SpaceToBatchND":{const r=T("blockShape",e,t,n),a=T("paddings",e,t,n);return[Gn.f(T("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=T("blockShape",e,t,n),a=T("crops",e,t,n);return[Xn.E(T("x",e,t,n),r,a)]}case"DepthToSpace":{const r=T("blockSize",e,t,n),a=T("dataFormat",e,t,n).toUpperCase();return[Hn.n(T("x",e,t,n),r,a)]}case"BroadcastTo":return[qn.U(T("x",e,t,n),T("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=T("keyDType",e,t,n),s=T("valueDType",e,t,n),o=new jt(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=T("tableHandle",e,t,n,r),s=T("keys",e,t,n),o=T("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=T("tableHandle",e,t,n,r),s=T("keys",e,t,n),o=T("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=N(e.op);if(a&&a.customExecutor)return a.customExecutor(new de(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return k.util.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class Kn{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Yn(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>R(e)[0]));let c=[];null!=r&&(c=r.map((e=>R(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(er(e)||tr(e)||nr(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):s.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const Qn=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Zn=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Jn=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function er(e){return Qn.indexOf(e.op)>=0}function tr(e){return Zn.indexOf(e.op)>=0}function nr(e){return Jn.indexOf(e.op)>=0}class rr{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new rr(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Yn(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map((e=>R(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[R(e)[0]])),a=t.map((e=>R(e)[0]));let s=a.map((e=>this.graph.nodes[e]));0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const u={},l={};return(0,k.tidy)((()=>{const n=new Kn(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=R(t),s=[];s[a]=e[t],r[n]=s}));const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=jn(t,r,n,this._resourceManager);if(k.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map((e=>C(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[_(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!a.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const s=new Kn(this.weightMap,r,a,this.functionExecutorMap),o=await this.executeWithControlFlow(e,s,t,n),i=t.map((e=>C(e,o,s))),u=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(o).forEach((e=>{o[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&s.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map((e=>this.graph.nodes[R(e)[0]])),o=n.map((e=>R(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:p}=Yn(e,i,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=R(t),a=[];a[r]=e[t],h[n]=a}));const f={},m=this.getFrozenTensorIds(h),g={};for(;d.length>0;){const e=this.processStack(s,d,t,h,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=i.filter((e=>!er(e)&&!C(e.name,h,t))).map((e=>e.name));if(x.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,a,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&T("isConstant",e.node,r,n)&&([c]=E(e.node.name,n)),null==r[e.node.name]){const p=jn(e.node,r,n,this._resourceManager);c||([c]=E(e.node.name,n));const d=n.currentContext;k.util.isPromise(p)?l.push(p.then((l=>(r[c]=l,n.currentContext=d,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u),l)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u))}else this.processChildNodes(e.node,t,n,r,a,u)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach((e=>{const[o]=E(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!C(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!C(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=R(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));k.util.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&k.util.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=R(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=R(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class ar{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class sr{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new ar}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=k.io.browserHTTPRequest(e,this.loadOptions);else{const t=k.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(k.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=k.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new rr(Q.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Q.Instance.transformGraph(e.modelInitializer);this.initializer=new rr(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=k.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof k.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function or(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new sr(e,t);return await n.load(),n}const ir="2.8.6"},8713:(e,t,n)=>{"use strict";n.d(t,{JL:()=>r,Zu:()=>a});class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{decComplexRef(e){}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}numDataIds(){return s("numDataIds")}disposeData(e){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return s("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:a,activation:o,preluActivationWeights:i}){return s("fusedBatchMatMul")}slice(e,t,n){return s("slice")}stridedSlice(e,t,n,r){return s("stridedSlice")}unstack(e,t){return s("unstack")}reverse(e,t){return s("reverse")}concat(e,t){return s("concat")}neg(e){return s("neg")}add(e,t){return s("add")}addN(e){return s("addN")}subtract(e,t){return s("subtract")}multiply(e,t){return s("multiply")}realDivide(e,t){return s("realDivide")}floorDiv(e,t){return s("floorDiv")}sum(e,t){return s("sum")}prod(e,t){return s("prod")}unsortedSegmentSum(e,t,n){return s("unsortedSegmentSum")}argMin(e,t){return s("argMin")}argMax(e,t){return s("argMax")}equal(e,t){return s("equal")}notEqual(e,t){return s("notEqual")}less(e,t){return s("less")}lessEqual(e,t){return s("lessEqual")}greater(e,t){return s("greater")}greaterEqual(e,t){return s("greaterEqual")}logicalNot(e){return s("logicalNot")}logicalAnd(e,t){return s("logicalAnd")}logicalOr(e,t){return s("logicalOr")}where(e){return s("where")}select(e,t,n){return s("select")}topk(e,t,n){return s("topk")}min(e,t){return s("min")}minimum(e,t){return s("minimum")}mod(e,t){return s("mod")}max(e,t){return s("max")}maximum(e,t){return s("maximum")}all(e,t){return s("all")}any(e,t){return s("any")}squaredDifference(e,t){return s("squaredDifference")}ceil(e){return s("ceil")}floor(e){return s("floor")}round(e){return s("round")}sign(e){return s("sign")}isNaN(e){return s("isNaN")}isInf(e){return s("isInf")}isFinite(e){return s("isFinite")}pow(e,t){return s("pow")}exp(e){return s("exp")}expm1(e){return s("expm1")}softmax(e,t){return s("softmax")}log(e){return s("log")}log1p(e){return s("log1p")}sqrt(e){return s("sqrt")}rsqrt(e){return s("rsqrt")}square(e){return s("square")}reciprocal(e){return s("reciprocal")}relu(e){return s("relu")}relu6(e){return s("relu6")}prelu(e,t){return s("prelu")}elu(e){return s("elu")}eluDer(e,t){return s("eluDer")}selu(e){return s("selu")}int(e){return s("int")}clip(e,t,n){return s("clip")}abs(e){return s("abs")}complexAbs(e){return s("complexAbs")}sigmoid(e){return s("sigmoid")}softplus(e){return s("softplus")}sin(e){return s("sin")}cos(e){return s("cos")}tan(e){return s("tan")}asin(e){return s("asin")}acos(e){return s("acos")}atan(e){return s("atan")}atan2(e,t){return s("atan2")}sinh(e){return s("sinh")}cosh(e){return s("cosh")}tanh(e){return s("tanh")}asinh(e){return s("asinh")}acosh(e){return s("acosh")}atanh(e){return s("atanh")}erf(e){return s("erf")}step(e,t){return s("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:a,preluActivationWeights:o}){return s("fusedConv2d")}conv2d(e,t,n){return s("conv2d")}conv2dDerInput(e,t,n){return s("conv2dDerInput")}conv2dDerFilter(e,t,n){return s("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:a,preluActivationWeights:o}){return s("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return s("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return s("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return s("depthwiseConv2DDerFilter")}conv3d(e,t,n){return s("conv3d")}conv3dDerInput(e,t,n){return s("conv3dDerInput")}conv3dDerFilter(e,t,n){return s("conv3dDerFilter")}maxPool(e,t){return s("maxPool")}maxPoolBackprop(e,t,n,r){return s("maxPoolBackprop")}avgPool(e,t){return s("avgPool")}avgPoolBackprop(e,t,n){return s("avgPoolBackprop")}avgPool3d(e,t){return s("avgPool3d")}avgPool3dBackprop(e,t,n){return s("avgPool3dBackprop")}maxPool3d(e,t){return s("maxPool3d")}maxPool3dBackprop(e,t,n,r){return s("maxPool3dBackprop")}reshape(e,t){return s("reshape")}cast(e,t){return s("cast")}tile(e,t){return s("tile")}pad(e,t,n){return s("pad")}transpose(e,t){return s("transpose")}gather(e,t,n,r=0){return s("gather")}gatherND(e,t){return s("gatherND")}scatterND(e,t,n){return s("scatterND")}batchToSpaceND(e,t,n){return s("batchToSpaceND")}spaceToBatchND(e,t,n){return s("spaceToBatchND")}resizeBilinear(e,t,n,r,a){return s("resizeBilinear")}resizeBilinearBackprop(e,t,n){return s("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r,a){return s("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return s("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,a,o){return s("batchNorm")}localResponseNormalization4D(e,t,n,r,a){return s("localResponseNormalization4D")}LRNGrad(e,t,n,r,a,o,i){return s("LRNGrad")}multinomial(e,t,n,r){return s("multinomial")}oneHot(e,t,n,r){return s("oneHot")}cumsum(e,t,n,r){return s("cumsum")}nonMaxSuppression(e,t,n,r,a){return s("nonMaxSuppression")}fft(e){return s("fft")}ifft(e){return s("ifft")}complex(e,t){return s("complex")}real(e){return s("real")}imag(e){return s("imag")}cropAndResize(e,t,n,r,a,o){return s("cropAndResize")}depthToSpace(e,t,n){return s("depthToSpace")}split(e,t,n){return s("split")}sparseToDense(e,t,n,r){return s("sparseToDense")}diag(e){return s("diag")}fill(e,t,n){return s("fill")}onesLike(e){return s("onesLike")}zerosLike(e){return s("zerosLike")}linspace(e,t,n){return s("linspace")}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3337:(e,t,n)=>{"use strict";function r(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||a)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function a(e,t){return e>t?1:e<t?-1:0}function s(e,t,n,r,a){return u(e,t,n,r,a,0)}function o(e,t,n,r,a,s){return u(e,t,n,r,a,0,!1,s,!0)}function i(e,t,n,r,a,s){return u(e,t,n,r,a,s,!0)}function u(e,t,n,a,s,o,i=!1,u=!1,d=!1){const h=[];for(let e=0;e<t.length;e++)t[e]>s&&h.push({score:t[e],boxIndex:e,suppressBeginIndex:0});h.sort(p);const f=o>0?-.5/o:0,m=[],g=[];for(;m.length<n&&h.length>0;){const t=h.pop(),{score:n,boxIndex:o,suppressBeginIndex:i}=t;if(n<s)break;let u=!1;for(let n=m.length-1;n>=i;--n){const r=l(e,o,m[n]);if(r>=a){u=!0;break}if(t.score=t.score*c(a,f,r),t.score<=s)break}t.suppressBeginIndex=m.length,u||(t.score===n?(m.push(o),g.push(t.score)):t.score>s&&r(h,t,p))}const x=m.length,y=n-x;u&&y>0&&(m.push(...new Array(y).fill(0)),g.push(...new Array(y).fill(0)));const b={selectedIndices:m};return i&&(b.selectedScores=g),d&&(b.validOutputs=x),b}function l(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),h=(i-s)*(u-o),f=(p-l)*(d-c);if(h<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(o,c),x=Math.min(i,p),y=Math.min(u,d),b=Math.max(x-m,0)*Math.max(y-g,0);return b/(h+f-b)}function c(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function p(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>s,qP:()=>o,pA:()=>i})},8333:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(2657);function a(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=(0,r.f)(e,"int32"),s=(0,r.f)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=a.indexToLoc(n[t]),o=t*e.length;s.values.set(r,o)}return s.toTensor()}},7097:(e,t,n)=>{"use strict";n.d(t,{BV:()=>y,wv:()=>x});var r=n(8713),a=n(2885),s=n(5938),o=n(9121),i=n(6151),u=n(569);class l{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new p)}profileKernel(e,t,n){let r;const s=this.backendTimer.time((()=>{r=n()}));if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{c(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function c(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class p{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?u.oj(`${r}ms`,9):r.error,i=u.oj(e,25),l=t.rank,c=t.size,p=u.oj(t.shape.toString(),14);let d="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;d+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${p}\t%c${c}\t%c${d}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var d=n(4077),h=n(747),f=n(9155);class m{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class g{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new m}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new l(this.backendInstance),!0}setupRegisteredKernels(){(0,i.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,i.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,a,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return g.nextTensorId++}nextVariableId(){return g.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t="float32",n={x:e},r={dtype:t};return y.runKernelFunc((n=>n.cast(e,t)),n,null,o.RF,r)}})),[],{}),t}runKernel(e,t,n,r,a){return this.runKernelFunc(null,t,null,e,n,r,a)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,a,s,o){let u,l=[];const c=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const p=this.state.numBytes,d=this.state.numTensors;let h;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const f=(0,i.pI)(r,this.backendName);let m,g;if(null!=f)h=()=>{const e=this.backend.numDataIds();m=f.kernelFunc({inputs:t,attrs:a,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const i=n.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(c){let e=this.getTensorsForGradient(r,t,i);if(null==e){null==o&&(o=[]);const t=i.filter(((e,t)=>o[t]));e=(s||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return i};else{if(null==e)throw new Error(`Error running ${r}: Neither modular kernel nor forward func passed`);const t=e=>{c&&(l=e.map((e=>this.keep(this.clone(e)))))};h=()=>{const n=this.backend.numDataIds();m=this.tidy((()=>e(this.backend,t)));const a=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,a),a}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(g=this.profiler.profileKernel(r,t,(()=>h())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(g),u=g.outputs):u=h()})),c&&this.addTapeNode(r,t,u,n,l,a),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-p,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((e=>null!=t[e]?t[e].shape:null)),outputShapes:u.map((e=>e.shape)),kernelTimeMs:g.timeMs,extraInfo:g.extraInfo}),Array.isArray(m)?u:u[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=(0,i.uk)(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(u.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&u.HD(e[0])&&(a=e.map((e=>f.encodeString(e))));const s=r.write(a,t,n),o=new d.es(t,n,s,this.nextTensorId());if(this.incRef(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=(0,u.Ub)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){n=n||"float32";const a=new d.es(t,n,e,this.nextTensorId());return this.incRef(a,r),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new d._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*u.bT(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof d._w||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},l=(0,i.uk)(e);null!=l&&(r=l.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=u.wT(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,h.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(u.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));u.hu(a instanceof d.es,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=(0,u.p8)((0,u.NA)(e),"float32");return y.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!u.cO(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),b);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){return u.hu(u.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;u.hu(t.every((e=>e instanceof d.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc(((r,a)=>(n=e(...t,a),u.hu(n.value instanceof d.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),u.hu(u.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];u.hu(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),u.hu(s.every((e=>e instanceof d.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o}))}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=(0,f.now)(),n=await this.backend.time(e);return n.wallMs=(0,f.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new m;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function x(){const e=(0,s.D)();if(null==e._tfengine){const t=new a.qA(e);e._tfengine=new g(t)}return(0,a.iG)(e._tfengine.ENV),(0,d.Vi)((()=>e._tfengine)),e._tfengine}g.nextTensorId=0,g.nextVariableId=0;const y=x();function b(e,t){const n={a:e,b:t};return y.runKernel(o.mm,n)}},2885:(e,t,n)=>{"use strict";n.d(t,{OB:()=>s,Vi:()=>o,iG:()=>i,qA:()=>a});var r=n(569);class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,r.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function s(){return o}let o=null;function i(e){o=e}},5938:(e,t,n)=>{"use strict";let r;function a(){if(null==r){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}r=e}return r}function s(e,t){const n=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,{D:()=>a,R:()=>s})},4368:(e,t,n)=>{"use strict";n.d(t,{B9:()=>g,CQ:()=>b,Cd:()=>v,Cn:()=>x,G4:()=>i,MX:()=>c,N5:()=>f,N8:()=>p,N_:()=>w,R:()=>u,SR:()=>d,VY:()=>T,XV:()=>y,cF:()=>l,cj:()=>k,jq:()=>N,lu:()=>m,sq:()=>h,x3:()=>S,y3:()=>$,ze:()=>I});var r=n(7097),a=n(2885),s=n(4077),o=n(747);function i(){(0,a.OB)().set("PROD",!0)}function u(){(0,a.OB)().set("DEBUG",!0)}function l(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function p(){r.BV.disposeVariables()}function d(){return r.BV}function h(){return r.BV.memory()}function f(e){return r.BV.profile(e)}function m(e,t){return r.BV.tidy(e,t)}function g(e){(0,o.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function x(e){return r.BV.keep(e)}function y(e){return r.BV.time(e)}function b(e){return r.BV.setBackend(e)}function v(){return r.BV.ready()}function w(){return r.BV.backendName}function k(e){r.BV.removeBackend(e)}function S(e){return r.BV.findBackend(e)}function I(e){return r.BV.findBackendFactory(e)}function N(e,t,n=1){return r.BV.registerBackend(e,t,n)}function $(){return r.BV.backend}function T(e,t){(0,a.OB)().setPlatform(e,t)}(0,s.FZ)(c)},633:(e,t,n)=>{"use strict";n.d(t,{UQ:()=>i,cb:()=>d,fN:()=>c,h7:()=>l,pn:()=>p,ti:()=>u});var r=n(7097),a=n(4077),s=n(3740),o=n(569);function i(e){return o.hu(o.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=(0,s._1)(t,"x","tf.grad","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grad"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(a)),[a],i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),h(n),n[0]}))}}function u(e){return o.hu(o.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,s.sI)(t,"args","tf.grads","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grads"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(...a)),a,i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(n),n}))}}function l(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{o.hu(t instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:i}=r.BV.gradients((()=>e(t)),[t],n);return h(s),{grad:s[0],value:i}}}function c(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t)&&t.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=r.BV.gradients((()=>e(...t)),t,n);return null!=n&&o.k5(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(s.grads),s}}function p(e,t){o.hu(o.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),o.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in r.BV.registeredVariables)t.push(r.BV.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,i=t.length;t=t.filter((e=>e.trainable)),o.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${i} variables is trainable.`));const{value:u,grads:l}=r.BV.gradients(e,t,null,!0);o.hu(l.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),o.hu(0===u.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=l[t]&&(c[e.name]=l[t])})),null!=s&&s.forEach((e=>c[e.name]=null)),{value:u,grads:c}}function d(e){return r.BV.customGrad(e)}function h(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},558:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>We.SY,Acos:()=>We.VG,Acosh:()=>We.Sp,AdadeltaOptimizer:()=>Lt,AdagradOptimizer:()=>zt,AdamOptimizer:()=>Gt,AdamaxOptimizer:()=>qt,Add:()=>We.mm,AddN:()=>We.Xz,All:()=>We.oT,Any:()=>We.IK,ArgMax:()=>We.sJ,ArgMin:()=>We.aJ,Asin:()=>We.M2,Asinh:()=>We.qw,Atan:()=>We.jM,Atan2:()=>We.QC,Atanh:()=>We.Oy,AvgPool:()=>We.Jh,AvgPool3D:()=>We._k,AvgPool3DGrad:()=>We.IM,AvgPoolGrad:()=>We.RO,BatchMatMul:()=>We.XL,BatchToSpaceND:()=>We.zw,Bincount:()=>We.zv,BroadcastTo:()=>We.Ly,Cast:()=>We.RF,Ceil:()=>We.gJ,ClipByValue:()=>We.xn,Complex:()=>We.Zz,ComplexAbs:()=>We.yj,Concat:()=>We.Eh,Conv2D:()=>We.mh,Conv2DBackpropFilter:()=>We.wU,Conv2DBackpropInput:()=>We.wm,Conv3D:()=>We.x1,Conv3DBackpropFilterV2:()=>We.o2,Conv3DBackpropInputV2:()=>We.ik,Cos:()=>We.mc,Cosh:()=>We.TR,CropAndResize:()=>We.Vc,Cumsum:()=>We.iH,DataStorage:()=>jn.JL,DenseBincount:()=>We.QR,DepthToSpace:()=>We.T0,DepthwiseConv2dNative:()=>We.ci,DepthwiseConv2dNativeBackpropFilter:()=>We.sL,DepthwiseConv2dNativeBackpropInput:()=>We.y7,Diag:()=>We.$w,Dilation2D:()=>We.p4,Dilation2DBackpropFilter:()=>We.Vn,Dilation2DBackpropInput:()=>We.ek,ENV:()=>x.Vi,Elu:()=>We.SX,EluGrad:()=>We.HE,Environment:()=>x.qA,Equal:()=>We.hd,Erf:()=>We.Om,Exp:()=>We.NE,ExpandDims:()=>We.YF,Expm1:()=>We.Y0,FFT:()=>We.vw,Fill:()=>We.de,FlipLeftRight:()=>We.Uy,Floor:()=>We.OR,FloorDiv:()=>We.je,FromPixels:()=>We.eB,FusedBatchNorm:()=>We.sH,FusedConv2D:()=>We._V,FusedDepthwiseConv2D:()=>We.lu,GatherNd:()=>We.q1,GatherV2:()=>We.qi,Greater:()=>We.iZ,GreaterEqual:()=>We.Ac,IFFT:()=>We.Qg,Identity:()=>We.iJ,Imag:()=>We.J_,IsFinite:()=>We.av,IsInf:()=>We.iW,IsNan:()=>We.r7,KernelBackend:()=>jn.Zu,LRN:()=>We.eZ,LRNGrad:()=>We.Hh,LeakyRelu:()=>We.J$,Less:()=>We.vt,LessEqual:()=>We.CA,LinSpace:()=>We.e7,Log:()=>We.Zb,Log1p:()=>We.kU,LogSoftmax:()=>We.qC,LogicalAnd:()=>We.PY,LogicalNot:()=>We.Vf,LogicalOr:()=>We.MZ,Max:()=>We.Yo,MaxPool:()=>We.mT,MaxPool3D:()=>We.OA,MaxPool3DGrad:()=>We.OU,MaxPoolGrad:()=>We.OV,MaxPoolWithArgmax:()=>We.vF,Maximum:()=>We.BM,Mean:()=>We.q2,Min:()=>We.c1,Minimum:()=>We.q8,MirrorPad:()=>We.jQ,Mod:()=>We.Vb,MomentumOptimizer:()=>Kt,Multinomial:()=>We.NZ,Multiply:()=>We.wY,Neg:()=>We.ku,NonMaxSuppressionV3:()=>We.uv,NonMaxSuppressionV4:()=>We.cy,NonMaxSuppressionV5:()=>We.W0,NotEqual:()=>We.yQ,OP_SCOPE_SUFFIX:()=>Zt.zvA,OneHot:()=>We.we,OnesLike:()=>We.qW,Optimizer:()=>Pt,Pack:()=>We.Qi,PadV2:()=>We.ly,Pool:()=>We.Kg,Pow:()=>We.pe,Prelu:()=>We.o0,Prod:()=>We.Dl,RMSPropOptimizer:()=>Yt,Range:()=>We.e6,Rank:()=>Qt.yw,Real:()=>We.xJ,RealDiv:()=>We.oH,Reciprocal:()=>We.$H,Reduction:()=>Jt.I,Relu:()=>We.qk,Relu6:()=>We.Sb,Reshape:()=>We.HZ,ResizeBilinear:()=>We._Y,ResizeBilinearGrad:()=>We.zb,ResizeNearestNeighbor:()=>We.dp,ResizeNearestNeighborGrad:()=>We.Hm,Reverse:()=>We.mK,RotateWithOffset:()=>We.b9,Round:()=>We.e0,Rsqrt:()=>We.bV,SGDOptimizer:()=>jt,ScatterNd:()=>We.xQ,Select:()=>We.Ph,Selu:()=>We.oF,Sigmoid:()=>We.a5,Sign:()=>We.i5,Sin:()=>We.RQ,Sinh:()=>We.w3,Slice:()=>We.p2,Softmax:()=>We.Gc,Softplus:()=>We.MR,SpaceToBatchND:()=>We.TQ,SparseToDense:()=>We.D2,SplitV:()=>We.L8,Sqrt:()=>We.FK,Square:()=>We.bK,SquaredDifference:()=>We._t,Step:()=>We.h8,StridedSlice:()=>We.m2,Sub:()=>We.Tr,Sum:()=>We.GB,Tan:()=>We.sE,Tanh:()=>We.MI,Tensor:()=>xe.es,TensorBuffer:()=>xe.YD,Tile:()=>We.n9,TopK:()=>We.cW,Transpose:()=>We.G3,Unique:()=>We.kp,Unpack:()=>We.To,UnsortedSegmentSum:()=>We.Qv,Variable:()=>xe._w,ZerosLike:()=>We.Ru,_FusedMatMul:()=>We.us,abs:()=>Zt.WnP,acos:()=>Zt.Khb,acosh:()=>Zt.__u,add:()=>Zt.IHx,addN:()=>Zt.QBD,addStrict:()=>Zt.zqr,all:()=>Zt.$6P,any:()=>Zt.YjB,argMax:()=>Zt.NqF,argMin:()=>Zt.vHJ,asin:()=>Zt.ZRM,asinh:()=>Zt.VfV,atan:()=>Zt.z4N,atan2:()=>Zt.fvJ,atanh:()=>Zt.C80,avgPool:()=>Zt.wS1,avgPool3d:()=>Zt.uR5,backend:()=>Et.y3,backend_util:()=>d,basicLSTMCell:()=>Zt.zEQ,batchNorm:()=>Zt.tgs,batchNorm2d:()=>Zt.Dxk,batchNorm3d:()=>Zt.JY5,batchNorm4d:()=>Zt.p3b,batchToSpaceND:()=>Zt.E4h,bincount:()=>Zt.yE8,booleanMaskAsync:()=>Zt.anm,broadcastTo:()=>Zt.UFq,browser:()=>o,buffer:()=>Zt.f3b,cast:()=>Zt.pju,ceil:()=>Zt.mDi,clipByValue:()=>Zt.iUl,clone:()=>Zt.d9v,complex:()=>Zt.PYB,concat:()=>Zt.zoF,concat1d:()=>Zt.gME,concat2d:()=>Zt.Izb,concat3d:()=>Zt.MNy,concat4d:()=>Zt.ZaL,conv1d:()=>Zt.PAt,conv2d:()=>Zt.Tek,conv2dTranspose:()=>Zt.bc,conv3d:()=>Zt.pdZ,conv3dTranspose:()=>Zt.$QV,copyRegisteredKernels:()=>Ue.T3,cos:()=>Zt.mCk,cosh:()=>Zt.f9Y,cosineWindow:()=>Zt.mew,cumsum:()=>Zt.zbp,customGrad:()=>Bt.cb,denseBincount:()=>Zt.ppE,deprecationWarn:()=>Et.MX,depthToSpace:()=>Zt.nTT,depthwiseConv2d:()=>Zt.B10,device_util:()=>r,diag:()=>Zt.Ka3,dilation2d:()=>Zt.WmZ,disableDeprecationWarnings:()=>Et.cF,dispose:()=>Et.B9,disposeVariables:()=>Et.N8,div:()=>Zt.hiC,divNoNan:()=>Zt.NTj,divStrict:()=>Zt.sz_,dot:()=>Zt.AKD,dropout:()=>Zt.rvX,elu:()=>Zt.pyx,enableDebugMode:()=>Et.R,enableProdMode:()=>Et.G4,enclosingPowerOfTwo:()=>Zt.GRh,engine:()=>Et.SR,env:()=>x.OB,equal:()=>Zt.DgJ,equalStrict:()=>Zt.zVC,erf:()=>Zt.qNN,exp:()=>Zt.Qqt,expandDims:()=>Zt.dt4,expm1:()=>Zt.t$B,eye:()=>Zt.iyy,fft:()=>Zt.kp_,fill:()=>Zt.hlL,findBackend:()=>Et.x3,findBackendFactory:()=>Et.ze,floor:()=>Zt.GWj,floorDiv:()=>Zt.qPi,fused:()=>Zt.imm,gather:()=>Zt.Iqj,gatherND:()=>Zt.dbB,gather_util:()=>i,getBackend:()=>Et.N_,getGradient:()=>Ue.uk,getKernel:()=>Ue.pI,getKernelsForBackend:()=>Ue.tr,grad:()=>Bt.UQ,grads:()=>Bt.ti,greater:()=>Zt.pjt,greaterEqual:()=>Zt.brS,greaterEqualStrict:()=>Zt.bZ8,greaterStrict:()=>Zt.g1k,ifft:()=>Zt.Sxn,imag:()=>Zt.asL,image:()=>Zt.BHj,inTopKAsync:()=>Zt.V3u,io:()=>a,irfft:()=>Zt.wx0,isFinite:()=>Zt.xVT,isInf:()=>Zt.UWc,isNaN:()=>Zt.i2d,keep:()=>Et.Cn,kernel_impls:()=>h,leakyRelu:()=>Zt.hi7,less:()=>Zt.d9m,lessEqual:()=>Zt.zN1,lessEqualStrict:()=>Zt.SFm,lessStrict:()=>Zt.O_u,linalg:()=>Zt.$r2,linspace:()=>Zt.SX3,localResponseNormalization:()=>Zt.G9k,log:()=>Zt.cM7,log1p:()=>Zt.Krr,logSigmoid:()=>Zt.e_t,logSoftmax:()=>Zt.CmS,logSumExp:()=>Zt.l_t,logicalAnd:()=>Zt.HvI,logicalNot:()=>Zt.hJK,logicalOr:()=>Zt.K5V,logicalXor:()=>Zt.egP,losses:()=>Zt.MB5,matMul:()=>Zt.OI3,math:()=>s,max:()=>Zt.Fp7,maxPool:()=>Zt._sB,maxPool3d:()=>Zt.YQQ,maxPoolWithArgmax:()=>Zt.Ip$,maximum:()=>Zt.gWQ,maximumStrict:()=>Zt._jk,mean:()=>Zt.J69,memory:()=>Et.sq,min:()=>Zt.VV$,minimum:()=>Zt.LTh,minimumStrict:()=>Zt.Wzl,mirrorPad:()=>Zt.VdP,mod:()=>Zt.wQq,modStrict:()=>Zt.IrJ,moments:()=>Zt.Gi7,movingAverage:()=>Zt.p_,mul:()=>Zt.dC7,mulStrict:()=>Zt.NT4,multiRNNCell:()=>Zt.rq4,multinomial:()=>Zt.SJ_,neg:()=>Zt.W76,nextFrame:()=>rn,norm:()=>Zt.KOy,notEqual:()=>Zt.Quu,notEqualStrict:()=>Zt.FGK,oneHot:()=>Zt.lfX,ones:()=>Zt.iUs,onesLike:()=>Zt.JpU,op:()=>Zt.op,outerProduct:()=>Zt.N2O,pad:()=>Zt.vku,pad1d:()=>Zt.pNR,pad2d:()=>Zt.koy,pad3d:()=>Zt.t1L,pad4d:()=>Zt.lGY,pool:()=>Zt.d_R,pow:()=>Zt.sQ3,powStrict:()=>Zt.Lfl,prelu:()=>Zt.AL3,print:()=>Zt.S0v,prod:()=>Zt.WVs,profile:()=>Et.N5,rand:()=>Zt.TN_,randomGamma:()=>Zt.wzB,randomNormal:()=>Zt.nGf,randomUniform:()=>Zt.LGj,range:()=>Zt.w6H,ready:()=>Et.Cd,real:()=>Zt.kwC,reciprocal:()=>Zt.M25,registerBackend:()=>Et.jq,registerGradient:()=>Ue.Li,registerKernel:()=>Ue.wC,relu:()=>Zt.UYe,relu6:()=>Zt.btT,removeBackend:()=>Et.cj,reshape:()=>Zt.XLQ,reverse:()=>Zt.GYS,reverse1d:()=>Zt.SDf,reverse2d:()=>Zt.diP,reverse3d:()=>Zt.sx7,reverse4d:()=>Zt.mG2,rfft:()=>Zt.QEs,round:()=>Zt.NMM,rsqrt:()=>Zt.bp0,scalar:()=>Zt.iD$,scatterND:()=>Zt.snQ,scatter_util:()=>Ke,selu:()=>Zt.U8D,separableConv2d:()=>Zt.U_I,serialization:()=>l,setBackend:()=>Et.CQ,setPlatform:()=>Et.VY,setdiff1dAsync:()=>Zt.ODp,sigmoid:()=>Zt.XD2,sign:()=>Zt.Xxe,signal:()=>Zt.tdS,sin:()=>Zt.O$l,sinh:()=>Zt.R_K,slice:()=>Zt.tPi,slice1d:()=>Zt.jZU,slice2d:()=>Zt.SmN,slice3d:()=>Zt.CnO,slice4d:()=>Zt.p0P,slice_util:()=>u,softmax:()=>Zt.XAC,softplus:()=>Zt.Wvh,spaceToBatchND:()=>Zt.fBT,sparseToDense:()=>Zt.ers,spectral:()=>Zt.uN7,split:()=>Zt.Vl2,sqrt:()=>Zt._b3,square:()=>Zt.h62,squaredDifference:()=>Zt.$i,squaredDifferenceStrict:()=>Zt.r7z,squeeze:()=>Zt.L9e,stack:()=>Zt.knu,step:()=>Zt.Nbs,stridedSlice:()=>Zt.NXj,sub:()=>Zt.luU,subStrict:()=>Zt.ULw,sum:()=>Zt.Smz,sumOutType:()=>Qt.z4,tan:()=>Zt.ORZ,tanh:()=>Zt.AEp,tensor:()=>Zt.XeE,tensor1d:()=>Zt.RRF,tensor2d:()=>Zt.odF,tensor3d:()=>Zt.wOQ,tensor4d:()=>Zt.yXz,tensor5d:()=>Zt.Bfx,tensor6d:()=>Zt.xZs,tensor_util:()=>mt,test_util:()=>c,tidy:()=>Et.lu,tile:()=>Zt.Gg6,time:()=>Et.XV,topk:()=>Zt.hg7,train:()=>tn,transpose:()=>Zt.p4s,truncatedNormal:()=>Zt.Xu6,unique:()=>Zt.Two,unregisterGradient:()=>Ue.bt,unregisterKernel:()=>Ue.nE,unsortedSegmentSum:()=>Zt.pUJ,unstack:()=>Zt.HHK,upcastType:()=>Qt.x8,util:()=>gt,valueAndGrad:()=>Bt.h7,valueAndGrads:()=>Bt.fN,variable:()=>Zt.VD$,variableGrads:()=>Bt.pn,version_core:()=>Ct,where:()=>Zt.arb,whereAsync:()=>Zt.itS,zeros:()=>Zt.lls,zerosLike:()=>Zt.P84});var r={};n.r(r),n.d(r,{isBrowser:()=>g,isMobile:()=>m});var a={};n.r(a),n.d(a,{browserFiles:()=>ke,browserHTTPRequest:()=>Re,concatenateArrayBuffers:()=>C,copyModel:()=>le,decodeWeights:()=>I,encodeWeights:()=>S,fromMemory:()=>Oe,getLoadHandlers:()=>B,getModelArtifactsInfoForJSON:()=>_,getSaveHandlers:()=>F,http:()=>_e,isHTTPScheme:()=>Ce,listModels:()=>ie,loadWeights:()=>Ne,moveModel:()=>ce,registerLoadRouter:()=>O,registerSaveRouter:()=>D,removeModel:()=>ue,weightsLoaderFactory:()=>$e,withSaveHandler:()=>Fe});var s={};n.r(s),n.d(s,{confusionMatrix:()=>ze});var o={};n.r(o),n.d(o,{fromPixels:()=>qe,toPixels:()=>He});var i={};n.r(i),n.d(i,{prepareAndValidate:()=>je});var u={};n.r(u),n.d(u,{assertParamsValid:()=>Ye,computeFlatOffset:()=>lt,computeOutShape:()=>Ze,getNormalizedAxes:()=>nt,isSliceContinous:()=>ut,maskToAxes:()=>Qe,parseSliceParams:()=>ct,sliceInfo:()=>pt,startForAxis:()=>ot,startIndicesWithElidedDims:()=>rt,stopForAxis:()=>it,stopIndicesWithElidedDims:()=>at,stridesForAxis:()=>st,stridesWithElidedDims:()=>Je});var l={};n.r(l),n.d(l,{Serializable:()=>dt,SerializationMap:()=>ht,registerClass:()=>ft});var c={};n.r(c),n.d(c,{TEST_EPSILON_FLOAT16:()=>xt,encodeStrings:()=>Tt,expectArrayBuffersEqual:()=>$t,expectArraysClose:()=>yt,expectArraysEqual:()=>kt,expectNumbersClose:()=>St,expectPromiseToFail:()=>wt,expectValuesInRange:()=>Nt,testEpsilon:()=>bt});var p={};n.r(p),n.d(p,{collectGatherOpShapeInfo:()=>zn,computeOutShape:()=>Vn,segOpComputeOptimalWindowSize:()=>Ln});var d={};n.r(d),n.d(d,{ERF_A1:()=>Sn,ERF_A2:()=>In,ERF_A3:()=>Nn,ERF_A4:()=>$n,ERF_A5:()=>Tn,ERF_P:()=>kn,PARALLELIZE_THRESHOLD:()=>dn,SELU_SCALE:()=>wn,SELU_SCALEALPHA:()=>vn,applyActivation:()=>pn.QH,assertAndGetBroadcastShape:()=>on.$N,assertAxesAreInnerMostDims:()=>sn.lB,assertParamsConsistent:()=>un,assignToTypedArray:()=>Fn,axesAreInnerMostDims:()=>sn.YB,calculateShapes:()=>Ke.calculateShapes,castTensor:()=>Wn,combineLocations:()=>sn.Vh,complexWithEvenIndex:()=>An,complexWithOddIndex:()=>Dn,computeConv2DInfo:()=>cn.Ix,computeConv3DInfo:()=>cn.jw,computeDefaultPad:()=>cn.aO,computeDilation2DInfo:()=>cn.Rf,computeOptimalWindowSize:()=>hn,computeOutAndReduceShapes:()=>sn.kz,computeOutShape:()=>ln,computePool2DInfo:()=>cn.Xw,computePool3DInfo:()=>cn.pl,convertConv2DDataFormat:()=>cn.sl,eitherStridesOrDilationsAreOne:()=>cn.jT,expandShapeToKeepDim:()=>sn.rv,exponent:()=>Mn,exponents:()=>Bn,fromStringArrayToUint8:()=>Xn,fromUint8ToStringArray:()=>Gn,getAxesPermutation:()=>sn.Q3,getBroadcastDims:()=>on.XF,getComplexWithIndex:()=>On,getFusedBiasGradient:()=>pn.pf,getFusedDyActivation:()=>pn.Fr,getImageCenter:()=>fn,getInnerMostAxes:()=>sn.sY,getPermuted:()=>gn,getReductionAxes:()=>on.RR,getReshaped:()=>mn,getReshapedPermuted:()=>xn,getSliceBeginCoords:()=>yn,getSliceSize:()=>bn,getUndoAxesPermutation:()=>sn.LJ,log:()=>En,mergeRealAndImagArrays:()=>_n,prepareAndValidate:()=>je,prepareSplitSize:()=>Pn,reshapeTensor:()=>Un,segment_util:()=>p,shouldFuse:()=>pn.uy,slice_util:()=>u,splitRealAndImagArrays:()=>Rn,tupleValuesAreOne:()=>cn.I0,upcastType:()=>Qt.x8,validateInput:()=>Ke.validateInput,validateUpdateShape:()=>Ke.validateUpdateShape,warn:()=>Cn});var h={};n.r(h),n.d(h,{nonMaxSuppressionV3Impl:()=>Hn.GP,nonMaxSuppressionV4Impl:()=>Hn.qP,nonMaxSuppressionV5Impl:()=>Hn.pA,whereImpl:()=>qn.Z});var f=n(7097);function m(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function g(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var x=n(2885);const y=(0,x.OB)();y.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),y.registerFlag("IS_BROWSER",(()=>g())),y.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),y.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),y.registerFlag("PROD",(()=>!1)),y.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>y.getBool("DEBUG"))),y.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),y.registerFlag("IS_TEST",(()=>!1)),y.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));var b=n(1661),v=n(701),w=n(569);const k={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function S(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:N(await Promise.all(r)),specs:n}}function I(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=(0,w.NA)(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=k[n.dtype],c=e.slice(a,a+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=R()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}a+=u*i}else if("string"===o){const t=(0,w.NA)(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=k[o],s=e.slice(a,a+u*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=(0,v.X)(e,i,"float32"),o=(0,v.X)(r,i,"float32");n[t]=(0,b.P)(a,o),a.dispose(),o.dispose()}}a+=u*r}"complex64"!==o&&(n[t]=(0,v.X)(l,i,o))}return n}function N(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const $="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function T(e){return $?Buffer.byteLength(e):new Blob([e]).size}function C(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function E(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function _(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:T(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:T(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function R(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class A{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==A.instance&&(A.instance=new A),A.instance}static registerSaveRouter(e){A.getInstance().saveRouters.push(e)}static registerLoadRouter(e){A.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return A.getHandlers(e,"save")}static getLoadHandlers(e,t){return A.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?A.getInstance().loadRouters:A.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const D=e=>A.registerSaveRouter(e),O=e=>A.registerLoadRouter(e),F=e=>A.getSaveHandlers(e),B=(e,t)=>A.getLoadHandlers(e,t),M="tensorflowjs",P="models_store",L="model_info_store";function V(){if(!(0,x.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function z(e){const t=e.result;t.createObjectStore(P,{keyPath:"modelPath"}),t.createObjectStore(L,{keyPath:"modelPath"})}class W{constructor(e){if(this.indexedDB=V(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(M,1);r.onupgradeneeded=()=>z(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(P,"readonly"),r=t.objectStore(P).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=_(t),s=a.transaction(L,"readwrite");let o=s.objectStore(L);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction(P,"readwrite");const i=u.objectStore(P).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(L);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}W.URL_SCHEME="indexeddb://";const U=e=>{return(0,x.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(W.URL_SCHEME)?(t=e.slice(W.URL_SCHEME.length),new W(t)):null;var t};A.registerSaveRouter(U),A.registerLoadRouter(U);class G{constructor(){this.indexedDB=V()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(M,1);n.onupgradeneeded=()=>z(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(L,"readonly"),s=a.objectStore(L).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(W.URL_SCHEME)?t.slice(W.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(M,1);r.onupgradeneeded=()=>z(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(L,"readwrite"),o=s.objectStore(L),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{u=a.transaction(P,"readwrite");const r=u.objectStore(P).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const X="/",H="tensorflowjs_models",q="info",j="model_topology",K="weight_specs",Y="weight_data",Q="model_metadata";function Z(e){return{info:[H,e,q].join(X),topology:[H,e,j].join(X),weightSpecs:[H,e,K].join(X),weightData:[H,e,Y].join(X),modelMetadata:[H,e,Q].join(X)}}function J(e){const t=e.split(X);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(X)}class ee{constructor(e){if(!(0,x.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Z(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=_(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if($)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if($){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}ee.URL_SCHEME="localstorage://";const te=e=>{return(0,x.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ee.URL_SCHEME)?(t=e.slice(ee.URL_SCHEME.length),new ee(t)):null;var t};A.registerSaveRouter(te),A.registerLoadRouter(te);class ne{constructor(){(0,w.hu)((0,x.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,w.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=H+X,n=X+q;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);a.startsWith(t)&&a.endsWith(n)&&(e[J(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=Z(e=(t=e).startsWith(ee.URL_SCHEME)?t.slice(ee.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const re="://";class ae{constructor(){this.managers={}}static getInstance(){return null==ae.instance&&(ae.instance=new ae),ae.instance}static registerManager(e,t){(0,w.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(re)&&(e=e.slice(0,e.indexOf(re))),(0,w.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=ae.getInstance();(0,w.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function se(e){if(-1===e.indexOf(re))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ae.getSchemes().join(",")}`);return{scheme:e.split(re)[0],path:e.split(re)[1]}}async function oe(e,t,n=!1){(0,w.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=A.getLoadHandlers(e);(0,w.hu)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,w.hu)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=A.getSaveHandlers(t);(0,w.hu)(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,w.hu)(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],i=se(e).scheme,u=se(e).path,l=i===se(e).scheme,c=await a.load();n&&l&&await ae.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await ae.getManager(i).removeModel(u),p.modelArtifactsInfo}async function ie(){const e=ae.getSchemes(),t={};for(const n of e){const e=await ae.getManager(n).listModels();for(const r in e)t[n+re+r]=e[r]}return t}async function ue(e){const t=se(e);return ae.getManager(t.scheme).removeModel(t.path)}async function le(e,t){return oe(e,t,!1)}async function ce(e,t){return oe(e,t,!0)}class pe{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if((0,x.OB)().get("IS_BROWSER")){(0,x.OB)().setPlatform("browser",new pe);try{ae.registerManager(ee.URL_SCHEME,new ne)}catch(e){}try{ae.registerManager(W.URL_SCHEME,new G)}catch(e){}}let de;(0,x.OB)().get("IS_NODE")&&(0,x.OB)().setPlatform("node",new class{constructor(){this.util=n(8628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,x.OB)().global.fetch?(0,x.OB)().global.fetch(e,t):(null==de&&(de=n(5410)),de(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});var he=n(2657),fe=n(2271),me=n(8723),ge=n(9798),xe=n(4077);(0,f.wv)();const ye={buffer:he.f,cast:fe.p,clone:me.d,print:ge.S};function be(e){return new Promise((e=>setTimeout(e))).then(e)}(0,xe.Vp)(ye);class ve{constructor(e){if(!(0,x.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ve.URL_SCHEME)&&(e=e.slice(ve.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer);const a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=a,await be((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await be((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:_(e)}}}}ve.URL_SCHEME="downloads://";class we{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,r)=>{const a=new FileReader;a.onload=a=>{const s=JSON.parse(a.target.result),o=s.modelTopology;if(null==o)return void r(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:o});const i=s.weightsManifest;if(null==i)return void r(new Error(`weightManifest field is missing from file ${e.name}`));let u;try{u=this.checkManifestAndWeightFiles(i,t)}catch(e){return void r(e)}const l=[],c=[],p=[];i.forEach((e=>{e.paths.forEach((e=>{c.push(e),p.push(null)})),l.push(...e.weights)})),i.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,a=c.indexOf(e);if(p[a]=r,-1===p.indexOf(null)){const e={modelTopology:o,weightSpecs:l,weightData:C(p),format:s.format,generatedBy:s.generatedBy,convertedBy:s.convertedBy};null!=s.signature&&(e.signature=s.signature),null!=s.userDefinedMetadata&&(e.userDefinedMetadata=s.userDefinedMetadata),null!=s.modelInitializer&&(e.modelInitializer=s.modelInitializer),n(e)}},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(u[e])}))}))},a.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),a.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],r=t.map((e=>E(e.name))),a={};for(const s of e)s.paths.forEach((e=>{const s=E(e);if(-1!==n.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(n.push(s),-1===r.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);a[e]=t[r.indexOf(s)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return a}}function ke(e){return new we(e)}function Se(e,t,n,r){!function(e){(0,w.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,w.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,w.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,w.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map((s=>(s.then((s=>{const o=n+ ++a/e.length*(r-n);return t(o),s})),s))))}async function Ie(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,x.OB)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await Se(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await Se(a,t.onProgress,.5,1)}async function Ne(e,t="",n,r){return $e((e=>Ie(e,{requestInit:r})))(e,t,n)}function $e(e){return async(t,n="",r)=>{const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=k[u]*w.NA(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let d=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[d+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[d+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=I(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),d+=n})),p}}A.registerSaveRouter((e=>(0,x.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ve.URL_SCHEME)?function(e="model"){return new ve(e)}(e.slice(ve.URL_SCHEME.length)):null));class Te{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,w.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,x.OB)().platform.fetch,(0,w.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,w.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:_(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,a=t.generatedBy,s=t.convertedBy,o=t.format,i=t.signature,u=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,c;if(null!=r){const e=await this.loadWeights(r);[l,c]=e}const p={modelTopology:n,weightSpecs:l,weightData:c,generatedBy:a,convertedBy:s,format:o};null!=i&&(p.signature=i),null!=u&&(p.userDefinedMetadata=u);const d=t.modelInitializer;return d&&(p.modelInitializer=d),p}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,s=[];for(const t of e)s.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[s,C(await Ie(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ce(e){return null!=e.match(Te.URL_SCHEME_REGEX)}Te.URL_SCHEME_REGEX=/^https?:\/\//;const Ee=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Ce(e))):Ce(e),n)return _e(e,t)}return null};function _e(e,t){return new Te(e,t)}function Re(e,t){return _e(e,t)}A.registerSaveRouter(Ee),A.registerLoadRouter(Ee);class Ae{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class De{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Oe(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Ae(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ae({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ae({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function Fe(e){return new De(e)}var Be=n(3740),Me=n(8687),Pe=n(6708),Le=n(2668),Ve=n(9065);const ze=(0,Le.op)({confusionMatrix_:function(e,t,n){const r=(0,Be._1)(e,"labels","confusionMatrix"),a=(0,Be._1)(t,"predictions","confusionMatrix");w.hu(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),w.hu(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),w.hu(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),w.hu(r.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),w.hu(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=(0,Pe.l)((0,fe.p)(r,"int32"),n),o=(0,Pe.l)((0,fe.p)(a,"int32"),n),i=(0,Ve.p)(s),u=(0,Me.O)(i,o);return(0,fe.p)(u,"int32")}});var We=n(9121),Ue=n(6151),Ge=n(9906);let Xe;async function He(e,t){let n=(0,Be._1)(e,"img","toPixels");if(!(e instanceof xe.es)){const e=n;n=(0,fe.p)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const qe=(0,Le.op)({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=(0,Ue.pI)(We.eB,f.BV.backendName)){const n={pixels:e},r={numChannels:t};return f.BV.runKernel(We.eB,n,r)}const[u,l]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o?c=e.getContext("2d").getImageData(0,0,u,l).data:r||n?c=e.data:(s||a||i)&&(null==Xe&&(Xe=document.createElement("canvas").getContext("2d")),Xe.canvas.width=u,Xe.canvas.height=l,Xe.drawImage(e,0,0,u,l),c=Xe.getImageData(0,0,u,l).data),4===t)p=new Int32Array(c);else{const e=u*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}const d=[l,u,t];return(0,Ge.w)(p,d,"int32")}});function je(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===(0,w.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,u=a.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=i[e],u.push(i[e]);const c=[...(0,w.e3)(e.shape).map((e=>e/l)),1].slice(0,s);return[u,o,l,c]}var Ke=n(3028);function Ye(e,t,n){const r=e.shape.length;w.hu(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),w.hu(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)w.hu(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function Qe(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Ze(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function Je(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function et(e,t,n){return n<=e?n:n-(t-1)}function tt(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function nt(e,t,n,r,a,s,o,i,u){const l=e.length;let c=new Array(l),p=new Array(l),d=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=rt(o,u,l,r,e),p=at(i,u,l,a,e),d=Je(s,u,l,e)}else for(let t=0;t<l;t++)c[t]=ot(o,r,s,e,t,u),p[t]=it(i,a,s,e,t,u),d[t]=st(s,t,u);return{begin:c,end:p,strides:d}}function rt(e,t,n,r,a){const s=[...a],o=tt(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=et(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function at(e,t,n,r,a){const s=[...a],o=tt(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{const o=et(t,n,a);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),s[a]=i}for(let e=0;e<s.length;e++){const t=a[e];s[e]<0&&(s[e]+=t),s[e]=w.uZ(0,s[e],a[e])}return s}function st(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ot(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=w.uZ(0,o,u-1),o}function it(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=i>0?w.uZ(0,o,u):w.uZ(-1,o,u-1),o}function ut(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function lt(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function ct(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{w.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(w.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,s]}function pt(e,t,n,r,a,s,o,i,u){let l=t.slice(),c=n.slice(),p=r;null==r&&(p=new Array(l.length));const d=Qe(o);if(d.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=e.length-l.length,f=Qe(i),m=e.slice();f.forEach((e=>{l[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:x,strides:y}=nt(m,d,h,l,c,p,a,s,o);l=g,c=x,p=y;const b=Qe(u);b.forEach((e=>{c[e]=l[e]+1,p[e]=1}));const v=Ze(l,c,p),w=v.filter(((e,t)=>-1===b.indexOf(t)));return{nonStrided:p.every((e=>1===e)),$begin:l,$end:c,$strides:p,size:v,newShape:m,outShape:w}}class dt{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ht{constructor(){this.classNameMap={}}static getMap(){return null==ht.instance&&(ht.instance=new ht),ht.instance}static register(e){ht.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function ft(e){(0,w.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,w.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,w.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ht.register(e)}var mt=n(747),gt=n(9155);const xt=.1;function yt(e,t,n){return null==n&&(n=bt()),vt(e,t,((e,t)=>It(e,t,n)))}function bt(){return 32===f.BV.backend.floatPrecision()?.001:xt}function vt(e,t,n){let r=!0;if(((0,w.fU)(e)||(0,w.fU)(t))&&(r=!1),(0,w.fU)(e)&&(0,w.fU)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,Be.C)(e),r=(0,Be.C)(t);if(!(0,w.cO)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const a=(0,w.fU)(e)?e:(0,w.xH)(e),s=(0,w.fU)(t)?t:(0,w.xH)(t);if(a.length!==s.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.\nActual:   ${a}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=a[e],r=s[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${a}.\nExpected: ${s}.`)}}function wt(e,t){e().then((()=>t.fail()),(()=>t()))}function kt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,w.HD)(e)||(0,w.HD)(e[0])||(0,w.HD)(t)||(0,w.HD)(t[0])?vt(e,n,((e,t)=>e==t)):vt(e,t,((e,t)=>It(e,t,0)))}function St(e,t,n){if(null==n&&(n=bt()),!It(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function It(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Nt(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function $t(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function Tt(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Tt(n):e[t]=(0,gt.encodeString)(n)}return e}const Ct="2.8.6";var Et=n(4368),_t=n(6407),Rt=n(1274),At=n(4841),Dt=n(3261),Ot=n(248),Ft=n(6577),Bt=n(633),Mt=n(9494);class Pt extends dt{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,Et.B9)(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,Bt.pn)(e,t)}dispose(){null!=this.iterations_&&(0,Et.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Mt.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Pt,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Lt extends Pt{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,Et.lu)((()=>(0,Ft.P)(r).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,Et.lu)((()=>(0,Ft.P)(r).variable(!1)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;(0,Et.lu)((()=>{const e=(0,_t.I)((0,At.d)(s,this.rho),(0,At.d)((0,Ot.h)(a),1-this.rho)),t=(0,At.d)((0,Rt.h)((0,Dt._)((0,_t.I)(o,this.epsilon)),(0,Dt._)((0,_t.I)(s,this.epsilon))),a),n=(0,_t.I)((0,At.d)(o,this.rho),(0,At.d)((0,Ot.h)(t),1-this.rho));s.assign(e),o.assign(n);const i=(0,_t.I)((0,At.d)(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,Et.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,Et.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Lt.className="Adadelta",ft(Lt);var Vt=n(4006);class zt extends Pt{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,Et.lu)((()=>(0,Vt.h)(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;(0,Et.lu)((()=>{const e=(0,_t.I)(s,(0,Ot.h)(a));s.assign(e);const t=(0,_t.I)((0,At.d)((0,Rt.h)(a,(0,Dt._)((0,_t.I)(e,f.BV.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,Et.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}zt.className="Adagrad",ft(zt);var Wt=n(3453),Ut=n(827);class Gt extends Pt{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,Et.lu)((()=>{this.accBeta1=(0,Mt.i)(t).variable(),this.accBeta2=(0,Mt.i)(n).variable()})),null==r&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Et.lu)((()=>{const n=(0,Ut.l)(1,this.accBeta1),r=(0,Ut.l)(1,this.accBeta2);t.forEach(((t,a)=>{const s=f.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Et.lu)((()=>(0,Ft.P)(s).variable(!1)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:(0,Et.lu)((()=>(0,Ft.P)(s).variable(!1)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedSecondMoment[a].variable,l=(0,_t.I)((0,At.d)(i,this.beta1),(0,At.d)(o,1-this.beta1)),c=(0,_t.I)((0,At.d)(u,this.beta2),(0,At.d)((0,Ot.h)(o),1-this.beta2)),p=(0,Rt.h)(l,n),d=(0,Rt.h)(c,r);i.assign(l),u.assign(c);const h=(0,_t.I)((0,At.d)((0,Rt.h)(p,(0,_t.I)((0,Dt._)(d),this.epsilon)),-this.learningRate),s);s.assign(h)})),this.accBeta1.assign((0,At.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,At.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,Et.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,Et.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,Et.lu)((()=>{this.accBeta1.assign((0,Wt.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,Wt.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Gt.className="Adam",ft(Gt);var Xt=n(6235),Ht=n(632);class qt extends Pt{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,Et.lu)((()=>{this.iteration=(0,Mt.i)(0).variable(),this.accBeta1=(0,Mt.i)(t).variable()})),null==r&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Et.lu)((()=>{const n=(0,Ut.l)(1,this.accBeta1),r=(0,Rt.h)(-this.learningRate,(0,_t.I)((0,At.d)(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=f.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Ft.P)(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:(0,Ft.P)(s).variable(!1)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedWeightedInfNorm[a].variable,l=(0,_t.I)((0,At.d)(i,this.beta1),(0,At.d)(o,1-this.beta1)),c=(0,At.d)(u,this.beta2),p=(0,Xt.W)(o),d=(0,Ht.g)(c,p);i.assign(l),u.assign(d);const h=(0,_t.I)((0,At.d)((0,Rt.h)(r,n),(0,Rt.h)(l,(0,_t.I)(d,this.epsilon))),s);s.assign(h)})),this.iteration.assign((0,_t.I)(this.iteration,1)),this.accBeta1.assign((0,At.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,Et.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,Et.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}qt.className="Adamax",ft(qt);class jt extends Pt{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=f.BV.registeredVariables[t];(0,Et.lu)((()=>{const e=(0,_t.I)((0,At.d)(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,Et.Cn)((0,Mt.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}jt.className="SGD",ft(jt);class Kt extends jt{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Mt.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,Et.lu)((()=>(0,Ft.P)(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&(0,Et.lu)((()=>{let e;const t=(0,_t.I)((0,At.d)(this.m,a),s);e=this.useNesterov?(0,_t.I)((0,At.d)(this.c,(0,_t.I)(s,(0,At.d)(t,this.m))),r):(0,_t.I)((0,At.d)(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,Et.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Kt.className="Momentum",ft(Kt);class Yt extends Pt{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=f.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,Et.lu)((()=>(0,Ft.P)(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,Et.lu)((()=>(0,Ft.P)(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,Et.lu)((()=>(0,Ft.P)(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;(0,Et.lu)((()=>{const e=(0,_t.I)((0,At.d)(o,this.decay),(0,At.d)((0,Ot.h)(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=(0,_t.I)((0,At.d)(t,this.decay),(0,At.d)(s,1-this.decay)),u=(0,Rt.h)((0,At.d)(s,this.learningRate),(0,Dt._)((0,Ut.l)(e,(0,_t.I)((0,Ot.h)(a),this.epsilon)))),l=(0,_t.I)((0,At.d)(i,this.momentum),u);o.assign(e),t.assign(a),i.assign(l);const c=(0,Ut.l)(r,l);r.assign(c)}else{const e=(0,_t.I)((0,At.d)(o,this.decay),(0,At.d)((0,Ot.h)(s),1-this.decay)),t=(0,_t.I)((0,At.d)(i,this.momentum),(0,Rt.h)((0,At.d)(s,this.learningRate),(0,Dt._)((0,_t.I)(e,this.epsilon))));o.assign(e),i.assign(t);const n=(0,Ut.l)(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,Et.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,Et.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,Et.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Yt.className="RMSProp",ft(Yt);var Qt=n(1221),Zt=n(1395),Jt=n(9876);class en{static sgd(e){return new jt(e)}static momentum(e,t,n=!1){return new Kt(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new Yt(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new Gt(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Lt(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new qt(e,t,n,r,a)}static adagrad(e,t=.1){return new zt(e,t)}}const tn={sgd:en.sgd,momentum:en.momentum,adadelta:en.adadelta,adagrad:en.adagrad,rmsprop:en.rmsprop,adamax:en.adamax,adam:en.adam},nn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function rn(){return new Promise((e=>nn((()=>e()))))}var an=n(9640),sn=n(3591),on=n(2200);function un(e,t){const n=e[0].length;e.forEach(((e,t)=>{w.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),w.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)w.hu(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function ln(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var cn=n(2582),pn=n(9323);const dn=30;function hn(e){return e<=dn?e:(0,w.jP)(e,Math.floor(Math.sqrt(e)))}function fn(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function mn(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function gn(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function xn(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function yn(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function bn(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}const vn=1.7580993408473768,wn=1.0507009873554805,kn=.3275911,Sn=.254829592,In=-.284496736,Nn=1.421413741,$n=-1.453152027,Tn=1.061405429;function Cn(...e){(0,x.OB)().getBool("IS_TEST")||console.warn(...e)}function En(...e){(0,x.OB)().getBool("IS_TEST")||console.log(...e)}function _n(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Rn(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function An(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Dn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function On(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Fn(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Bn(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function Mn(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}function Pn(e,t,n=0){let r=[];if("number"==typeof t)(0,w.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,w.hu)(a<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}(0,w.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Ln(e,t){let n,r=!1;for(e<=dn?(n=e,r=!0):n=(0,w.jP)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=(0,w.jP)(e,n+1);return n}function Vn(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function zn(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}function Wn(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=(0,an.l)(e.shape),r=(0,fe.p)(e,"float32"),a=n.complex(r,t);return t.dispose(),r.dispose(),a}if(!(0,w.QB)(e.dtype,t))return f.BV.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const r=n.real(e),a=(0,fe.p)(r,t);return r.dispose(),a}if("int32"===t)return n.int(e);if("bool"===t){const t=(0,Mt.i)(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function Un(e,t){return f.BV.makeTensorFromDataId(e.dataId,t,e.dtype)}function Gn(e){try{return e.map((e=>(0,gt.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Xn(e){return e.map((e=>(0,gt.encodeString)(e)))}var Hn=n(3337),qn=n(8333),jn=n(8713),Kn=n(1901);const Yn={kernelName:We.SY,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,(0,Kn.N)((0,fe.p)(n,"float32"),-1))}}};var Qn=n(7370);const Zn={kernelName:We.VG,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Ot.h)((0,fe.p)(n,"float32")),r=(0,Dt._)((0,Ut.l)((0,Mt.i)(1),t));return(0,Qn.W)((0,Rt.h)(e,r))}}}},Jn={kernelName:We.Sp,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Dt._)((0,Ut.l)((0,Ot.h)((0,fe.p)(n,"float32")),1));return(0,Rt.h)(e,t)}}}};var er=n(4968),tr=n(5475);const nr={kernelName:We.mm,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=on.$N(n.shape,r.shape);return{a:()=>{let t=e;const r=on.RR(n.shape,a);return r.length>0&&(t=(0,tr.S)(t,r)),(0,er.X)(t,n.shape)},b:()=>{let t=e;const n=on.RR(r.shape,a);return n.length>0&&(t=(0,tr.S)(t,n)),(0,er.X)(t,r.shape)}}}},rr={kernelName:We.Xz,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},ar={kernelName:We.sJ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Ft.P)(n)}}},sr={kernelName:We.aJ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Ft.P)(n)}}},or={kernelName:We.M2,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,Dt._)((0,Ut.l)((0,Mt.i)(1),(0,Ot.h)((0,fe.p)(n,"float32")))))}}},ir={kernelName:We.qw,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,Dt._)((0,_t.I)((0,Mt.i)(1),(0,Ot.h)((0,fe.p)(n,"float32"))));return(0,Rt.h)(e,t)}}}},ur={kernelName:We.QC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=(0,on.$N)(n.shape,r.shape);return{a:()=>{const t=(0,_t.I)((0,Ot.h)(n),(0,Ot.h)(r));let s=(0,At.d)(e,(0,Rt.h)(r,t));const o=(0,on.RR)(n.shape,a);return o.length>0&&(s=(0,tr.S)(s,o)),(0,er.X)(s,n.shape)},b:()=>{const t=(0,_t.I)((0,Ot.h)(n),(0,Ot.h)(r));let s=(0,Qn.W)((0,At.d)(e,(0,Rt.h)(n,t)));const o=(0,on.RR)(r.shape,a);return o.length>0&&(s=(0,tr.S)(s,o)),(0,er.X)(s,r.shape)}}}},lr={kernelName:We.jM,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,_t.I)((0,Ot.h)((0,fe.p)(n,"float32")),1))}}},cr={kernelName:We.Oy,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,Ut.l)((0,Mt.i)(1),(0,Ot.h)((0,fe.p)(n,"float32"))))}}},pr=(0,Le.op)({avgPool3dGrad_:function(e,t,n,r,a=[1,1,1],s,o){const i=(0,Be._1)(e,"dy","avgPool3dGrad"),u=(0,Be._1)(t,"input","avgPool3dGrad");let l=i,c=u,p=!1;4===u.rank&&(p=!0,l=(0,er.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=(0,er.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),w.hu(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),w.hu(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),w.hu(cn.jT(r,a),(()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`)),null!=o&&w.hu(w.GN(s),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const d={dy:l,input:c},h={filterSize:n,strides:r,dilations:a,pad:s,dimRoundingMode:o},m=f.BV.runKernel(We.IM,d,h);return p?(0,er.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),dr={kernelName:We._k,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:a,strides:s,dilations:o,pad:i,dimRoundingMode:u}=n,l=null==o?[1,1,1]:o;return{x:()=>pr(e,r,a,s,l,i,u)}}},hr=(0,Le.op)({avgPoolGrad_:function(e,t,n,r,a){const s=(0,Be._1)(e,"dy","avgPoolGrad"),o=(0,Be._1)(t,"input","avgPoolGrad");w.hu(o.rank===s.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${s.rank})`));let i=o,u=s,l=!1;3===o.rank&&(l=!0,i=(0,er.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=(0,er.X)(s,[1,s.shape[0],s.shape[1],s.shape[2]])),w.hu(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),w.hu(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:u,input:i},p={filterSize:n,strides:r,pad:a},d=f.BV.runKernel(We.RO,c,p);return l?(0,er.X)(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),fr={kernelName:We.Jh,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:a,strides:s,pad:o}=n;return{x:()=>hr(e,r,a,s,o)}}},mr={kernelName:We.XL,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,a]=t,{transposeA:s,transposeB:o}=n;return s||o?!s&&o?{a:()=>(0,Me.O)(e,a,!1,!1),b:()=>(0,Me.O)(e,r,!0,!1)}:s&&!o?{a:()=>(0,Me.O)(a,e,!1,!0),b:()=>(0,Me.O)(r,e,!1,!1)}:{a:()=>(0,Me.O)(a,e,!0,!0),b:()=>(0,Me.O)(e,r,!0,!0)}:{a:()=>(0,Me.O)(e,a,!1,!0),b:()=>(0,Me.O)(r,e,!0,!1)}}};var gr=n(7918);const xr={kernelName:We.zw,gradFunc:(e,t,n)=>{const{blockShape:r,crops:a}=n;return{x:()=>(0,gr.f)(e,r,a)}}},yr={kernelName:We.Ly,gradFunc:(e,t,n)=>{const r=n,a=r.inputShape,s=r.shape,o=Array.from(s);for(let e=a.length-1;e>=0;e--)if(a[e]===s[e])o[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${s}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>(0,tr.S)(e,i,!0)}}},br={kernelName:We.RF,gradFunc:e=>({x:()=>e.clone()})},vr={kernelName:We.gJ,gradFunc:e=>({x:()=>(0,Ft.P)(e)})};var wr=n(7630),kr=n(624),Sr=n(2856),Ir=n(5912);const Nr={kernelName:We.xn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:a,clipValueMax:s}=n;return{x:()=>(0,Ir.a)((0,Sr.H)((0,wr.b)(r,a),(0,kr.z)(r,s)),e,(0,Ft.P)(e))}}},$r={kernelName:We.yj,inputsToSave:["x"],gradFunc:Yn.gradFunc};var Tr=n(8644);const Cr={kernelName:We.Eh,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:a}=n,s=(0,w.EC)(a,t[0].shape)[0],o=r.map((e=>e[s]));return(0,Tr.V)(e,o,s).map((e=>()=>e))}};var Er=n(6013),_r=n(9832);const Rr={kernelName:We.mh,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,a]=t,{dilations:s,strides:o,pad:i,dataFormat:u}=n;return w.hu(cn.I0(s),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`)),{x:()=>(0,_r._)(r.shape,e,a,o,i,u),filter:()=>(0,Er.p)(r,e,a.shape,o,i,u)}}};var Ar=n(4794);const Dr={kernelName:We.wm,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,a]=t,{strides:s,pad:o,dataFormat:i,dimRoundingMode:u}=n;return{dy:()=>(0,Ar.T)(e,a,s,o,i,1,u),filter:()=>(0,Er.p)(e,r,a.shape,s,o,i,u)}}},Or=(0,Le.op)({conv3DBackpropFilter_:function(e,t,n,r,a){let s=e;4===e.rank&&(s=(0,er.X)(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=(0,er.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),w.hu(5===s.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`)),w.hu(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),w.hu(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),w.hu(s.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`)),w.hu(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:s,dy:o},u={strides:r,pad:a,filterShape:n};return f.BV.runKernel(We.o2,i,u)}});var Fr=n(7594);const Br={kernelName:We.x1,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:a,pad:s}=n;w.hu((0,cn.I0)(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[o,i]=t;return{x:()=>(0,Fr._)(o.shape,e,i,a,s),filter:()=>Or(o,e,i.shape,a,s)}}};var Mr=n(9331);const Pr={kernelName:We.mc,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)((0,Qn.W)((0,Mr.O)((0,fe.p)(n,"float32"))),e)}}};var Lr=n(3254);const Vr={kernelName:We.TR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)((0,Lr.R)((0,fe.p)(n,"float32")),e)}}};var zr=n(7405);const Wr={kernelName:We.iH,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:a,exclusive:s,reverse:o}=n;return{x:()=>{const t=(0,sn.Q3)([a],r.rank);let n=(0,zr.z)(e,a,s,!o);return null!=t&&(n=(0,Ve.p)(n,t)),n}}}};var Ur=n(8098),Gr=n(4375);const Xr={kernelName:We.ci,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:a,pad:s,dimRoundingMode:o}=n,i=null==r?[1,1]:r;w.hu(cn.I0(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[u,l]=t;return w.hu(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),w.hu(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),w.hu(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),w.hu(cn.jT(a,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${i}'.`)),null!=o&&w.hu(w.GN(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`)),{x:()=>(0,Gr.v)(u.shape,e,l,a,s,r,o),filter:()=>(0,Ur.z)(u,e,l.shape,a,s,r,o)}}},Hr={kernelName:We.p4,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,a]=t,s={x:r,filter:a,dy:e},o={x:r,filter:a,dy:e};return{x:()=>f.BV.runKernel(We.ek,s,n),filter:()=>f.BV.runKernel(We.Vn,o,n)}}},qr={kernelName:We.SX,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>f.BV.runKernel(We.HE,r)}}};var jr=n(4842);const Kr={kernelName:We.Om,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=(0,At.d)((0,jr.Q)((0,Qn.W)((0,Ot.h)(n))),2/Math.sqrt(Math.PI));return{x:()=>(0,At.d)(e,r)}}},Yr={kernelName:We.NE,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,n)}}},Qr={kernelName:We.YF,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>(0,er.X)(e,n.shape)}}},Zr={kernelName:We.Y0,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,(0,jr.Q)(n))}}},Jr={kernelName:We.OR,gradFunc:e=>({x:()=>(0,Ft.P)(e)})},ea={kernelName:We.je,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=(0,on.$N)(n.shape,r.shape);return{a:()=>{const t=(0,Rt.h)(e,(0,fe.p)(r,"float32")),s=(0,on.RR)(n.shape,a);return s.length>0?(0,er.X)((0,tr.S)(t,s),n.shape):t},b:()=>{let t=(0,At.d)(e,(0,fe.p)(n,"float32"));const s=(0,on.RR)(r.shape,a);s.length>0&&(t=(0,er.X)((0,tr.S)(t,s),r.shape));const o=(0,Ot.h)(r);return(0,Qn.W)((0,Rt.h)(t,(0,fe.p)(o,"float32")))}}}};var ta=n(2634),na=n(7501);const ra={kernelName:We.sH,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[a,s,o,i]=t,u=null==i?(0,Mt.i)(1):i,l=(0,on.RR)(s.shape,a.shape),c=[];if(1===s.rank){for(let e=0;e<a.shape.length-1;++e)c.push(a.shape[e]);c.push(1)}const p=(0,Ut.l)(a,s),d=(0,At.d)(e,u),h=(0,ta.b)((0,_t.I)(o,(0,Mt.i)(r))),f=(0,At.d)((0,At.d)((0,At.d)(h,h),h),(0,Mt.i)(-.5));return{x:()=>1===s.rank?(0,er.X)((0,At.d)((0,At.d)(e,(0,na.G)((0,er.X)(h,[1,1,1,s.shape[0]]),c)),u),a.shape):(0,er.X)((0,At.d)((0,At.d)(e,h),u),a.shape),mean:()=>{let e=(0,At.d)((0,At.d)(h,(0,Mt.i)(-1)),d);return 1===s.rank&&(e=(0,tr.S)(e,l)),(0,er.X)(e,s.shape)},variance:()=>{let e=(0,At.d)((0,At.d)(f,p),d);return 1===s.rank&&(e=(0,tr.S)(e,l)),(0,er.X)(e,s.shape)},scale:()=>{const t=(0,At.d)(p,h);let n=(0,At.d)(e,t);return 1===s.rank&&(n=(0,tr.S)(n,l)),(0,er.X)(n,s.shape)},offset:()=>{let t=e;return 1===s.rank&&(t=(0,tr.S)(t,l)),(0,er.X)(t,s.shape)}}}};var aa=n(8749);const sa={kernelName:We.qi,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,a]=t,{axis:s}=n,o=(0,w.EC)(s,r.shape)[0];return{x:()=>{const t=r.shape,n=a.size,i=t.slice(0,o),u=i.length,l=t.slice(s,t.length).slice(1),c=l.length,p=oa(0,u),d=oa(u+1,u+1+c),h=ia([i,[n],l]),f=(0,er.X)(e,h),m=(0,er.X)(a,[n]),g=ia([[u],p,d]),x=(0,Ve.p)(f,g);let y=(0,aa.p)(x,m,r.shape[o]);const b=(0,sn.LJ)(g);return y=(0,Ve.p)(y,b),y},indices:()=>a}}};function oa(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function ia(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const ua={kernelName:We.Ac,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,Ft.P)(n),b:()=>(0,Ft.P)(r)}}},la={kernelName:We.iJ,gradFunc:e=>({x:()=>(0,fe.p)(e,"float32")})},ca={kernelName:We.av,gradFunc:e=>({x:()=>(0,Ft.P)(e)})},pa={kernelName:We.iW,gradFunc:e=>({x:()=>(0,Ft.P)(e)})},da={kernelName:We.r7,gradFunc:e=>({x:()=>(0,Ft.P)(e)})};var ha=n(636);const fa={kernelName:We.J$,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:a}=n,s=(0,ha.p)(r,0);return{x:()=>(0,Ir.a)(s,e,(0,At.d)(e,a))}}},ma={kernelName:We.kU,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,_t.I)(n,1))}}},ga={kernelName:We.Zb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,fe.p)(n,"float32"))}}},xa={kernelName:We.qC,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:a}=n;return{logits:()=>{const t=(0,jr.Q)(r);return(0,Ut.l)(e,(0,At.d)((0,tr.S)(e,a,!0),t))}}}},ya=(0,Le.op)({localResponseNormalizationBackprop_:function(e,t,n,r=5,a=1,s=1,o=.5){const i={x:e,y:t,dy:n},u={depthRadius:r,bias:a,alpha:s,beta:o};return f.BV.runKernel(We.Hh,i,u)}}),ba={kernelName:We.eZ,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,a]=t,{depthRadius:s,bias:o,alpha:i,beta:u}=n;return{x:()=>ya(r,a,e,s,o,i,u)}}};var va=n(6477);function wa(e,t,n,r){return t.rank<n.rank&&(t=(0,er.X)(t,sn.rv(t.shape,r))),e.rank<n.rank&&(e=(0,er.X)(e,sn.rv(e.shape,r))),{x:()=>(0,At.d)(e,(0,fe.p)((0,va.D)(n,t),e.dtype))}}const ka={kernelName:We.Yo,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:a}=r,s=t[0],o=wa(e,t[1],s,w.EC(a,s.shape));return{x:()=>o.x()}}};var Sa=n(6573);const Ia={kernelName:We.BM,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,At.d)(e,(0,fe.p)((0,wr.b)(n,r),"float32")),b:()=>(0,At.d)(e,(0,fe.p)((0,Sa.d)(n,r),"float32"))}}},Na=(0,Le.op)({maxPool3dGrad_:function(e,t,n,r,a,s=[1,1,1],o,i){const u=(0,Be._1)(e,"dy","maxPool3dGrad"),l=(0,Be._1)(t,"input","maxPool3dGrad"),c=(0,Be._1)(n,"output","maxPool3dGrad");let p=u,d=l,h=c,m=!1;4===l.rank&&(m=!0,p=(0,er.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=(0,er.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=(0,er.X)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),w.hu(5===p.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${p.rank}.`)),w.hu(5===d.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`)),w.hu(5===h.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`)),w.hu(cn.jT(a,s),(()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`)),null!=i&&w.hu(w.GN(o),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${o}.`));const g={dy:p,input:d,output:h},x={filterSize:r,strides:a,dilations:s,pad:o,dimRoundingMode:i},y=f.BV.runKernel(We.OU,g,x);return m?(0,er.X)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),$a={kernelName:We.OA,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,a]=t,{filterSize:s,strides:o,dilations:i,pad:u,dimRoundingMode:l}=n,c=null==i?[1,1,1]:i;return{x:()=>Na(e,r,a,s,o,c,u,l)}}},Ta=(0,Le.op)({maxPoolGrad_:function(e,t,n,r,a,s,o){const i=(0,Be._1)(e,"dy","maxPoolGrad"),u=(0,Be._1)(t,"input","maxPoolGrad"),l=(0,Be._1)(n,"output","maxPoolGrad");w.hu(u.rank===i.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${i.rank})`)),w.hu(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),w.hu(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=o&&w.hu(w.GN(s),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`));const c={dy:i,input:u,output:l},p={filterSize:r,strides:a,pad:s,dimRoundingMode:o};return f.BV.runKernel(We.OV,c,p)}}),Ca={kernelName:We.mT,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,a]=t,{filterSize:s,strides:o,pad:i}=n;return{x:()=>Ta(e,r,a,s,o,i)}}};var Ea=n(4917);const _a={kernelName:We.q2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:a}=n,s=w.EC(a,r.shape),o=(0,sn.kz)(r.shape,s)[1],i=w.NA(o);return{x:()=>{const t=r.shape.slice();s.forEach((e=>{t[e]=1}));const n=(0,er.X)(e,t);return(0,Rt.h)((0,At.d)(n,(0,Ea.i)(r.shape,"float32")),i)}}}},Ra={kernelName:We.c1,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:a}=r,[s,o]=t,i=wa(e,o,s,w.EC(a,s.shape));return{x:()=>i.x()}}},Aa={kernelName:We.q8,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>(0,At.d)(e,(0,fe.p)((0,kr.z)(n,r),"float32")),b:()=>(0,At.d)(e,(0,fe.p)((0,ha.p)(n,r),"float32"))}}};var Da=n(2676);const Oa={kernelName:We.jQ,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:a}=n,s=a.map((e=>e[0]));return{x:()=>(0,Da.t)(e,s,r.shape)}}};var Fa=n(6943);const Ba={kernelName:We.Vb,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=(0,on.$N)(n.shape,r.shape);return{a:()=>{const t=(0,on.RR)(n.shape,a);return t.length>0?(0,er.X)((0,tr.S)(e,t),n.shape):e},b:()=>{const t=(0,At.d)(e,(0,Qn.W)((0,Fa.G)((0,Rt.h)(n,r)))),s=(0,on.RR)(r.shape,a);return s.length>0?(0,er.X)((0,tr.S)(t,s),r.shape):t}}}},Ma={kernelName:We.wY,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=(0,on.$N)(n.shape,r.shape);return{a:()=>{const t=(0,At.d)(e,(0,fe.p)(r,"float32")),s=(0,on.RR)(n.shape,a);return s.length>0?(0,er.X)((0,tr.S)(t,s),n.shape):t},b:()=>{const t=(0,At.d)(e,(0,fe.p)(n,"float32")),s=(0,on.RR)(r.shape,a);return s.length>0?(0,er.X)((0,tr.S)(t,s),r.shape):t}}}},Pa={kernelName:We.ku,gradFunc:e=>({x:()=>(0,Qn.W)(e)})},La={kernelName:We.we,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>(0,an.l)(n.shape,"float32")}}},Va={kernelName:We.qW,gradFunc:e=>({x:()=>(0,Ft.P)(e)})};var za=n(4136);const Wa={kernelName:We.Qi,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return(0,za.H)(e,r).map((e=>()=>e))}},Ua={kernelName:We.ly,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:a}=n,s=a.map((e=>e[0]));return{x:()=>(0,Da.t)(e,s,r.shape)}}};var Ga=n(2597);const Xa={kernelName:We.pe,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,a]=t,s=n,o=r,i=on.$N(s.shape,o.shape);return{a:()=>{const t=(0,fe.p)(o,"float32");let n=(0,At.d)(e,(0,At.d)(t,(0,Wt.s)(s,(0,Ut.l)(t,(0,Mt.i)(1)))));const r=on.RR(s.shape,i);return r.length>0&&(n=(0,tr.S)(n,r)),(0,er.X)(n,s.shape)},b:()=>{const t=(0,ha.p)(s,0),n=(0,Ir.a)(t,(0,Ga.c)(s),(0,Ft.P)(s));let r=(0,At.d)(e,(0,At.d)(a,n));const u=on.RR(o.shape,i);return u.length>0&&(r=(0,tr.S)(r,u)),(0,er.X)(r,o.shape)}}}},Ha={kernelName:We.o0,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,a=(0,ha.p)(n,0);return{x:()=>(0,Ir.a)(a,e,(0,At.d)(e,r)),alpha:()=>{let t=(0,Ir.a)(a,(0,Ft.P)(e),(0,At.d)(e,n));const s=(0,on.RR)(r.shape,e.shape);return s.length>0&&(t=(0,tr.S)(t,s)),(0,er.X)(t,r.shape)}}}},qa={kernelName:We.oH,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=on.$N(n.shape,r.shape);return{a:()=>{const t=(0,Rt.h)(e,(0,fe.p)(r,"float32")),s=on.RR(n.shape,a);return s.length>0?(0,er.X)((0,tr.S)(t,s),n.shape):t},b:()=>{let t=(0,At.d)(e,(0,fe.p)(n,"float32"));const s=on.RR(r.shape,a);s.length>0&&(t=(0,er.X)((0,tr.S)(t,s),r.shape));const o=(0,Ot.h)(r);return(0,Qn.W)((0,Rt.h)(t,(0,fe.p)(o,"float32")))}}}},ja={kernelName:We.$H,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,Qn.W)((0,Ot.h)(n)))}}},Ka={kernelName:We.Sb,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=(0,At.d)((0,kr.z)(n,6),(0,Kn.N)(n));return{x:()=>(0,At.d)(e,(0,fe.p)(r,"float32"))}}},Ya={kernelName:We.qk,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,(0,fe.p)((0,Kn.N)(n),"float32"))}}},Qa={kernelName:We.HZ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,er.X)(e,n.shape)}}},Za={kernelName:We._Y,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,a={dy:e,images:r};return{images:()=>f.BV.runKernel(We.zb,a,n)}}},Ja={kernelName:We.dp,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,a={dy:e,images:r};return{images:()=>f.BV.runKernel(We.Hm,a,n)}}};var es=n(7486);const ts={kernelName:We.mK,gradFunc:(e,t,n)=>{const{dims:r}=n,a=(0,w.EC)(r,e.shape);return{x:()=>(0,es.G)(e,a)}}},ns={kernelName:We.e0,gradFunc:e=>({x:()=>(0,Ft.P)(e)})},rs={kernelName:We.bV,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Qn.W)((0,Rt.h)(e,(0,At.d)((0,Wt.s)(n,1.5),2)))}}};var as=n(8651);const ss={kernelName:We.Ph,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>(0,fe.p)((0,Ft.P)(n),"float32"),t:()=>(0,At.d)(e,(0,fe.p)(n,e.dtype)),e:()=>(0,At.d)(e,(0,fe.p)((0,as.h)(n),e.dtype))}}},os={kernelName:We.oF,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=(0,ha.p)(n,(0,Mt.i)(0)),r=(0,Mt.i)(vn),a=(0,Mt.i)(wn),s=(0,At.d)(e,a),o=(0,At.d)((0,At.d)(e,r),(0,jr.Q)((0,fe.p)(n,"float32")));return(0,Ir.a)(t,s,o)}}}},is={kernelName:We.a5,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,(0,At.d)(n,(0,Ut.l)((0,Mt.i)(1),n)))}}},us={kernelName:We.i5,gradFunc:e=>({x:()=>(0,Ft.P)(e)})};var ls=n(173);const cs={kernelName:We.RQ,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)((0,ls.m)((0,fe.p)(n,"float32")),e)}}};var ps=n(2699);const ds={kernelName:We.w3,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)((0,ps.f)((0,fe.p)(n,"float32")),e)}}};var hs=n(9682);const fs={kernelName:We.p2,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:a,size:s}=n,o=r.shape,[i,u]=ct(r,a,s),l=[];for(let t=0;t<e.rank;t++)l.push([i[t],o[t]-i[t]-u[t]]);return{x:()=>(0,hs.v)(e,l)}}},ms={kernelName:We.Gc,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:a}=n,s=(0,At.d)(e,r);return{logits:()=>(0,Ut.l)(s,(0,At.d)((0,tr.S)(s,[a],!0),r))}}};var gs=n(625);const xs={kernelName:We.MR,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,(0,gs.X)(n))}}};var ys=n(8441);const bs={kernelName:We.TQ,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:a}=n;return{x:()=>(0,ys.E)(e,r,a)}}};var vs=n(6884);const ws={kernelName:We.L8,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>(0,vs.z)(e,r)}}},ks={kernelName:We.FK,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,At.d)((0,Dt._)((0,fe.p)(n,"float32")),2))}}},Ss={kernelName:We.bK,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)(e,(0,At.d)((0,fe.p)(n,"float32"),2))}}},Is={kernelName:We._t,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=(0,Mt.i)(2);return{a:()=>(0,At.d)(e,(0,At.d)(a,(0,Ut.l)(n,r))),b:()=>(0,At.d)(e,(0,At.d)(a,(0,Ut.l)(r,n)))}}},Ns={kernelName:We.h8,gradFunc:e=>({x:()=>(0,Ft.P)(e)})},$s={kernelName:We.Tr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,a=on.$N(n.shape,r.shape);return{a:()=>{let t=e;const r=on.RR(n.shape,a);return r.length>0&&(t=(0,tr.S)(t,r)),(0,er.X)(t,n.shape)},b:()=>{let t=e;const n=on.RR(r.shape,a);return n.length>0&&(t=(0,tr.S)(t,n)),(0,er.X)((0,Qn.W)(t),r.shape)}}}},Ts={kernelName:We.GB,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,a=r.shape.slice(),{axis:s}=n;(0,w.EC)(s,r.shape).forEach((e=>{a[e]=1}));const o=(0,er.X)(e,a),i=(0,At.d)(o,(0,Ea.i)(r.shape,"float32"));return{x:()=>i}}},Cs={kernelName:We.sE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,Rt.h)(e,(0,Ot.h)((0,ls.m)(n)))}}},Es={kernelName:We.MI,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>(0,At.d)((0,Ut.l)((0,Mt.i)(1),(0,Ot.h)(n)),e)}}},_s={kernelName:We.n9,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:a}=n;return{x:()=>{let t=(0,Ft.P)(r);if(1===r.rank)for(let n=0;n<a[0];++n)t=(0,_t.I)(t,(0,Da.t)(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)t=(0,_t.I)(t,(0,Da.t)(e,[n*r.shape[0],s*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let o=0;o<a[2];++o)t=(0,_t.I)(t,(0,Da.t)(e,[n*r.shape[0],s*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let o=0;o<a[2];++o)for(let i=0;i<a[3];++i)t=(0,_t.I)(t,(0,Da.t)(e,[n*r.shape[0],s*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},Rs={kernelName:We.G3,gradFunc:(e,t,n)=>{const r=n,{perm:a}=r,s=sn.LJ(a);return{x:()=>(0,Ve.p)(e,s)}}};var As=n(2991);const Ds={kernelName:We.To,gradFunc:(e,t,n)=>{const r=n,{axis:a}=r;return{value:()=>(0,As.k)(e,a)}}};var Os=n(1300),Fs=n(4926);const Bs=[Yn,Zn,Jn,nr,rr,ar,sr,or,ir,ur,lr,cr,dr,fr,mr,xr,yr,br,vr,Nr,$r,Cr,Dr,Rr,Br,Pr,Vr,Wr,Xr,Hr,qa,qr,Kr,Yr,Qr,Zr,ea,Jr,ra,sa,ua,la,ca,pa,da,fa,ma,ga,xa,ba,ka,ka,Ia,$a,Ca,_a,Ra,Aa,Oa,Ba,Ma,Pa,La,Va,Wa,Ua,Ua,Xa,Ha,ja,Ka,Ya,Qa,Za,Ja,ts,ns,rs,ss,os,is,us,cs,ds,fs,ms,xs,bs,bs,ws,ws,ks,Is,Ss,Ns,$s,Ts,Cs,Es,_s,Rs,Ds,{kernelName:We.Qv,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=(0,Ht.g)(t,(0,Ft.P)(t)),r=(0,Fs.I)(e,n);let a=(0,wr.b)(t,(0,Mt.i)(0,"int32"));const s=r.rank-a.rank;for(let e=0;e<s;++e)a=(0,Os.d)(a,e+1);a=(0,Sr.H)(a,(0,Ea.i)(r.shape,"bool"));const o=(0,Ft.P)(r);return(0,Ir.a)(a,r,o)}(e,n)}}},{kernelName:We.Ru,gradFunc:e=>({x:()=>(0,Ft.P)(e)})}];for(const e of Bs)(0,Ue.Li)(e);xe.es.prototype.abs=function(){return this.throwIfDisposed(),(0,Xt.W)(this)};var Ms=n(7839);xe.es.prototype.acos=function(){return this.throwIfDisposed(),(0,Ms.K)(this)};var Ps=n(1470);xe.es.prototype.acosh=function(){return this.throwIfDisposed(),(0,Ps._)(this)};var Ls=n(7536);xe.es.prototype.addStrict=function(e){return this.throwIfDisposed(),(0,Ls.zq)(this,e)},xe.es.prototype.add=function(e){return this.throwIfDisposed(),(0,_t.I)(this,e)};var Vs=n(781);xe.es.prototype.all=function(e,t){return this.throwIfDisposed(),(0,Vs.$)(this,e,t)};var zs=n(2998);xe.es.prototype.any=function(e,t){return this.throwIfDisposed(),(0,zs.Y)(this,e,t)};var Ws=n(47);xe.es.prototype.argMax=function(e){return this.throwIfDisposed(),(0,Ws.N)(this,e)};var Us=n(7394);xe.es.prototype.argMin=function(e){return this.throwIfDisposed(),(0,Us.v)(this,e)},xe.es.prototype.asScalar=function(){return this.throwIfDisposed(),(0,w.hu)(1===this.size,(()=>"The array must have only 1 element.")),(0,er.X)(this,[])},xe.es.prototype.asType=function(e){return this.throwIfDisposed(),(0,fe.p)(this,e)},xe.es.prototype.as1D=function(){return this.throwIfDisposed(),(0,er.X)(this,[this.size])},xe.es.prototype.as2D=function(e,t){return this.throwIfDisposed(),(0,er.X)(this,[e,t])},xe.es.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),(0,er.X)(this,[e,t,n])},xe.es.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),(0,er.X)(this,[e,t,n,r])},xe.es.prototype.as5D=function(e,t,n,r,a){return this.throwIfDisposed(),(0,er.X)(this,[e,t,n,r,a])};var Gs=n(2421);xe.es.prototype.asin=function(){return this.throwIfDisposed(),(0,Gs.Z)(this)};var Xs=n(1891);xe.es.prototype.asinh=function(){return this.throwIfDisposed(),(0,Xs.V)(this)};var Hs=n(7037);xe.es.prototype.atan=function(){return this.throwIfDisposed(),(0,Hs.z)(this)};var qs=n(9812);xe.es.prototype.atan2=function(e){return this.throwIfDisposed(),(0,qs.f)(this,e)};var js=n(369);xe.es.prototype.atanh=function(){return this.throwIfDisposed(),(0,js.C)(this)};var Ks=n(5176);xe.es.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),(0,Ks.w)(this,e,t,n,r)},xe.es.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),(0,ys.E)(this,e,t)};var Ys=n(7505);xe.es.prototype.batchNorm=function(e,t,n,r,a){return this.throwIfDisposed(),(0,Ys.t)(this,e,t,n,r,a)};var Qs=n(8247);xe.es.prototype.broadcastTo=function(e){return this.throwIfDisposed(),(0,Qs.U)(this,e)},xe.es.prototype.cast=function(e){return this.throwIfDisposed(),(0,fe.p)(this,e)};var Zs=n(6825);xe.es.prototype.ceil=function(){return this.throwIfDisposed(),(0,Zs.m)(this)};var Js=n(2279);xe.es.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),(0,Js.i)(this,e,t)},xe.es.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof xe.es&&(e=[e]),(0,vs.z)([this,...e],t)};var eo=n(1355);xe.es.prototype.conv1d=function(e,t,n,r,a,s){return this.throwIfDisposed(),(0,eo.P)(this,e,t,n,r,a,s)};var to=n(1405);xe.es.prototype.conv2dTranspose=function(e,t,n,r,a){return this.throwIfDisposed(),(0,to.b)(this,e,t,n,r,a)},xe.es.prototype.conv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),(0,Ar.T)(this,e,t,n,r,a,s)},xe.es.prototype.cos=function(){return this.throwIfDisposed(),(0,ls.m)(this)},xe.es.prototype.cosh=function(){return this.throwIfDisposed(),(0,ps.f)(this)},xe.es.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),(0,zr.z)(this,e,t,n)};var no=n(9112);xe.es.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),(0,no.n)(this,e,t)};var ro=n(4718);xe.es.prototype.depthwiseConv2D=function(e,t,n,r,a,s){return(0,Et.MX)("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),(0,ro.B)(this,e,t,n,r,a,s)},xe.es.prototype.depthwiseConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),(0,ro.B)(this,e,t,n,r,a,s)};var ao=n(557);xe.es.prototype.dilation2d=function(e,t,n,r,a){return this.throwIfDisposed(),(0,ao.W)(this,e,t,n,r,a)};var so=n(9322);xe.es.prototype.divNoNan=function(e){return this.throwIfDisposed(),(0,so.N)(this,e)},xe.es.prototype.divStrict=function(e){return this.throwIfDisposed(),(0,Ls.sz)(this,e)},xe.es.prototype.div=function(e){return this.throwIfDisposed(),(0,Rt.h)(this,e)};var oo=n(548);xe.es.prototype.dot=function(e){return this.throwIfDisposed(),(0,oo.A)(this,e)};var io=n(3233);xe.es.prototype.elu=function(){return this.throwIfDisposed(),(0,io.p)(this)};var uo=n(3334);xe.es.prototype.equalStrict=function(e){return this.throwIfDisposed(),(0,uo.zV)(this,e)},xe.es.prototype.equal=function(e){return this.throwIfDisposed(),(0,va.D)(this,e)};var lo=n(4650);xe.es.prototype.erf=function(){return this.throwIfDisposed(),(0,lo.q)(this)},xe.es.prototype.exp=function(){return this.throwIfDisposed(),(0,jr.Q)(this)},xe.es.prototype.expandDims=function(e){return this.throwIfDisposed(),(0,Os.d)(this,e)};var co=n(3426);xe.es.prototype.expm1=function(){return this.throwIfDisposed(),(0,co.t)(this)};var po=n(7020);xe.es.prototype.fft=function(){return this.throwIfDisposed(),(0,po.k)(this)},xe.es.prototype.flatten=function(){return this.throwIfDisposed(),(0,er.X)(this,[this.size])},xe.es.prototype.floor=function(){return this.throwIfDisposed(),(0,Fa.G)(this)};var ho=n(9165);xe.es.prototype.floorDiv=function(e){return this.throwIfDisposed(),(0,ho.q)(this,e)},xe.es.prototype.gather=function(e,t){return this.throwIfDisposed(),(0,Fs.I)(this,e,t)},xe.es.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),(0,uo.bZ)(this,e)},xe.es.prototype.greaterEqual=function(e){return this.throwIfDisposed(),(0,wr.b)(this,e)},xe.es.prototype.greaterStrict=function(e){return this.throwIfDisposed(),(0,uo.g1)(this,e)},xe.es.prototype.greater=function(e){return this.throwIfDisposed(),(0,ha.p)(this,e)};var fo=n(8447);xe.es.prototype.ifft=function(){return this.throwIfDisposed(),(0,fo.S)(this)};var mo=n(4415);xe.es.prototype.irfft=function(){return this.throwIfDisposed(),(0,mo.w)(this)};var go=n(3963);xe.es.prototype.isFinite=function(){return this.throwIfDisposed(),(0,go.x)(this)};var xo=n(4365);xe.es.prototype.isInf=function(){return this.throwIfDisposed(),(0,xo.U)(this)};var yo=n(6230);xe.es.prototype.isNaN=function(){return this.throwIfDisposed(),(0,yo.i)(this)};var bo=n(9133);xe.es.prototype.leakyRelu=function(e){return this.throwIfDisposed(),(0,bo.h)(this,e)},xe.es.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),(0,uo.SF)(this,e)},xe.es.prototype.lessEqual=function(e){return this.throwIfDisposed(),(0,kr.z)(this,e)},xe.es.prototype.lessStrict=function(e){return this.throwIfDisposed(),(0,uo.O_)(this,e)},xe.es.prototype.less=function(e){return this.throwIfDisposed(),(0,Sa.d)(this,e)};var vo=n(9648);xe.es.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),(0,vo.G)(this,e,t,n,r)};var wo=n(3888);xe.es.prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,wo.e)(this)};var ko=n(1510);xe.es.prototype.logSoftmax=function(e){return this.throwIfDisposed(),(0,ko.C)(this,e)};var So=n(1391);xe.es.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),(0,So.l)(this,e,t)},xe.es.prototype.log=function(){return this.throwIfDisposed(),(0,Ga.c)(this)};var Io=n(7474);xe.es.prototype.log1p=function(){return this.throwIfDisposed(),(0,Io.K)(this)},xe.es.prototype.logicalAnd=function(e){return this.throwIfDisposed(),(0,Sr.H)(this,e)},xe.es.prototype.logicalNot=function(){return this.throwIfDisposed(),(0,as.h)(this)};var No=n(5750);xe.es.prototype.logicalOr=function(e){return this.throwIfDisposed(),(0,No.K)(this,e)};var $o=n(596);xe.es.prototype.logicalXor=function(e){return this.throwIfDisposed(),(0,$o.e)(this,e)},xe.es.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),(0,Me.O)(this,e,t,n)};var To=n(1174);xe.es.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),(0,To._)(this,e,t,n,r)};var Co=n(3307);xe.es.prototype.max=function(e,t){return this.throwIfDisposed(),(0,Co.F)(this,e,t)},xe.es.prototype.maximumStrict=function(e){return this.throwIfDisposed(),(0,Ls._j)(this,e)},xe.es.prototype.maximum=function(e){return this.throwIfDisposed(),(0,Ht.g)(this,e)};var Eo=n(5130);xe.es.prototype.mean=function(e,t){return this.throwIfDisposed(),(0,Eo.J)(this,e,t)};var _o=n(5735);xe.es.prototype.min=function(e,t){return this.throwIfDisposed(),(0,_o.V)(this,e,t)},xe.es.prototype.minimumStrict=function(e){return this.throwIfDisposed(),(0,Ls.Wz)(this,e)};var Ro=n(4513);xe.es.prototype.minimum=function(e){return this.throwIfDisposed(),(0,Ro.L)(this,e)};var Ao=n(1483);xe.es.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),(0,Ao.V)(this,e,t)},xe.es.prototype.modStrict=function(e){return this.throwIfDisposed(),(0,Ls.Ir)(this,e)};var Do=n(5228);xe.es.prototype.mod=function(e){return this.throwIfDisposed(),(0,Do.w)(this,e)},xe.es.prototype.mulStrict=function(e){return this.throwIfDisposed(),(0,Ls.NT)(this,e)},xe.es.prototype.mul=function(e){return this.throwIfDisposed(),(0,At.d)(this,e)},xe.es.prototype.neg=function(){return this.throwIfDisposed(),(0,Qn.W)(this)};var Oo=n(3561);xe.es.prototype.norm=function(e,t,n){return this.throwIfDisposed(),(0,Oo.K)(this,e,t,n)},xe.es.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),(0,uo.FG)(this,e)};var Fo=n(6500);xe.es.prototype.notEqual=function(e){return this.throwIfDisposed(),(0,Fo.Q)(this,e)},xe.es.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),(0,Pe.l)(this,e,t,n)};var Bo=n(7846);xe.es.prototype.onesLike=function(){return this.throwIfDisposed(),(0,Bo.J)(this)},xe.es.prototype.pad=function(e,t){return this.throwIfDisposed(),(0,hs.v)(this,e,t)};var Mo=n(5860);xe.es.prototype.pool=function(e,t,n,r,a){return this.throwIfDisposed(),(0,Mo.d)(this,e,t,n,r,a)},xe.es.prototype.powStrict=function(e){return this.throwIfDisposed(),(0,Ls.Lf)(this,e)},xe.es.prototype.pow=function(e){return this.throwIfDisposed(),(0,Wt.s)(this,e)};var Po=n(8151);xe.es.prototype.prelu=function(e){return this.throwIfDisposed(),(0,Po.A)(this,e)};var Lo=n(9451);xe.es.prototype.prod=function(e,t){return this.throwIfDisposed(),(0,Lo.W)(this,e,t)};var Vo=n(9036);xe.es.prototype.reciprocal=function(){return this.throwIfDisposed(),(0,Vo.M)(this)};var zo=n(7409);xe.es.prototype.relu=function(){return this.throwIfDisposed(),(0,zo.U)(this)};var Wo=n(3582);xe.es.prototype.relu6=function(){return this.throwIfDisposed(),(0,Wo.b)(this)},xe.es.prototype.reshapeAs=function(e){return this.throwIfDisposed(),(0,er.X)(this,e.shape)},xe.es.prototype.reshape=function(e){return this.throwIfDisposed(),(0,er.X)(this,e)};var Uo=n(3305);xe.es.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),(0,Uo.I)(this,e,t,n)};var Go=n(5098);xe.es.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),(0,Go.j)(this,e,t,n)},xe.es.prototype.reverse=function(e){return this.throwIfDisposed(),(0,es.G)(this,e)};var Xo=n(3710);xe.es.prototype.rfft=function(){return this.throwIfDisposed(),(0,Xo.Q)(this)};var Ho=n(7809);xe.es.prototype.round=function(){return this.throwIfDisposed(),(0,Ho.N)(this)},xe.es.prototype.rsqrt=function(){return this.throwIfDisposed(),(0,ta.b)(this)};var qo=n(5503);xe.es.prototype.selu=function(){return this.throwIfDisposed(),(0,qo.U)(this)};var jo=n(8678);xe.es.prototype.separableConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),(0,jo.U)(this,e,t,n,r,a,s)},xe.es.prototype.sigmoid=function(){return this.throwIfDisposed(),(0,gs.X)(this)};var Ko=n(4434);xe.es.prototype.sign=function(){return this.throwIfDisposed(),(0,Ko.X)(this)},xe.es.prototype.sin=function(){return this.throwIfDisposed(),(0,Mr.O)(this)},xe.es.prototype.sinh=function(){return this.throwIfDisposed(),(0,Lr.R)(this)},xe.es.prototype.slice=function(e,t){return this.throwIfDisposed(),(0,Da.t)(this,e,t)};var Yo=n(682);xe.es.prototype.softmax=function(e){return this.throwIfDisposed(),(0,Yo.X)(this,e)};var Qo=n(3694);xe.es.prototype.softplus=function(){return this.throwIfDisposed(),(0,Qo.W)(this)},xe.es.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),(0,gr.f)(this,e,t)},xe.es.prototype.split=function(e,t){return this.throwIfDisposed(),(0,Tr.V)(this,e,t)},xe.es.prototype.sqrt=function(){return this.throwIfDisposed(),(0,Dt._)(this)},xe.es.prototype.square=function(){return this.throwIfDisposed(),(0,Ot.h)(this)};var Zo=n(5265);xe.es.prototype.squaredDifference=function(e){return this.throwIfDisposed(),(0,Zo.$)(this,e)},xe.es.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),(0,Ls.r7)(this,e)};var Jo=n(9590);xe.es.prototype.squeeze=function(e){return this.throwIfDisposed(),(0,Jo.L)(this,e)},xe.es.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof xe.es?[this,e]:[this,...e];return(0,As.k)(n,t)},xe.es.prototype.step=function(e){return this.throwIfDisposed(),(0,Kn.N)(this,e)};var ei=n(5158);xe.es.prototype.stridedSlice=function(e,t,n,r,a,s,o,i){return this.throwIfDisposed(),(0,ei.N)(this,e,t,n,r,a,s,o,i)},xe.es.prototype.subStrict=function(e){return this.throwIfDisposed(),(0,Ls.UL)(this,e)},xe.es.prototype.sub=function(e){return this.throwIfDisposed(),(0,Ut.l)(this,e)},xe.es.prototype.sum=function(e,t){return this.throwIfDisposed(),(0,tr.S)(this,e,t)};var ti=n(1173);xe.es.prototype.tan=function(){return this.throwIfDisposed(),(0,ti.O)(this)};var ni=n(1869);xe.es.prototype.tanh=function(){return this.throwIfDisposed(),(0,ni.A)(this)},xe.es.prototype.tile=function(e){return this.throwIfDisposed(),(0,na.G)(this,e)},xe.es.prototype.toBool=function(){return this.throwIfDisposed(),(0,fe.p)(this,"bool")},xe.es.prototype.toFloat=function(){return this.throwIfDisposed(),(0,fe.p)(this,"float32")},xe.es.prototype.toInt=function(){return this.throwIfDisposed(),(0,fe.p)(this,"int32")};var ri=n(3243);xe.es.prototype.topk=function(e,t){return this.throwIfDisposed(),(0,ri.h)(this,e,t)},xe.es.prototype.transpose=function(e){return this.throwIfDisposed(),(0,Ve.p)(this,e)};var ai=n(9608);xe.es.prototype.unique=function(e){return this.throwIfDisposed(),(0,ai.T)(this,e)},xe.es.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),(0,aa.p)(this,e,t)},xe.es.prototype.unstack=function(e){return this.throwIfDisposed(),(0,za.H)(this,e)},xe.es.prototype.where=function(e,t){return this.throwIfDisposed(),(0,Ir.a)(e,this,t)},xe.es.prototype.zerosLike=function(){return this.throwIfDisposed(),(0,Ft.P)(this)}},9121:(e,t,n)=>{"use strict";n.d(t,{$H:()=>it,$w:()=>H,Ac:()=>he,BM:()=>De,CA:()=>ke,D2:()=>Ft,Dl:()=>at,Eh:()=>_,FK:()=>Tt,G3:()=>zt,GB:()=>Ct,Gc:()=>Rt,HE:()=>Z,HZ:()=>lt,Hh:()=>Re,Hm:()=>pt,IK:()=>l,IM:()=>v,J$:()=>ve,J_:()=>ge,Jh:()=>x,Kg:()=>tt,L8:()=>_t,Ly:()=>I,M2:()=>d,MI:()=>Pt,MR:()=>$t,MZ:()=>Ce,NE:()=>te,NZ:()=>Ge,OA:()=>Be,OR:()=>ie,OU:()=>Me,OV:()=>Fe,Om:()=>J,Oy:()=>m,PY:()=>$e,Ph:()=>bt,QC:()=>g,QR:()=>z,Qg:()=>me,Qi:()=>Je,Qv:()=>Gt,RF:()=>N,RO:()=>y,RQ:()=>kt,Ru:()=>Xt,SX:()=>Q,SY:()=>r,Sb:()=>ft,Sp:()=>s,T0:()=>W,TQ:()=>Et,TR:()=>P,To:()=>Ut,Tr:()=>Ot,Uy:()=>oe,VG:()=>a,Vb:()=>Ue,Vc:()=>V,Vf:()=>Te,Vn:()=>K,W0:()=>Ye,XL:()=>w,Xz:()=>i,Y0:()=>re,YF:()=>ne,Yo:()=>Ae,Zb:()=>Ie,Zz:()=>C,_V:()=>Yt,_Y:()=>dt,_k:()=>b,_t:()=>At,a5:()=>Nt,aJ:()=>p,av:()=>xe,b9:()=>jt,bK:()=>Dt,bV:()=>xt,c1:()=>Ve,cW:()=>Vt,ci:()=>U,cy:()=>Ke,de:()=>se,dp:()=>ct,e0:()=>gt,e6:()=>st,e7:()=>Se,eB:()=>qt,eZ:()=>_e,ek:()=>j,gJ:()=>$,h8:()=>Ht,hd:()=>ee,i5:()=>It,iH:()=>L,iJ:()=>fe,iW:()=>ye,iZ:()=>de,ik:()=>B,jM:()=>f,jQ:()=>We,je:()=>ue,kU:()=>Ne,kp:()=>Wt,ku:()=>He,lu:()=>Qt,ly:()=>et,m2:()=>Bt,mK:()=>mt,mT:()=>Oe,mc:()=>M,mh:()=>R,mm:()=>o,n9:()=>Lt,o0:()=>rt,o2:()=>F,oF:()=>vt,oH:()=>Y,oT:()=>u,p2:()=>wt,p4:()=>q,pe:()=>nt,q1:()=>pe,q2:()=>Le,q8:()=>ze,qC:()=>Ee,qW:()=>Qe,qi:()=>ce,qk:()=>ut,qw:()=>h,r7:()=>be,sE:()=>Mt,sH:()=>le,sJ:()=>c,sL:()=>G,us:()=>Kt,uv:()=>je,vF:()=>Pe,vt:()=>we,vw:()=>ae,w3:()=>St,wU:()=>A,wY:()=>Xe,we:()=>Ze,wm:()=>D,x1:()=>O,xJ:()=>ot,xQ:()=>yt,xn:()=>T,y7:()=>X,yQ:()=>qe,yj:()=>E,zb:()=>ht,zv:()=>S,zw:()=>k});const r="Abs",a="Acos",s="Acosh",o="Add",i="AddN",u="All",l="Any",c="ArgMax",p="ArgMin",d="Asin",h="Asinh",f="Atan",m="Atanh",g="Atan2",x="AvgPool",y="AvgPoolGrad",b="AvgPool3D",v="AvgPool3DGrad",w="BatchMatMul",k="BatchToSpaceND",S="Bincount",I="BroadcastTo",N="Cast",$="Ceil",T="ClipByValue",C="Complex",E="ComplexAbs",_="Concat",R="Conv2D",A="Conv2DBackpropFilter",D="Conv2DBackpropInput",O="Conv3D",F="Conv3DBackpropFilterV2",B="Conv3DBackpropInputV2",M="Cos",P="Cosh",L="Cumsum",V="CropAndResize",z="DenseBincount",W="DepthToSpace",U="DepthwiseConv2dNative",G="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",H="Diag",q="Dilation2D",j="Dilation2DBackpropInput",K="Dilation2DBackpropFilter",Y="RealDiv",Q="Elu",Z="EluGrad",J="Erf",ee="Equal",te="Exp",ne="ExpandDims",re="Expm1",ae="FFT",se="Fill",oe="FlipLeftRight",ie="Floor",ue="FloorDiv",le="FusedBatchNorm",ce="GatherV2",pe="GatherNd",de="Greater",he="GreaterEqual",fe="Identity",me="IFFT",ge="Imag",xe="IsFinite",ye="IsInf",be="IsNan",ve="LeakyRelu",we="Less",ke="LessEqual",Se="LinSpace",Ie="Log",Ne="Log1p",$e="LogicalAnd",Te="LogicalNot",Ce="LogicalOr",Ee="LogSoftmax",_e="LRN",Re="LRNGrad",Ae="Max",De="Maximum",Oe="MaxPool",Fe="MaxPoolGrad",Be="MaxPool3D",Me="MaxPool3DGrad",Pe="MaxPoolWithArgmax",Le="Mean",Ve="Min",ze="Minimum",We="MirrorPad",Ue="Mod",Ge="Multinomial",Xe="Multiply",He="Neg",qe="NotEqual",je="NonMaxSuppressionV3",Ke="NonMaxSuppressionV4",Ye="NonMaxSuppressionV5",Qe="OnesLike",Ze="OneHot",Je="Pack",et="PadV2",tt="Pool",nt="Pow",rt="Prelu",at="Prod",st="Range",ot="Real",it="Reciprocal",ut="Relu",lt="Reshape",ct="ResizeNearestNeighbor",pt="ResizeNearestNeighborGrad",dt="ResizeBilinear",ht="ResizeBilinearGrad",ft="Relu6",mt="Reverse",gt="Round",xt="Rsqrt",yt="ScatterNd",bt="Select",vt="Selu",wt="Slice",kt="Sin",St="Sinh",It="Sign",Nt="Sigmoid",$t="Softplus",Tt="Sqrt",Ct="Sum",Et="SpaceToBatchND",_t="SplitV",Rt="Softmax",At="SquaredDifference",Dt="Square",Ot="Sub",Ft="SparseToDense",Bt="StridedSlice",Mt="Tan",Pt="Tanh",Lt="Tile",Vt="TopK",zt="Transpose",Wt="Unique",Ut="Unpack",Gt="UnsortedSegmentSum",Xt="ZerosLike",Ht="Step",qt="FromPixels",jt="RotateWithOffset",Kt="_FusedMatMul",Yt="FusedConv2D",Qt="FusedDepthwiseConv2D"},6151:(e,t,n)=>{"use strict";n.d(t,{Li:()=>p,T3:()=>f,bt:()=>h,nE:()=>d,pI:()=>i,tr:()=>l,uk:()=>u,wC:()=>c});var r=n(2885),a=n(5938);const s=(0,a.R)("kernelRegistry",(()=>new Map)),o=(0,a.R)("gradRegistry",(()=>new Map));function i(e,t){const n=m(e,t);return s.get(n)}function u(e){return o.get(e)}function l(e){const t=s.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function c(e){const{kernelName:t,backendName:n}=e,r=m(t,n);s.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),s.set(r,e)}function p(e){const{kernelName:t}=e;o.has(t)&&(0,r.OB)().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),o.set(t,e)}function d(e,t){const n=m(e,t);if(!s.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);s.delete(n)}function h(e){if(!o.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);o.delete(e)}function f(e,t){l(e).forEach((e=>{c(Object.assign({},e,{backendName:t}))}))}function m(e,t){return`${t}_${e}`}},6235:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({abs_:function(e){const t=(0,s._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.BV.runKernel(a.yj,e)}{const e={x:t};return r.BV.runKernel(a.SY,e)}}})},7839:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({acos_:function(e){const t={x:(0,s._1)(e,"x","acos")};return r.BV.runKernel(a.VG,t)}})},1470:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({acosh_:function(e){const t={x:(0,s._1)(e,"x","acosh")};return r.BV.runKernel(a.Sp,t)}})},6407:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({add_:function(e,t){let n=(0,o._1)(e,"a","add"),i=(0,o._1)(t,"b","add");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.mm,u)}})},3135:(e,t,n)=>{"use strict";n.d(t,{Q:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({addN_:function(e){o.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),o.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,s._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!o.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const i=t;return r.BV.runKernel(a.Xz,i)}})},781:(e,t,n)=>{"use strict";n.d(t,{$:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({all_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","all","bool")},i={axis:t,keepDims:n};return r.BV.runKernel(a.oT,o,i)}})},2998:(e,t,n)=>{"use strict";n.d(t,{Y:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({any_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","any","bool")},i={axis:t,keepDims:n};return r.BV.runKernel(a.IK,o,i)}})},47:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({argMax_:function(e,t=0){const n={x:(0,s._1)(e,"x","argMax")},o={axis:t};return r.BV.runKernel(a.sJ,n,o)}})},7394:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({argMin_:function(e,t=0){const n={x:(0,s._1)(e,"x","argMin")},o={axis:t};return r.BV.runKernel(a.aJ,n,o)}})},2421:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({asin_:function(e){const t={x:(0,s._1)(e,"x","asin")};return r.BV.runKernel(a.M2,t)}})},1891:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({asinh_:function(e){const t={x:(0,s._1)(e,"x","asinh")};return r.BV.runKernel(a.qw,t)}})},7037:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({atan_:function(e){const t={x:(0,s._1)(e,"x","atan")};return r.BV.runKernel(a.jM,t)}})},9812:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({atan2_:function(e,t){let n=(0,o._1)(e,"a","atan2"),i=(0,o._1)(t,"b","atan2");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.QC,u)}})},369:(e,t,n)=>{"use strict";n.d(t,{C:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({atanh_:function(e){const t={x:(0,s._1)(e,"x","atanh")};return r.BV.runKernel(a.Oy,t)}})},5176:(e,t,n)=>{"use strict";n.d(t,{w:()=>p});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2271),u=n(2582),l=n(2668),c=n(4968);const p=(0,l.op)({avgPool_:function(e,t,n,l,p){const d=(0,s._1)(e,"x","avgPool","float32");o.hu(u.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let h=d,f=!1;3===d.rank&&(f=!0,h=(0,c.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),o.hu(4===h.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${h.rank}.`)),null!=p&&o.hu(o.GN(l),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${p} but got pad ${l}.`));const m={x:h},g={filterSize:t,strides:n,pad:l,dimRoundingMode:p};let x=r.BV.runKernel(a.Jh,m,g);return x=(0,i.p)(x,d.dtype),f?(0,c.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}})},1749:(e,t,n)=>{"use strict";n.d(t,{u:()=>d});var r=n(7097),a=n(4368),s=n(9121),o=n(3740),i=n(569),u=n(2271),l=n(2582),c=n(2668),p=n(4968);const d=(0,c.op)({avgPool3d_:function(e,t,n,c,d,h="NDHWC",f){null==f?f=[1,1,1]:(0,a.MX)("dilations is deprecated, this field will be gone in v3.0.0.");const m=(0,o._1)(e,"x","avgPool3d","float32");let g=m,x=!1;4===m.rank&&(x=!0,g=(0,p.X)(m,[1,m.shape[0],m.shape[1],m.shape[2],m.shape[3]])),i.hu(5===g.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${g.rank}.`)),i.hu("NDHWC"===h,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${h}`)),i.hu(l.jT(n,f),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${f}'`)),null!=d&&i.hu(i.GN(c),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${d} but got pad ${c}.`));const y={x:g},b={filterSize:t,strides:n,pad:c,dimRoundingMode:d,dataFormat:h,dilations:f};let v=r.BV.runKernel(s._k,y,b);return v=(0,u.p)(v,g.dtype),x?(0,p.X)(v,[v.shape[1],v.shape[2],v.shape[3],v.shape[4]]):v}})},3591:(e,t,n)=>{"use strict";n.d(t,{LJ:()=>c,Q3:()=>l,Vh:()=>s,YB:()=>a,kz:()=>o,lB:()=>u,rv:()=>i,sY:()=>p});var r=n(569);function a(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function s(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function o(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function i(e,t){return s(e,t.map((e=>1)),t)}function u(e,t,n){r.hu(a(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function l(e,t){if(a(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function p(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}},8441:(e,t,n)=>{"use strict";n.d(t,{E:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({batchToSpaceND_:function(e,t,n){const i=(0,s._1)(e,"x","batchToSpaceND"),u=t.reduce(((e,t)=>e*t));o.hu(i.rank>=1+t.length,(()=>`input rank is ${i.rank} but should be > than blockShape.length ${t.length}`)),o.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),o.hu(i.shape[0]%u==0,(()=>`input tensor batch is ${i.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${u}`));const l={x:i},c={blockShape:t,crops:n};return r.BV.runKernel(a.zw,l,c)}})},7505:(e,t,n)=>{"use strict";n.d(t,{t:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(4968);const u=(0,n(2668).op)({batchNorm_:function(e,t,n,u,l,c){null==c&&(c=.001);const p=(0,s._1)(e,"x","batchNorm"),d=(0,s._1)(t,"mean","batchNorm"),h=(0,s._1)(n,"variance","batchNorm");let f,m;null!=l&&(f=(0,s._1)(l,"scale","batchNorm")),null!=u&&(m=(0,s._1)(u,"offset","batchNorm")),o.hu(d.rank===h.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.hu(null==m||d.rank===m.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.hu(null==f||d.rank===f.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g=function(e){let t;return t=0===e.rank||1===e.rank?(0,i.X)(e,[1,1,1,e.size]):2===e.rank?(0,i.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(p),x={x:g,scale:f,offset:m,mean:d,variance:h},y={varianceEpsilon:c},b=r.BV.runKernel(a.sH,x,y);return(0,i.X)(b,p.shape)}})},7536:(e,t,n)=>{"use strict";n.d(t,{Ir:()=>v,Lf:()=>k,NT:()=>w,UL:()=>I,Wz:()=>b,_j:()=>y,r7:()=>S,sz:()=>x,zq:()=>g});var r=n(4368),a=n(3740),s=n(569),o=n(6407),i=n(1274),u=n(632),l=n(4513),c=n(5228),p=n(4841),d=n(2668),h=n(3453),f=n(5265),m=n(827);const g=(0,d.op)({addStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","addStrict"),i=(0,a._1)(t,"b","addStrict");return s.k5(n.shape,i.shape,"Error in addStrict: "),(0,o.I)(n,i)}}),x=(0,d.op)({divStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","div"),o=(0,a._1)(t,"b","div");return s.k5(n.shape,o.shape,"Error in divideStrict: "),(0,i.h)(n,o)}}),y=(0,d.op)({maximumStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","maximumStrict"),o=(0,a._1)(t,"b","maximumStrict");return s.k5(n.shape,o.shape,"Error in maximumStrict: "),(0,u.g)(n,o)}}),b=(0,d.op)({minimumStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","minimumStrict"),o=(0,a._1)(t,"b","minimumStrict");return s.k5(n.shape,o.shape,"Error in minimumStrict: "),(0,l.L)(n,o)}}),v=(0,d.op)({modStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","modStrict"),o=(0,a._1)(t,"b","modStrict");return s.k5(n.shape,o.shape,"Error in modStrict: "),(0,c.w)(n,o)}}),w=(0,d.op)({mulStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","mul"),o=(0,a._1)(t,"b","mul");return s.k5(n.shape,o.shape,"Error in multiplyStrict: "),(0,p.d)(n,o)}}),k=(0,d.op)({powStrict_:function(e,t){return(0,r.MX)("strict variants of ops have been deprecated and will be removed in future"),s.k5(e.shape,t.shape,"Error in powStrict: "),(0,h.s)(e,t)}}),S=(0,d.op)({squaredDifferenceStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","squaredDifferenceStrict"),o=(0,a._1)(t,"b","squaredDifferenceStrict");return s.k5(n.shape,o.shape,"Error in squaredDifferenceStrict: "),(0,f.$)(n,o)}}),I=(0,d.op)({subStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","subStrict"),o=(0,a._1)(t,"b","subStrict");return s.k5(n.shape,o.shape,"Error in subStrict: "),(0,m.l)(n,o)}})},3865:(e,t,n)=>{"use strict";n.d(t,{y:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({bincount_:function(e,t,n){const i=(0,s._1)(e,"x","bincount"),u=(0,s._1)(t,"weights","bincount");o.hu("int32"===i.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${i.dtype}`)),o.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),o.hu(u.size===i.size||0===u.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${i.shape}, weights shape: ${u.shape}.`));const l={x:i,weights:u},c={size:n};return r.BV.runKernel(a.zv,l,c)}})},8247:(e,t,n)=>{"use strict";n.d(t,{U:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(8723),i=n(2668),u=n(4968);const l=(0,i.op)({broadcastTo_:function(e,t){let n=(0,s._1)(e,"broadcastTo","x");const i=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,u.X)(n,e)}const l=n.shape,c=Array.from(t);for(let e=t.length-1;e>=0;e--)if(l[e]===t[e])c[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${i}] cannot be broadcast to [${t}].`);if(0===c.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,o.d)(n);const p={x:n},d={reps:c};return r.BV.runKernel(a.n9,p,d)}})},2200:(e,t,n)=>{"use strict";function r(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function a(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function s(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}n.d(t,{$N:()=>s,RR:()=>a,XF:()=>r})},2657:(e,t,n)=>{"use strict";n.d(t,{f:()=>s});var r=n(4077),a=n(569);function s(e,t="float32",n){return t=t||"float32",a.Mu(e),new r.YD(e,t,n)}},2271:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({cast_:function(e,t){const n=(0,s._1)(e,"x","cast");if(!o.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const i={x:n},u={dtype:t};return r.BV.runKernel(a.RF,i,u)}})},6825:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({ceil_:function(e){const t={x:(0,s._1)(e,"x","ceil")};return r.BV.runKernel(a.gJ,t)}})},2279:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({clipByValue_:function(e,t,n){const i=(0,s._1)(e,"x","clipByValue");o.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const u={x:i},l={clipValueMin:t,clipValueMax:n};return r.BV.runKernel(a.xn,u,l)}})},8723:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({clone_:function(e){const t={x:(0,s._1)(e,"x","clone","string_or_numeric")};return r.BV.runKernel(a.iJ,t)}})},3334:(e,t,n)=>{"use strict";n.d(t,{FG:()=>y,O_:()=>x,SF:()=>g,bZ:()=>f,g1:()=>m,zV:()=>h});var r=n(4368),a=n(3740),s=n(569),o=n(6477),i=n(636),u=n(7630),l=n(6573),c=n(624),p=n(6500),d=n(2668);const h=(0,d.op)({equalStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","equalStrict"),i=(0,a._1)(t,"b","equalStrict");return(0,s.k5)(n.shape,i.shape,"Error in equalStrict: "),(0,o.D)(n,i)}}),f=(0,d.op)({greaterEqualStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","greaterEqualStrict"),o=(0,a._1)(t,"b","greaterEqualStrict");return(0,s.k5)(n.shape,o.shape,"Error in greaterEqualStrict: "),(0,u.b)(n,o)}}),m=(0,d.op)({greaterStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","greaterStrict"),o=(0,a._1)(t,"b","greaterStrict");return(0,s.k5)(n.shape,o.shape,"Error in greaterStrict: "),(0,i.p)(n,o)}}),g=(0,d.op)({lessEqualStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","lessEqualStrict"),o=(0,a._1)(t,"b","lessEqualStrict");return(0,s.k5)(n.shape,o.shape,"Error in lessEqualStrict: "),(0,c.z)(n,o)}}),x=(0,d.op)({lessStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","lessStrict"),o=(0,a._1)(t,"b","lessStrict");return(0,s.k5)(n.shape,o.shape,"Error in lessStrict: "),(0,l.d)(n,o)}}),y=(0,d.op)({notEqualStrict_:function(e,t){(0,r.MX)("strict variants of ops have been deprecated and will be removed in future");const n=(0,a._1)(e,"a","notEqualStrict"),o=(0,a._1)(t,"b","notEqualStrict");return(0,s.k5)(n.shape,o.shape,"Error in notEqualStrict: "),(0,p.Q)(n,o)}})},1661:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({complex_:function(e,t){const n=(0,s._1)(e,"real","complex"),i=(0,s._1)(t,"imag","complex");o.k5(n.shape,i.shape,`real and imag shapes, ${n.shape} and ${i.shape}, must match in call to tf.complex().`);const u={real:n,imag:i};return r.BV.runKernel(a.Zz,u)}})},6884:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(8723);const u=(0,n(2668).op)({concat_:function(e,t=0){(0,o.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,s.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,i.d)(n[0]);const u=n,l={axis:t};return r.BV.runKernel(a.Eh,u,l)}})},1355:(e,t,n)=>{"use strict";n.d(t,{P:()=>l});var r=n(3740),a=n(569),s=n(4794),o=n(2582),i=n(2668),u=n(4968);const l=(0,i.op)({conv1d_:function(e,t,n,i,l="NWC",c=1,p){const d=(0,r._1)(e,"x","conv1d"),h=(0,r._1)(t,"filter","conv1d");let f=d,m=!1;2===d.rank&&(m=!0,f=(0,u.X)(d,[1,d.shape[0],d.shape[1]])),a.hu(3===f.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${f.rank}.`)),a.hu(3===h.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${h.rank}.`)),null!=p&&a.hu(a.GN(i),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${p} but got pad ${i}.`)),a.hu(f.shape[2]===h.shape[1],(()=>`Error in conv1d: depth of input (${f.shape[2]}) must match input depth for filter ${h.shape[1]}.`)),a.hu(o.jT(n,c),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`)),a.hu("NWC"===l,(()=>`Error in conv1d: got dataFormat of ${l} but only NWC is currently supported.`));const g=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),x=(0,u.X)(f,[f.shape[0],1,f.shape[1],f.shape[2]]),y=[1,n],b=[1,c],v=(0,s.T)(x,g,y,i,"NHWC",b,p);return m?(0,u.X)(v,[v.shape[2],v.shape[3]]):(0,u.X)(v,[v.shape[0],v.shape[2],v.shape[3]])}})},4794:(e,t,n)=>{"use strict";n.d(t,{T:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({conv2d_:function(e,t,n,u,c="NHWC",p=[1,1],d){const h=(0,s._1)(e,"x","conv2d"),f=(0,s._1)(t,"filter","conv2d");let m=h,g=!1;3===h.rank&&(g=!0,m=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),o.hu(4===m.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${m.rank}.`)),o.hu(4===f.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${f.rank}.`)),null!=d&&o.hu(o.GN(u),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${d} but got pad ${u}.`));const x="NHWC"===c?m.shape[3]:m.shape[1];o.hu(x===f.shape[2],(()=>`Error in conv2d: depth of input (${x}) must match input depth for filter ${f.shape[2]}.`)),o.hu(i.jT(n,p),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${p}'`));const y={x:m,filter:f},b={strides:n,pad:u,dataFormat:c,dilations:p,dimRoundingMode:d},v=r.BV.runKernel(a.mh,y,b);return g?(0,l.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},6013:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var r=n(7097),a=n(9121),s=n(569),o=n(2668),i=n(4968);const u=(0,o.op)({conv2DBackpropFilter_:function(e,t,n,o,u,l="NHWC",c){let p=e;3===e.rank&&(p=(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let d=t;3===d.rank&&(d=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),s.hu(4===p.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${p.shape}.`)),s.hu(4===d.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${d.shape}.`)),s.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const h="NHWC"===l?p.shape[3]:p.shape[1],f="NHWC"===l?d.shape[3]:d.shape[1];s.hu(h===n[2],(()=>`Error in conv2dDerFilter: depth of input ${h}) must match input depth in filter (${n[2]}.`)),s.hu(f===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${f}) must match output depth for filter (${n[3]}).`)),null!=c&&s.hu(s.GN(u),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${c} but got pad ${u}.`));const m={x:p,dy:d},g={strides:o,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:n};return r.BV.runKernel(a.wU,m,g)}})},9832:(e,t,n)=>{"use strict";n.d(t,{_:()=>u});var r=n(7097),a=n(9121),s=n(569),o=n(2668),i=n(4968);const u=(0,o.op)({conv2DBackpropInput_:function(e,t,n,o,u,l="NHWC",c){s.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let p=e,d=t,h=!1;3===t.rank&&(h=!0,d=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),p=[1,e[0],e[1],e[2]]),s.hu(4===p.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${p.length}.`)),s.hu(4===d.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${d.rank}`)),s.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const f="NHWC"===l?p[3]:p[1],m="NHWC"===l?d.shape[3]:d.shape[1];s.hu(f===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${f}) must match input depth for filter ${n.shape[2]}.`)),s.hu(m===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${m}) must match output depth for filter ${n.shape[3]}.`)),null!=c&&s.hu(s.GN(u),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${c} but got pad ${u}.`));const g={dy:d,filter:n},x={strides:o,pad:u,dataFormat:l,dimRoundingMode:c,inputShape:p},y=r.BV.runKernel(a.wm,g,x);return h?(0,i.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},1405:(e,t,n)=>{"use strict";n.d(t,{b:()=>s});var r=n(3740),a=n(9832);const s=(0,n(2668).op)({conv2dTranspose_:function(e,t,n,s,o,i){const u=(0,r._1)(e,"x","conv2dTranspose"),l=(0,r._1)(t,"filter","conv2dTranspose");return(0,a._)(n,u,l,s,o,"NHWC",i)}})},473:(e,t,n)=>{"use strict";n.d(t,{p:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({conv3d_:function(e,t,n,u,c="NDHWC",p=[1,1,1]){const d=(0,s._1)(e,"x","conv3d"),h=(0,s._1)(t,"filter","conv3d");let f=d,m=!1;4===d.rank&&(m=!0,f=(0,l.X)(d,[1,d.shape[0],d.shape[1],d.shape[2],d.shape[3]])),o.hu(5===f.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${f.rank}.`)),o.hu(5===h.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${h.rank}.`)),o.hu(f.shape[4]===h.shape[3],(()=>`Error in conv3d: depth of input (${f.shape[4]}) must match input depth for filter ${h.shape[3]}.`)),o.hu((0,i.jT)(n,p),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${p}'`)),o.hu("NDHWC"===c,(()=>`Error in conv3d: got dataFormat of ${c} but only NDHWC is currently supported.`));const g={x:f,filter:h},x={strides:n,pad:u,dataFormat:c,dilations:p},y=r.BV.runKernel(a.x1,g,x);return m?(0,l.X)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}})},7594:(e,t,n)=>{"use strict";n.d(t,{_:()=>u});var r=n(7097),a=n(9121),s=n(569),o=n(2668),i=n(4968);const u=(0,o.op)({conv3DBackpropInput_:function(e,t,n,o,u){s.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let l=e,c=t,p=!1;4===t.rank&&(p=!0,c=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),l=[1,e[0],e[1],e[2],e[3]]);const d=l[4],h=c.shape[4];s.hu(5===l.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${l.length}.`)),s.hu(5===c.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`)),s.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),s.hu(d===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${d}) must match input depth for filter ${n.shape[3]}.`)),s.hu(h===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[4]}.`));const f={dy:c,filter:n},m={pad:u,strides:o,inputShape:l},g=r.BV.runKernel(a.ik,f,m);return p?(0,i.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},2582:(e,t,n)=>{"use strict";function r(e,t,n,r,a="NHWC",s){return o(e,[...t,e[3]],n,s,r,null,null,m(a))}function a(e,t,n,r,a,s,i="channelsLast"){const[u,c]=l(t);let p;if("channelsLast"===i)p=[u,c,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);p=[u,c,e[1],e[1]]}return o(e,p,n,r,a,s,!1,i)}function s(e,t,n,r,a,s,o="NDHWC"){const[u,l,p]=c(t);let d,h;if("NDHWC"===o)h="channelsLast",d=[u,l,p,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",d=[u,l,p,e[1],e[1]]}return i(e,d,n,r,a,!1,h,s)}function o(e,t,n,r,a,s,o=!1,i="channelsLast"){let[c,h,f,m]=[-1,-1,-1,-1];if("channelsLast"===i)[c,h,f,m]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[c,m,h,f]=e}const[g,x,,y]=t,[b,v]=l(n),[w,k]=l(r),S=p(g,w),I=p(x,k),{padInfo:N,outHeight:$,outWidth:T}=function(e,t,n,r,a,s,o,i,l){let c,p,h;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=u(e,t,n));const s=e[1];return[d((e[0]-t+2*r)/n+1,a),d((s-t+2*r)/n+1,a)]}([t,n],s,r,e,i);p=a[0],h=a[1]}else if("same"===e){p=Math.ceil(t/r),h=Math.ceil(n/a);const e=Math.max(0,(p-1)*r+s-t),i=Math.max(0,(h-1)*a+o-n),u=Math.floor(e/2),l=e-u,d=Math.floor(i/2);c={top:u,bottom:l,left:d,right:i-d,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},p=Math.ceil((t-s+1)/r),h=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const u="channelsLast"===l?e[1][0]:e[2][0],f="channelsLast"===l?e[1][1]:e[2][1],m="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1];c={top:u,bottom:f,left:m,right:g,type:0===u&&0===f&&0===m&&0===g?"VALID":"EXPLICIT"},p=d((t-s+u+f)/r+1,i),h=d((n-o+m+g)/a+1,i)}}return{padInfo:c,outHeight:p,outWidth:h}}(a,h,f,b,v,S,I,s,i),C=o?y*m:y;let E;return"channelsFirst"===i?E=[c,C,$,T]:"channelsLast"===i&&(E=[c,$,T,C]),{batchSize:c,dataFormat:i,inHeight:h,inWidth:f,inChannels:m,outHeight:$,outWidth:T,outChannels:C,padInfo:N,strideHeight:b,strideWidth:v,filterHeight:g,filterWidth:x,effectiveFilterHeight:S,effectiveFilterWidth:I,dilationHeight:w,dilationWidth:k,inShape:e,outShape:E,filterShape:t}}function i(e,t,n,r,a,s=!1,o="channelsLast",i){let[l,h,f,m,g]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,h,f,m,g]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,g,h,f,m]=e}const[x,y,b,,v]=t,[w,k,S]=c(n),[I,N,$]=c(r),T=p(x,I),C=p(y,N),E=p(b,$),{padInfo:_,outDepth:R,outHeight:A,outWidth:D}=function(e,t,n,r,a,s,o,i,l,c,p){let h,f,m,g;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=u(e,t,r));const o=e[1],i=e[2];return[d((e[0]-t+2*a)/r+1,s),d((o-t+2*a)/r+1,s),d((i-t+2*a)/r+1,s),1]}([t,n,r,1],i,0,a,e,p);f=s[0],m=s[1],g=s[2]}else if("same"===e){f=Math.ceil(t/a),m=Math.ceil(n/s),g=Math.ceil(r/o);const e=(f-1)*a+i-t,u=(m-1)*s+l-n,p=(g-1)*o+c-r,d=Math.floor(e/2),x=e-d,y=Math.floor(u/2),b=u-y,v=Math.floor(p/2);h={top:y,bottom:b,left:v,right:p-v,front:d,back:x,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((t-i+1)/a),m=Math.ceil((n-l+1)/s),g=Math.ceil((r-c+1)/o)}return{padInfo:h,outDepth:f,outHeight:m,outWidth:g}}(a,h,f,m,w,k,S,T,C,E,i),O=s?v*g:v;let F;return"channelsFirst"===o?F=[l,O,R,A,D]:"channelsLast"===o&&(F=[l,R,A,D,O]),{batchSize:l,dataFormat:o,inDepth:h,inHeight:f,inWidth:m,inChannels:g,outDepth:R,outHeight:A,outWidth:D,outChannels:O,padInfo:_,strideDepth:w,strideHeight:k,strideWidth:S,filterDepth:x,filterHeight:y,filterWidth:b,effectiveFilterDepth:T,effectiveFilterHeight:C,effectiveFilterWidth:E,dilationDepth:I,dilationHeight:N,dilationWidth:$,inShape:e,outShape:F,filterShape:t}}function u(e,t,n,r=1){const a=p(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function l(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function c(e){return"number"==typeof e?[e,e,e]:e}function p(e,t){return t<=1?e:e+(e-1)*(t-1)}function d(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function h(e){const[t,n,r]=l(e);return 1===t&&1===n&&1===r}function f(e,t){return h(e)||h(t)}function m(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}n.d(t,{I0:()=>h,Ix:()=>o,Rf:()=>r,Xw:()=>a,aO:()=>u,jT:()=>f,jw:()=>i,pl:()=>s,sl:()=>m})},173:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({cos_:function(e){const t={x:(0,s._1)(e,"x","cos")};return r.BV.runKernel(a.mc,t)}})},2699:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({cosh_:function(e){const t={x:(0,s._1)(e,"x","cosh")};return r.BV.runKernel(a.TR,t)}})},7405:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({cumsum_:function(e,t=0,n=!1,o=!1){const i={x:(0,s._1)(e,"x","cumsum")},u={axis:t,exclusive:n,reverse:o};return r.BV.runKernel(a.iH,i,u)}})},5746:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({denseBincount_:function(e,t,n,i=!1){const u=(0,s._1)(e,"x","denseBincount"),l=(0,s._1)(t,"weights","denseBincount");o.hu("int32"===u.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${u.dtype}`)),o.hu(u.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${u.rank}.`)),o.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),o.hu(l.size===u.size||0===l.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${u.shape}, weights shape: ${l.shape}.`));const c={x:u,weights:l},p={size:n,binaryOutput:i};return r.BV.runKernel(a.QR,c,p)}})},9112:(e,t,n)=>{"use strict";n.d(t,{n:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({depthToSpace_:function(e,t,n="NHWC"){const i=(0,s._1)(e,"x","depthToSpace"),u="NHWC"===n?i.shape[1]:i.shape[2],l="NHWC"===n?i.shape[2]:i.shape[3],c="NHWC"===n?i.shape[3]:i.shape[1];o.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t}  for depthToSpace with input shape\n    ${i.shape}`)),o.hu(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t} for depthToSpace with input shape\n        ${i.shape}`)),o.hu(c%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${i.shape}`));const p={x:i},d={blockSize:t,dataFormat:n};return r.BV.runKernel(a.T0,p,d)}})},4718:(e,t,n)=>{"use strict";n.d(t,{B:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({depthwiseConv2d_:function(e,t,n,i,l="NHWC",c=[1,1],p){const d=(0,s._1)(e,"x","depthwiseConv2d"),h=(0,s._1)(t,"filter","depthwiseConv2d");let f=d,m=!1;3===d.rank&&(m=!0,f=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),o.hu(4===f.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),o.hu(4===h.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),o.hu(f.shape[3]===h.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null!=p&&o.hu(o.GN(i),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${p} but got pad ${i}.`));const g={x:f,filter:h},x={strides:n,pad:i,dataFormat:l,dilations:c,dimRoundingMode:p},y=r.BV.runKernel(a.ci,g,x);return m?(0,u.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},8098:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var r=n(7097),a=n(9121),s=n(2668),o=n(4968);const i=(0,s.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,i,u=[1,1],l){let c=e;3===e.rank&&(c=(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let p=t;3===p.rank&&(p=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={x:c,dy:p},h={strides:s,pad:i,dimRoundingMode:l,dilations:u,filterShape:n};return r.BV.runKernel(a.sL,d,h)}})},4375:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var r=n(7097),a=n(9121),s=n(2668),o=n(4968);const i=(0,s.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,i,u=[1,1],l){let c=t,p=!1;3===t.rank&&(p=!0,c=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={dy:c,filter:n},h={strides:s,pad:i,dimRoundingMode:l,dilations:u,inputShape:e},f=r.BV.runKernel(a.y7,d,h);return p?(0,o.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},557:(e,t,n)=>{"use strict";n.d(t,{W:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({dilation2d_:function(e,t,n,i,l=[1,1],c="NHWC"){const p=(0,s._1)(e,"x","dilation2d"),d=(0,s._1)(t,"filter","dilation2d");o.hu(3===p.rank||4===p.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${p.rank}.`)),o.hu(3===d.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${d.rank}.`)),o.hu("NHWC"===c,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${c}`));let h=p,f=!1;3===p.rank&&(h=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]]),f=!0);const m={x:h,filter:d},g={strides:n,pad:i,dilations:l},x=r.BV.runKernel(a.p4,m,g);return f?(0,u.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}})},1274:(e,t,n)=>{"use strict";n.d(t,{h:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(9165);const u=(0,n(2668).op)({div_:function(e,t){let n=(0,o._1)(e,"a","div"),u=(0,o._1)(t,"b","div");if([n,u]=(0,s.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return(0,i.q)(n,u);const l={a:n,b:u};return r.BV.runKernel(a.oH,l,{})}})},9322:(e,t,n)=>{"use strict";n.d(t,{N:()=>c});var r=n(747),a=n(3740),s=n(1274),o=n(6477),i=n(2668),u=n(5912),l=n(6577);const c=(0,i.op)({divNoNan_:function(e,t){let n=(0,a._1)(e,"a","div"),i=(0,a._1)(t,"b","div");[n,i]=(0,r.makeTypesMatch)(n,i);const c=(0,s.h)(n,i),p=(0,l.P)(c),d=(0,o.D)(i,p);return(0,u.a)(d,p,c)}})},548:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(3740),a=n(569),s=n(8687),o=n(2668),i=n(4968);const u=(0,o.op)({dot_:function(e,t){const n=(0,r._1)(e,"t1","dot"),o=(0,r._1)(t,"t2","dot");a.hu(!(1!==n.rank&&2!==n.rank||1!==o.rank&&2!==o.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${o.rank}.`));const u=1===n.rank?n.size:n.shape[1],l=1===o.rank?o.size:o.shape[0];if(a.hu(u===l,(()=>`Error in dot: inner dimensions of inputs must match, but got ${u} and ${l}.`)),1===n.rank&&1===o.rank){const e=(0,i.X)(n,[1,-1]),t=(0,i.X)(o,[-1,1]),r=(0,s.O)(e,t);return(0,i.X)(r,[])}if(1===n.rank&&2===o.rank){const e=(0,i.X)(n,[1,-1]),t=(0,i.X)(o,[o.shape[0],o.shape[1]]),r=(0,s.O)(e,t);return(0,i.X)(r,[r.size])}if(2===n.rank&&1===o.rank){const e=(0,i.X)(o,[-1,1]),t=(0,s.O)(n,e);return(0,i.X)(t,[t.size])}{const e=(0,i.X)(o,[o.shape[0],o.shape[1]]);return(0,s.O)(n,e)}}})},3233:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({elu_:function(e){const t={x:(0,s._1)(e,"x","elu")};return r.BV.runKernel(a.SX,t)}})},6477:(e,t,n)=>{"use strict";n.d(t,{D:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({equal_:function(e,t){let n=(0,o._1)(e,"a","equal"),u=(0,o._1)(t,"b","equal");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.hd,l)}})},4650:(e,t,n)=>{"use strict";n.d(t,{q:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2271);const u=(0,n(2668).op)({erf_:function(e){let t=(0,s._1)(e,"x","erf");o.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,i.p)(t,"float32"));const n={x:t};return r.BV.runKernel(a.Om,n)}})},4842:(e,t,n)=>{"use strict";n.d(t,{Q:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({exp_:function(e){const t={x:(0,s._1)(e,"x","exp")};return r.BV.runKernel(a.NE,t)}})},1300:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({expandDims_:function(e,t=0){const n=(0,s._1)(e,"x","expandDims","string_or_numeric");o.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const i={input:n},u={dim:t};return r.BV.runKernel(a.YF,i,u)}})},3426:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({expm1_:function(e){const t={x:(0,s._1)(e,"x","expm1")};return r.BV.runKernel(a.Y0,t)}})},4006:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(7097),a=n(9121);function s(e,t,n){const s={shape:e,value:t,dtype:n};return r.BV.runKernel(a.de,{},s)}},6943:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({floor_:function(e){const t={x:(0,s._1)(e,"x","floor")};return r.BV.runKernel(a.OR,t)}})},9165:(e,t,n)=>{"use strict";n.d(t,{q:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({floorDiv_:function(e,t){let n=(0,o._1)(e,"a","floorDiv"),i=(0,o._1)(t,"b","floorDiv");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.je,u)}})},4624:(e,t,n)=>{"use strict";n.r(t),n.d(t,{conv2d:()=>y,depthwiseConv2d:()=>k,matMul:()=>I});var r=n(7097),a=n(633),s=n(9121),o=n(747),i=n(3740),u=n(569),l=n(6407),c=n(2200),p=n(4794),d=n(6013),h=n(9832),f=n(2582),m=n(9323),g=n(2668),x=n(4968);const y=(0,g.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:g,dataFormat:y="NHWC",dilations:b=[1,1],dimRoundingMode:v,bias:w,activation:k="linear",preluActivationWeights:S,leakyreluAlpha:I}){if(k=k||"linear",!1===(0,m.uy)(r.BV.state.gradientDepth,k)){let r=(0,p.T)(e,t,n,g,y,b,v);return null!=w&&(r=(0,l.I)(r,w)),(0,m.QH)(r,k,S,I)}const N=(0,i._1)(e,"x","conv2d"),$=(0,i._1)(t,"filter","conv2d");let T=N,C=!1;3===N.rank&&(C=!0,T=(0,x.X)(N,[1,N.shape[0],N.shape[1],N.shape[2]])),u.hu(4===T.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${T.rank}.`)),u.hu(4===$.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${$.rank}.`)),null!=v&&u.hu(u.GN(g),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${v} but got pad ${g}.`)),u.hu(T.shape[3]===$.shape[2],(()=>`Error in conv2d: depth of input (${T.shape[3]}) must match input depth for filter ${$.shape[2]}.`)),u.hu(f.jT(n,b),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${b}'`)),u.hu("NHWC"===y,(()=>`Error in conv2d: got dataFormat of ${y} but only NHWC is currently supported.`));const E=f.Ix(T.shape,$.shape,n,b,g,v);let _,R;null!=w&&(_=(0,i._1)(w,"bias","fused conv2d"),[_]=(0,o.makeTypesMatch)(_,N),c.$N(E.outShape,_.shape)),null!=S&&(R=(0,i._1)(S,"prelu weights","fused conv2d"));const A=(e,t)=>{const[r,a,s,o]=t,i=(0,m.Fr)(e,s,k);u.hu(f.I0(b),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${b}'`));const l=[(0,h._)(a.shape,i,r,n,g),(0,d.p)(a,i,r.shape,n,g)];if(null!=o){const e=(0,m.pf)(o,i);l.push(e)}return l},D={x:T,filter:$,bias:_,preluActivationWeights:R},O={strides:n,pad:g,dataFormat:y,dilations:b,dimRoundingMode:v,activation:k,leakyreluAlpha:I};if(null==w){const e=(0,a.cb)(((e,t,n)=>{let a=r.BV.runKernel(s._V,D,O);return n([t,e,a]),C&&(a=(0,x.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:A}}));return e(T,$)}{const e=(0,a.cb)(((e,t,n,a)=>{let o=r.BV.runKernel(s._V,D,O);return a([t,e,o,n]),C&&(o=(0,x.X)(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:A}}));return e(T,$,_)}}});var b=n(4718),v=n(8098),w=n(4375);const k=(0,g.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:p,dataFormat:d="NHWC",dilations:h=[1,1],dimRoundingMode:g,bias:y,activation:k="linear",preluActivationWeights:S,leakyreluAlpha:I}){if(!1===(0,m.uy)(r.BV.state.gradientDepth,k)){let r=(0,b.B)(e,t,n,p,d,h,g);return null!=y&&(r=(0,l.I)(r,y)),(0,m.QH)(r,k,S,I)}const N=(0,i._1)(e,"x","depthwiseConv2d"),$=(0,i._1)(t,"filter","depthwiseConv2d");let T=N,C=!1;3===N.rank&&(C=!0,T=(0,x.X)(N,[1,N.shape[0],N.shape[1],N.shape[2]])),u.hu(4===T.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${T.rank}.`)),u.hu(4===$.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${$.rank}.`)),u.hu(T.shape[3]===$.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${T.shape[3]}) must match the inChannels dimension in filter ${$.shape[2]}.`)),null==h&&(h=[1,1]),u.hu(f.jT(n,h),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${h}'`)),null!=g&&u.hu(u.GN(p),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${g} but got pad ${p}.`));const E=f.Ix(T.shape,$.shape,n,h,p,g,!0);let _,R;null!=y&&(_=(0,i._1)(y,"bias","fused conv2d"),[_]=(0,o.makeTypesMatch)(_,N),c.$N(E.outShape,_.shape)),null!=S&&(R=(0,i._1)(S,"prelu weights","fused depthwiseConv2d"));const A=(e,t)=>{u.hu(f.I0(h),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${h}'`));const[r,a,s,o]=t,i=(0,m.Fr)(e,s,k),l=(0,w.v)(a.shape,i,r,n,p,h,g),c=(0,v.z)(a,i,r.shape,n,p,h,g);return null!=o?[l,c,(0,m.pf)(_,i)]:[l,c]},D={x:T,filter:$,bias:_,preluActivationWeights:R},O={strides:n,pad:p,dataFormat:d,dilations:h,dimRoundingMode:g,activation:k,leakyreluAlpha:I};if(null==y){const e=(0,a.cb)(((e,t,n)=>{let a=r.BV.runKernel(s.lu,D,O);return n([t,e,a]),C&&(a=(0,x.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:A}}));return e(T,$)}{const e=(0,a.cb)(((e,t,n,a)=>{let o=r.BV.runKernel(s.lu,D,O);return a([t,e,o,n]),C&&(o=(0,x.X)(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:A}}));return e(T,$,_)}}});var S=n(8687);const I=(0,g.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:p=!1,bias:d,activation:h="linear",preluActivationWeights:f,leakyreluAlpha:g}){if(!1===(0,m.uy)(r.BV.state.gradientDepth,h)){let r=(0,S.O)(e,t,n,p);return null!=d&&(r=(0,l.I)(r,d)),(0,m.QH)(r,h,f,g)}let y=(0,i._1)(e,"a","fused matMul"),b=(0,i._1)(t,"b","fused matMul");[y,b]=(0,o.makeTypesMatch)(y,b);const v=n?y.shape[y.rank-2]:y.shape[y.rank-1],w=p?b.shape[b.rank-1]:b.shape[b.rank-2],k=n?y.shape[y.rank-1]:y.shape[y.rank-2],I=p?b.shape[b.rank-2]:b.shape[b.rank-1],N=y.shape.slice(0,-2),$=b.shape.slice(0,-2),T=u.NA(N),C=u.NA($);u.hu(y.rank>=2&&b.rank>=2&&y.rank===b.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${y.rank} and ${b.rank}.`)),u.hu(u.cO(N,$),(()=>`Error in fused matMul: outer dimensions (${N}) and (${$}) of Tensors with shapes ${y.shape} and ${b.shape} must match.`)),u.hu(v===w,(()=>`Error in fused matMul: inner shapes (${v}) and (${w}) of Tensors with shapes ${y.shape} and ${b.shape} and transposeA=${n} and transposeB=${p} must match.`));const E=y.shape.slice(0,-2).concat([k,I]),_=n?(0,x.X)(y,[T,v,k]):(0,x.X)(y,[T,k,v]),R=p?(0,x.X)(b,[C,I,w]):(0,x.X)(b,[C,w,I]);let A,D;null!=d&&(A=(0,i._1)(d,"bias","fused matMul"),[A]=(0,o.makeTypesMatch)(A,y),c.$N(E,A.shape)),null!=f&&(D=(0,i._1)(f,"prelu weights","fused matMul"));const O=(e,t)=>{const[r,a,s,o]=t,i=(0,m.Fr)((0,x.X)(e,s.shape),s,h);let u,l;return n||p?!n&&p?(u=(0,S.O)(i,a,!1,!1),l=(0,S.O)(i,r,!0,!1)):n&&!p?(u=(0,S.O)(a,i,!1,!0),l=(0,S.O)(r,i,!1,!1)):(u=(0,S.O)(a,i,!0,!0),l=(0,S.O)(i,r,!0,!0)):(u=(0,S.O)(i,a,!1,!0),l=(0,S.O)(r,i,!0,!1)),null!=d?[u,l,(0,m.pf)(o,i)]:[u,l]},F={a:_,b:R,bias:A,preluActivationWeights:D},B={transposeA:n,transposeB:p,activation:h,leakyreluAlpha:g};if(null==d){const e=(0,a.cb)(((e,t,n)=>{const a=r.BV.runKernel(s.us,F,B);return n([e,t,a]),{value:(0,x.X)(a,E),gradFunc:O}}));return e(_,R)}{const e=(0,a.cb)(((e,t,n,a)=>{const o=r.BV.runKernel(s.us,F,B);return a([e,t,o,n]),{value:(0,x.X)(o,E),gradFunc:O}}));return e(_,R,A)}}})},9323:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>h,QH:()=>m,pf:()=>f,uy:()=>g});var r=n(2200),a=n(3233),s=n(9133),o=n(4841),i=n(8151),u=n(7409),l=n(3582),c=n(4968),p=n(1901),d=n(5475);function h(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,o.d)(e,(0,p.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function f(e,t){let n=t;const a=r.RR(e.shape,t.shape);return a.length>0&&(n=(0,d.S)(n,a)),(0,c.X)(n,e.shape)}function m(e,t,n,r){if("linear"===t)return e;if("relu"===t)return(0,u.U)(e);if("elu"===t)return(0,a.p)(e);if("relu6"===t)return(0,l.b)(e);if("prelu"===t)return(0,i.A)(e,n);if("leakyrelu"===t)return(0,s.h)(e,r);throw new Error(`Unknown fused activation ${t}.`)}const g=(e,t)=>!(e>0)||"linear"===t},4926:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({gather_:function(e,t,n=0,o=0){const i={x:(0,s._1)(e,"x","gather"),indices:(0,s._1)(t,"indices","gather","int32")},u={axis:n,batchDims:o};return r.BV.runKernel(a.qi,i,u)}})},7494:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({gatherND_:function(e,t){const n=(0,s._1)(t,"indices","gatherND","int32"),o={params:(0,s._1)(e,"x","gatherND"),indices:n};return r.BV.runKernel(a.q1,o)}})},636:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({greater_:function(e,t){let n=(0,o._1)(e,"a","greater"),u=(0,o._1)(t,"b","greater");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.iZ,l)}})},7630:(e,t,n)=>{"use strict";n.d(t,{b:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({greaterEqual_:function(e,t){let n=(0,o._1)(e,"a","greaterEqual"),u=(0,o._1)(t,"b","greaterEqual");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.Ac,l)}})},4386:(e,t,n)=>{"use strict";n.d(t,{a:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({imag_:function(e){const t={input:(0,s._1)(e,"input","imag")};return r.BV.runKernel(a.J_,t)}})},3305:(e,t,n)=>{"use strict";n.d(t,{I:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({resizeBilinear_:function(e,t,n=!1,i=!1){const l=(0,s._1)(e,"images","resizeBilinear");o.hu(3===l.rank||4===l.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${l.rank}.`)),o.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),o.hu(!1===i||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let c=l,p=!1;3===l.rank&&(p=!0,c=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const[]=t,d={images:c},h={alignCorners:n,halfPixelCenters:i,size:t},f=r.BV.runKernel(a._Y,d,h);return p?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},5098:(e,t,n)=>{"use strict";n.d(t,{j:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({resizeNearestNeighbor_:function(e,t,n=!1,i=!1){const l=(0,s._1)(e,"images","resizeNearestNeighbor");o.hu(3===l.rank||4===l.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${l.rank}.`)),o.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),o.hu("float32"===l.dtype||"int32"===l.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),o.hu(!1===i||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let c=l,p=!1;3===l.rank&&(p=!0,c=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const[]=t,d={images:c},h={alignCorners:n,halfPixelCenters:i,size:t},f=r.BV.runKernel(a.dp,d,h);return p?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3963:(e,t,n)=>{"use strict";n.d(t,{x:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({isFinite_:function(e){const t={x:(0,s._1)(e,"x","isFinite")};return r.BV.runKernel(a.av,t)}})},4365:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({isInf_:function(e){const t={x:(0,s._1)(e,"x","isInf")};return r.BV.runKernel(a.iW,t)}})},6230:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({isNaN_:function(e){const t={x:(0,s._1)(e,"x","isNaN")};return r.BV.runKernel(a.r7,t)}})},9133:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({leakyRelu_:function(e,t=.2){const n={x:(0,s._1)(e,"x","leakyRelu")},o={alpha:t};return r.BV.runKernel(a.J$,n,o)}})},6573:(e,t,n)=>{"use strict";n.d(t,{d:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({less_:function(e,t){let n=(0,o._1)(e,"a","less"),u=(0,o._1)(t,"b","less");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.vt,l)}})},624:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({lessEqual_:function(e,t){let n=(0,o._1)(e,"a","lessEqual"),u=(0,o._1)(t,"b","lessEqual");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.CA,l)}})},4135:(e,t,n)=>{"use strict";n.d(t,{S:()=>s});var r=n(7097),a=n(9121);function s(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return r.BV.runKernel(a.e7,{},s)}},9648:(e,t,n)=>{"use strict";n.d(t,{G:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2668),u=n(4968);const l=(0,i.op)({localResponseNormalization_:function(e,t=5,n=1,i=1,l=.5){const c=(0,s._1)(e,"x","localResponseNormalization");o.hu(4===c.rank||3===c.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`)),o.hu(o.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let p=c,d=!1;3===c.rank&&(d=!0,p=(0,u.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const h={x:p},f={depthRadius:t,bias:n,alpha:i,beta:l},m=r.BV.runKernel(a.eZ,h,f);return d?(0,u.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},2597:(e,t,n)=>{"use strict";n.d(t,{c:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({log_:function(e){const t={x:(0,s._1)(e,"x","log")};return r.BV.runKernel(a.Zb,t)}})},7474:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({log1p_:function(e){const t={x:(0,s._1)(e,"x","log1p")};return r.BV.runKernel(a.kU,t)}})},3888:(e,t,n)=>{"use strict";n.d(t,{e:()=>c});var r=n(633),a=n(3740),s=n(4841),o=n(7370),i=n(2668),u=n(625),l=n(3694);const c=(0,i.op)({logSigmoid_:function(e){const t=(0,a._1)(e,"x","logSigmoid"),n=(0,r.cb)((e=>({value:(0,o.W)((0,l.W)((0,o.W)(e))),gradFunc:t=>(0,s.d)(t,(0,u.X)((0,o.W)(e)))})));return n(t)}})},1510:(e,t,n)=>{"use strict";n.d(t,{C:()=>h});var r=n(633),a=n(3740),s=n(2271),o=n(4842),i=n(2597),u=n(3307),l=n(4841),c=n(2668),p=n(827),d=n(5475);const h=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const c=(0,r.cb)(((e,n)=>{const r=(0,u.F)(e,t,!0),a=(0,p.l)(e,r),c=(0,p.l)((0,s.p)(a,"float32"),(0,i.c)((0,d.S)((0,o.Q)(a),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[r]=n,a=(0,o.Q)(r);return(0,p.l)(e,(0,l.d)((0,d.S)(e,t,!0),a))}}}));return c(n)}})},1391:(e,t,n)=>{"use strict";n.d(t,{l:()=>f});var r=n(3740),a=n(569),s=n(6407),o=n(3591),i=n(4842),u=n(2597),l=n(3307),c=n(2668),p=n(4968),d=n(827),h=n(5475);const f=(0,c.op)({logSumExp_:function(e,t=null,n=!1){const c=(0,r._1)(e,"x","logSumExp"),f=(0,a.EC)(t,c.shape),m=(0,l.F)(c,f,!0),g=(0,d.l)(c,m),x=(0,i.Q)(g),y=(0,h.S)(x,f),b=(0,u.c)(y),v=(0,s.I)((0,p.X)(m,b.shape),b);if(n){const e=(0,o.rv)(v.shape,f);return(0,p.X)(v,e)}return v}})},2856:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2200);const i=(0,n(2668).op)({logicalAnd_:function(e,t){const n=(0,s._1)(e,"a","logicalAnd","bool"),i=(0,s._1)(t,"b","logicalAnd","bool");(0,o.$N)(n.shape,i.shape);const u={a:n,b:i};return r.BV.runKernel(a.PY,u)}})},8651:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({logicalNot_:function(e){const t={x:(0,s._1)(e,"x","logicalNot","bool")};return r.BV.runKernel(a.Vf,t)}})},5750:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2200);const i=(0,n(2668).op)({logicalOr_:function(e,t){const n=(0,s._1)(e,"a","logicalOr","bool"),i=(0,s._1)(t,"b","logicalOr","bool");(0,o.$N)(n.shape,i.shape);const u={a:n,b:i};return r.BV.runKernel(a.MZ,u)}})},596:(e,t,n)=>{"use strict";n.d(t,{e:()=>u});var r=n(3740),a=n(2200),s=n(2856),o=n(8651),i=n(5750);const u=(0,n(2668).op)({logicalXor_:function(e,t){const n=(0,r._1)(e,"a","logicalXor","bool"),u=(0,r._1)(t,"b","logicalXor","bool");return(0,a.$N)(n.shape,u.shape),(0,s.H)((0,i.K)(e,t),(0,o.h)((0,s.H)(e,t)))}})},9876:(e,t,n)=>{"use strict";var r;n.d(t,{I:()=>r}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},8687:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({matMul_:function(e,t,n=!1,i=!1){let u=(0,o._1)(e,"a","matMul"),l=(0,o._1)(t,"b","matMul");[u,l]=(0,s.makeTypesMatch)(u,l);const c={a:u,b:l},p={transposeA:n,transposeB:i};return r.BV.runKernel(a.XL,c,p)}})},3307:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({max_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","max")},i={reductionIndices:t,keepDims:n};return r.BV.runKernel(a.Yo,o,i)}})},1174:(e,t,n)=>{"use strict";n.d(t,{_:()=>c});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(2582),u=n(2668),l=n(4968);const c=(0,u.op)({maxPool_:function(e,t,n,u,c){const p=(0,s._1)(e,"x","maxPool");let d=p,h=!1;3===p.rank&&(h=!0,d=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o.hu(4===d.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${d.rank}.`)),o.hu(i.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=c&&o.hu(o.GN(u),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${c} but got pad ${u}.`));const f={x:d},m={filterSize:t,strides:n,pad:u,dimRoundingMode:c},g=r.BV.runKernel(a.mT,f,m);return h?(0,l.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},5020:(e,t,n)=>{"use strict";n.d(t,{Y:()=>p});var r=n(7097),a=n(4368),s=n(9121),o=n(3740),i=n(569),u=n(2582),l=n(2668),c=n(4968);const p=(0,l.op)({maxPool3d_:function(e,t=[1,1,1],n,l,p,d="NDHWC",h){null==h?h=[1,1,1]:(0,a.MX)("dilations is deprecated, this field will be gone in v3.0.0.");const f=(0,o._1)(e,"x","maxPool3d");let m=f,g=!1;4===f.rank&&(g=!0,m=(0,c.X)(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]])),i.hu(5===m.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${m.rank}.`)),i.hu("NDHWC"===d,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${d}`)),i.hu(u.jT(n,h),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${h}'`)),null!=p&&i.hu(i.GN(l),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${p} but got pad ${l}.`));const x={x:m},y={filterSize:t,strides:n,pad:l,dimRoundingMode:p,dataFormat:d,dilations:h},b=r.BV.runKernel(s.OA,x,y);return g?(0,c.X)(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}})},6877:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({maxPoolWithArgmax_:function(e,t,n,o,i=!1){const u={x:(0,s._1)(e,"x","maxPoolWithArgmax")},l={filterSize:t,strides:n,pad:o,includeBatchInIndex:i},c=r.BV.runKernel(a.vF,u,l);return{result:c[0],indexes:c[1]}}})},632:(e,t,n)=>{"use strict";n.d(t,{g:()=>l});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200),u=n(2271);const l=(0,n(2668).op)({maximum_:function(e,t){let n=(0,o._1)(e,"a","maximum"),l=(0,o._1)(t,"b","maximum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.$N)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.BM,c)}})},5130:(e,t,n)=>{"use strict";n.d(t,{J:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({mean_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","mean")},i={axis:t,keepDims:n};return r.BV.runKernel(a.q2,o,i)}})},5735:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({min_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","min")},i={axis:t,keepDims:n};return r.BV.runKernel(a.c1,o,i)}})},4513:(e,t,n)=>{"use strict";n.d(t,{L:()=>l});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200),u=n(2271);const l=(0,n(2668).op)({minimum_:function(e,t){let n=(0,o._1)(e,"a","minimum"),l=(0,o._1)(t,"b","minimum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.$N)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.q8,c)}})},1483:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({mirrorPad_:function(e,t,n){o.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const i=(0,s._1)(e,"x","mirrorPad");if(0===i.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");o.hu(t.length===i.rank,(()=>`Padding doesn't match input. Must be ${i.rank}. Got ${t.length}.`));const u="reflect"===n?1:0;for(let e=0;e<i.rank;e++)o.hu(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),o.hu(t[e][0]>=0&&t[e][0]<=i.shape[e]-u&&t[e][1]>=0&&t[e][1]<=i.shape[e]-u,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${i.shape[e]-u} or less than 0 for input of shape ${i.shape}`));const l={paddings:t,mode:n},c={x:i};return r.BV.runKernel(a.jQ,c,l)}})},5228:(e,t,n)=>{"use strict";n.d(t,{w:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({mod_:function(e,t){let n=(0,o._1)(e,"a","mod"),i=(0,o._1)(t,"b","mod");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Vb,u)}})},4841:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({mul_:function(e,t){let n=(0,o._1)(e,"a","mul"),i=(0,o._1)(t,"b","mul");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.wY,u)}})},686:(e,t,n)=>{"use strict";n.d(t,{S:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(2668),i=n(4968);const u=(0,o.op)({multinomial_:function(e,t,n,o=!1){const u=(0,s._1)(e,"logits","multinomial"),l=u.size,c=u.rank;if(l<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${l}.`);if(c>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${c}`);n=n||Math.random();const p={logits:1===c?(0,i.X)(u,[1,-1]):u},d={numSamples:t,seed:n,normalized:o},h=r.BV.runKernel(a.NZ,p,d);return 1===c?(0,i.X)(h,[h.size]):h}})},7370:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({neg_:function(e){const t={x:(0,s._1)(e,"x","neg")};return r.BV.runKernel(a.ku,t)}})},3561:(e,t,n)=>{"use strict";n.d(t,{K:()=>x});var r=n(3740),a=n(569),s=n(6235),o=n(3591),i=n(3307),u=n(5735),l=n(2668),c=n(3453),p=n(4968),d=n(9494),h=n(3261),f=n(248),m=n(5475);function g(e,t,n=null){if(0===e.rank)return(0,s.W)(e);if(1!==e.rank&&null===n)return g((0,p.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,m.S)((0,s.W)(e),n);if(t===1/0)return(0,i.F)((0,s.W)(e),n);if(t===-1/0)return(0,u.V)((0,s.W)(e),n);if("euclidean"===t||2===t)return(0,h._)((0,m.S)((0,c.s)((0,s.W)(e),(0,d.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,i.F)((0,m.S)((0,s.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,i.F)((0,m.S)((0,s.W)(e),n[1]),n[0]);if(t===-1/0)return(0,u.V)((0,m.S)((0,s.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,h._)((0,m.S)((0,f.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const x=(0,l.op)({norm_:function(e,t="euclidean",n=null,s=!1){const i=g(e=(0,r._1)(e,"x","norm"),t,n);let u=i.shape;if(s){const t=(0,a.EC)(n,e.shape);u=o.rv(i.shape,t)}return(0,p.X)(i,u)}})},6500:(e,t,n)=>{"use strict";n.d(t,{Q:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({notEqual_:function(e,t){let n=(0,o._1)(e,"a","notEqual"),u=(0,o._1)(t,"b","notEqual");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.yQ,l)}})},6708:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({oneHot_:function(e,t,n=1,o=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const i={indices:(0,s._1)(e,"indices","oneHot","int32")},u={depth:t,onValue:n,offValue:o};return r.BV.runKernel(a.we,i,u)}})},4917:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var r=n(7097),a=n(569),s=n(1661),o=n(9640);function i(e,t="float32"){if("complex64"===t){const t=i(e,"float32"),n=(0,o.l)(e,"float32");return(0,s.P)(t,n)}const n=(0,a.p8)((0,a.NA)(e),t);return r.BV.makeTensor(n,e,t)}},7846:(e,t,n)=>{"use strict";n.d(t,{J:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({onesLike_:function(e){const t={x:(0,s._1)(e,"x","onesLike")};return r.BV.runKernel(a.qW,t)}})},2668:(e,t,n)=>{"use strict";n.d(t,{op:()=>o,z:()=>s});var r=n(7097),a=n(569);const s="__op";function o(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const o=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=s;const i=(...e)=>{r.BV.startScope(n);try{const t=o(...e);return(0,a.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),r.BV.endScope(t),t}catch(e){throw r.BV.endScope(null),e}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}},1395:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>S.z,WnP:()=>r.W,Khb:()=>a.K,__u:()=>s._,IHx:()=>o.I,QBD:()=>i.Q,zqr:()=>Dn.zq,$6P:()=>u.$,YjB:()=>l.Y,NqF:()=>c.N,vHJ:()=>p.v,ZRM:()=>d.Z,VfV:()=>h.V,z4N:()=>f.z,fvJ:()=>m.f,C80:()=>g.C,wS1:()=>x.w,uR5:()=>y.u,zEQ:()=>T,tgs:()=>E.t,Dxk:()=>R,JY5:()=>A,p3b:()=>D,E4h:()=>C.E,yE8:()=>O.y,anm:()=>Rn,UFq:()=>F.U,f3b:()=>B.f,pju:()=>M.p,mDi:()=>P.m,iUl:()=>L.i,d9v:()=>V.d,PYB:()=>z.P,zoF:()=>v.z,gME:()=>W,Izb:()=>U,MNy:()=>G,ZaL:()=>X,PAt:()=>H.P,Tek:()=>q.T,bc:()=>j.b,pdZ:()=>K.p,$QV:()=>Q,mCk:()=>Z.m,f9Y:()=>J.f,mew:()=>Gn,zbp:()=>ee.z,ppE:()=>te.p,nTT:()=>ne.n,B10:()=>re.B,Ka3:()=>oe,WmZ:()=>ie.W,hiC:()=>ue.h,NTj:()=>le.N,sz_:()=>Dn.sz,AKD:()=>ce.A,rvX:()=>Wn,pyx:()=>pe.p,GRh:()=>Un,DgJ:()=>de.D,zVC:()=>An.zV,qNN:()=>he.q,Qqt:()=>fe.Q,dt4:()=>me.d,t$B:()=>ge.t,iyy:()=>be,kp_:()=>Jt.k,hlL:()=>ve.h,GWj:()=>we.G,qPi:()=>ke.q,imm:()=>Hn,Iqj:()=>Se.I,dbB:()=>Vn.d,pjt:()=>Ie.p,brS:()=>Ne.b,bZ8:()=>An.bZ,g1k:()=>An.g1,Sxn:()=>en.S,asL:()=>$e.a,BHj:()=>Nr,V3u:()=>Xn,wx0:()=>tn.w,xVT:()=>Te.x,UWc:()=>Ce.U,i2d:()=>Ee.i,hi7:()=>_e.h,d9m:()=>Re.d,zN1:()=>Ae.z,SFm:()=>An.SF,O_u:()=>An.O_,$r2:()=>$r,SX3:()=>De.S,G9k:()=>Oe.G,cM7:()=>Fe.c,Krr:()=>Be.K,e_t:()=>Me.e,CmS:()=>Pe.C,l_t:()=>Le.l,HvI:()=>Ve.H,hJK:()=>ze.h,K5V:()=>We.K,egP:()=>Ue.e,MB5:()=>Tr,OI3:()=>w.O,Fp7:()=>Ge.F,_sB:()=>Xe._,YQQ:()=>He.Y,Ip$:()=>qe.I,gWQ:()=>je.g,_jk:()=>Dn._j,J69:()=>Ke.J,VV$:()=>Ye.V,LTh:()=>Qe.L,Wzl:()=>Dn.Wz,VdP:()=>Ze.V,wQq:()=>Je.w,IrJ:()=>Dn.Ir,Gi7:()=>rt,p_:()=>Mn,dC7:()=>k.d,NT4:()=>Dn.NT,rq4:()=>at,SJ_:()=>st.S,W76:()=>ot.W,KOy:()=>Fn.K,Quu:()=>it.Q,FGK:()=>An.FG,lfX:()=>ut.l,iUs:()=>lt.i,JpU:()=>ct.J,op:()=>S.op,N2O:()=>pt,vku:()=>dt.v,pNR:()=>ht,koy:()=>ft,t1L:()=>mt,lGY:()=>gt,d_R:()=>xt.d,sQ3:()=>yt.s,Lfl:()=>Dn.Lf,AL3:()=>bt.A,S0v:()=>vt.S,WVs:()=>wt.W,TN_:()=>kt,wzB:()=>It,nGf:()=>Nt,LGj:()=>$t.L,w6H:()=>Tt.w,kwC:()=>Ct.k,M25:()=>Et.M,UYe:()=>_t.U,btT:()=>Rt.b,XLQ:()=>xe.X,GYS:()=>At.G,SDf:()=>Dt,diP:()=>Ot,sx7:()=>Ft,mG2:()=>Bt,QEs:()=>nn.Q,NMM:()=>Mt.N,bp0:()=>Pt.b,iD$:()=>Lt.i,snQ:()=>Pn.s,U8D:()=>Vt.U,U_I:()=>zt.U,ODp:()=>Wt.O,XD2:()=>I.X,Xxe:()=>Ut.X,tdS:()=>Ir,O$l:()=>Gt.O,R_K:()=>Xt.R,tPi:()=>N.t,jZU:()=>Ht,SmN:()=>qt,CnO:()=>jt,p0P:()=>Kt,XAC:()=>Yt.X,Wvh:()=>Qt.W,fBT:()=>Zt.f,ers:()=>Ln.e,uN7:()=>Sr,Vl2:()=>rn.V,_b3:()=>an._,h62:()=>tt.h,$i:()=>sn.$,r7z:()=>Dn.r7,L9e:()=>on.L,knu:()=>un.k,Nbs:()=>ln.N,NXj:()=>cn.N,luU:()=>nt.l,ULw:()=>Dn.UL,Smz:()=>pn.S,ORZ:()=>dn.O,AEp:()=>$.A,XeE:()=>hn.X,RRF:()=>fn.R,odF:()=>gn,wOQ:()=>xn.w,yXz:()=>yn,Bfx:()=>bn,xZs:()=>vn,Gg6:()=>ye.G,hg7:()=>wn.h,p4s:()=>On.p,Xu6:()=>kn.X,Two:()=>Sn.T,pUJ:()=>In.p,HHK:()=>Nn.H,VD$:()=>$n,arb:()=>Tn.a,itS:()=>Cn.i,lls:()=>En.l,P84:()=>_n.P});var r=n(6235),a=n(7839),s=n(1470),o=n(6407),i=n(3135),u=n(781),l=n(2998),c=n(47),p=n(7394),d=n(2421),h=n(1891),f=n(7037),m=n(9812),g=n(369),x=n(5176),y=n(1749),b=n(3740),v=n(6884),w=n(8687),k=n(4841),S=n(2668),I=n(625),N=n(2676),$=n(1869);const T=(0,S.op)({basicLSTMCell_:function(e,t,n,r,a,s){const i=(0,b._1)(e,"forgetBias","basicLSTMCell"),u=(0,b._1)(t,"lstmKernel","basicLSTMCell"),l=(0,b._1)(n,"lstmBias","basicLSTMCell"),c=(0,b._1)(r,"data","basicLSTMCell"),p=(0,b._1)(a,"c","basicLSTMCell"),d=(0,b._1)(s,"h","basicLSTMCell"),h=(0,v.z)([c,d],1),f=(0,w.O)(h,u),m=(0,o.I)(f,l),g=m.shape[0],x=m.shape[1]/4,y=[g,x],S=(0,N.t)(m,[0,0],y),T=(0,N.t)(m,[0,x],y),C=(0,N.t)(m,[0,2*x],y),E=(0,N.t)(m,[0,3*x],y),_=(0,o.I)((0,k.d)((0,I.X)(S),(0,$.A)(T)),(0,k.d)(p,(0,I.X)((0,o.I)(i,C))));return[_,(0,k.d)((0,$.A)(_),(0,I.X)(E))]}});var C=n(8441),E=n(7505),_=n(569);const R=(0,S.op)({batchNorm2d_:function(e,t,n,r,a,s){const o=(0,b._1)(e,"x","batchNorm"),i=(0,b._1)(t,"mean","batchNorm"),u=(0,b._1)(n,"variance","batchNorm");let l,c;return null!=a&&(l=(0,b._1)(a,"scale","batchNorm")),null!=r&&(c=(0,b._1)(r,"offset","batchNorm")),_.hu(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),_.hu(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),_.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&_.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&_.hu(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),(0,E.t)(o,i,u,c,l,s)}}),A=(0,S.op)({batchNorm3d_:function(e,t,n,r,a,s){const o=(0,b._1)(e,"x","batchNorm"),i=(0,b._1)(t,"mean","batchNorm"),u=(0,b._1)(n,"variance","batchNorm");let l,c;return null!=a&&(l=(0,b._1)(a,"scale","batchNorm")),null!=r&&(c=(0,b._1)(r,"offset","batchNorm")),_.hu(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),_.hu(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),_.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&_.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&_.hu(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),(0,E.t)(o,i,u,c,l,s)}}),D=(0,S.op)({batchNorm4d_:function(e,t,n,r,a,s){const o=(0,b._1)(e,"x","batchNorm"),i=(0,b._1)(t,"mean","batchNorm"),u=(0,b._1)(n,"variance","batchNorm");let l,c;return null!=a&&(l=(0,b._1)(a,"scale","batchNorm")),null!=r&&(c=(0,b._1)(r,"offset","batchNorm")),_.hu(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),_.hu(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),_.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&_.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&_.hu(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),(0,E.t)(o,i,u,c,l,s)}});var O=n(3865),F=n(8247),B=n(2657),M=n(2271),P=n(6825),L=n(2279),V=n(8723),z=n(1661);const W=(0,S.op)({concat1d_:function(e){return(0,v.z)(e,0)}}),U=(0,S.op)({concat2d_:function(e,t){return(0,v.z)(e,t)}}),G=(0,S.op)({concat3d_:function(e,t){return(0,v.z)(e,t)}}),X=(0,S.op)({concat4d_:function(e,t){return(0,v.z)(e,t)}});var H=n(1355),q=n(4794),j=n(1405),K=n(473),Y=n(7594);const Q=(0,S.op)({conv3dTranspose_:function(e,t,n,r,a){const s=(0,b._1)(e,"x","conv3dTranspose"),o=(0,b._1)(t,"filter","conv3dTranspose");return(0,Y._)(n,s,o,r,a)}});var Z=n(173),J=n(2699),ee=n(7405),te=n(5746),ne=n(9112),re=n(4718),ae=n(7097),se=n(9121);const oe=(0,S.op)({diag_:function(e){const t={x:(0,b._1)(e,"x","diag")};return ae.BV.runKernel(se.$w,t)}});var ie=n(557),ue=n(1274),le=n(9322),ce=n(548),pe=n(3233),de=n(6477),he=n(4650),fe=n(4842),me=n(1300),ge=n(3426),xe=n(4968),ye=n(7501);const be=(0,S.op)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=(0,B.f)([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=(0,xe.X)(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return(0,ye.G)((0,me.d)(o,0),[n[0],1,1]);if(2===n.length)return(0,ye.G)((0,me.d)((0,me.d)(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,ye.G)((0,me.d)((0,me.d)((0,me.d)(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var ve=n(4006),we=n(6943),ke=n(9165),Se=n(4926),Ie=n(636),Ne=n(7630),$e=n(4386),Te=n(3963),Ce=n(4365),Ee=n(6230),_e=n(9133),Re=n(6573),Ae=n(624),De=n(4135),Oe=n(9648),Fe=n(2597),Be=n(7474),Me=n(3888),Pe=n(1510),Le=n(1391),Ve=n(2856),ze=n(8651),We=n(5750),Ue=n(596),Ge=n(3307),Xe=n(1174),He=n(5020),qe=n(6877),je=n(632),Ke=n(5130),Ye=n(5735),Qe=n(4513),Ze=n(1483),Je=n(5228),et=n(3591),tt=n(248),nt=n(827);const rt=(0,S.op)({moments_:function(e,t=null,n=!1){e=(0,b._1)(e,"x","moments");const r=(0,_.EC)(t,e.shape),a=(0,Ke.J)(e,r,n);let s=a.shape;n||(s=(0,et.rv)(a.shape,r));const o=(0,tt.h)((0,nt.l)((0,M.p)(e,"float32"),(0,xe.X)(a,s)));return{mean:a,variance:(0,Ke.J)(o,r,n)}}}),at=(0,S.op)({multiRNNCell_:function(e,t,n,r){const a=(0,b._1)(t,"data","multiRNNCell"),s=(0,b.sI)(n,"c","multiRNNCell"),o=(0,b.sI)(r,"h","multiRNNCell");let i=a;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});var st=n(686),ot=n(7370),it=n(6500),ut=n(6708),lt=n(4917),ct=n(7846);const pt=(0,S.op)({outerProduct_:function(e,t){const n=(0,b._1)(e,"v1","outerProduct"),r=(0,b._1)(t,"v2","outerProduct");_.hu(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const a=(0,xe.X)(n,[-1,1]),s=(0,xe.X)(r,[1,-1]);return(0,w.O)(a,s)}});var dt=n(9682);const ht=(0,S.op)({pad1d_:function(e,t,n=0){return(0,_.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,dt.v)(e,[t],n)}}),ft=(0,S.op)({pad2d_:function(e,t,n=0){return(0,_.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,dt.v)(e,t,n)}}),mt=(0,S.op)({pad3d_:function(e,t,n=0){return(0,_.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,dt.v)(e,t,n)}}),gt=(0,S.op)({pad4d_:function(e,t,n=0){return(0,_.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,dt.v)(e,t,n)}});var xt=n(5860),yt=n(3453),bt=n(8151),vt=n(9798),wt=n(9451);const kt=(0,S.op)({rand_:function(e,t,n){const r=(0,_.NA)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return ae.BV.makeTensor(a,e,n)}});var St=n(6845);const It=(0,S.op)({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const s=new St.T9(t,n,r,a),o=(0,B.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),Nt=(0,S.op)({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new St.Yi(t,n,r,!1,a),o=(0,B.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});var $t=n(5002),Tt=n(7245),Ct=n(766),Et=n(9036),_t=n(7409),Rt=n(3582),At=n(7486);const Dt=(0,S.op)({reverse1d_:function(e){const t=(0,b._1)(e,"x","reverse");return _.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,At.G)(t,0)}}),Ot=(0,S.op)({reverse2d_:function(e,t){const n=(0,b._1)(e,"x","reverse");return _.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,At.G)(n,t)}}),Ft=(0,S.op)({reverse3d_:function(e,t){const n=(0,b._1)(e,"x","reverse");return _.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,At.G)(n,t)}}),Bt=(0,S.op)({reverse4d_:function(e,t){const n=(0,b._1)(e,"x","reverse");return _.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,At.G)(n,t)}});var Mt=n(7809),Pt=n(2634),Lt=n(9494),Vt=n(5503),zt=n(8678),Wt=n(6567),Ut=n(4434),Gt=n(9331),Xt=n(3254);const Ht=(0,S.op)({slice1d_:function(e,t,n){const r=(0,b._1)(e,"x","slice1d");return _.hu(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),(0,N.t)(r,[t],[n])}}),qt=(0,S.op)({slice2d_:function(e,t,n){const r=(0,b._1)(e,"x","slice2d");return _.hu(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),(0,N.t)(r,t,n)}}),jt=(0,S.op)({slice3d_:function(e,t,n){const r=(0,b._1)(e,"x","slice3d");return _.hu(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),(0,N.t)(r,t,n)}}),Kt=(0,S.op)({slice4d_:function(e,t,n){const r=(0,b._1)(e,"x","slice4d");return _.hu(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),(0,N.t)(r,t,n)}});var Yt=n(682),Qt=n(3694),Zt=n(7918),Jt=n(7020),en=n(8447),tn=n(4415),nn=n(3710),rn=n(8644),an=n(3261),sn=n(5265),on=n(9590),un=n(2991),ln=n(1901),cn=n(5158),pn=n(5475),dn=n(1173),hn=n(701),fn=n(6092),mn=n(7852);function gn(e,t,n){if((0,_.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=(0,b.C)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,mn.H)(e,t,r,n)}var xn=n(9906);function yn(e,t,n){if((0,_.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=(0,b.C)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,mn.H)(e,t,r,n)}function bn(e,t,n){if((0,_.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=(0,b.C)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,mn.H)(e,t,r,n)}function vn(e,t,n){if((0,_.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=(0,b.C)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,(0,mn.H)(e,t,r,n)}var wn=n(3243),kn=n(3596),Sn=n(9608),In=n(8749),Nn=n(4136);function $n(e,t=!0,n,r){return ae.BV.makeVariable(e,t,n,r)}var Tn=n(5912),Cn=n(6380),En=n(9640),_n=n(6577);const Rn=async function(e,t,n){const r=(0,b._1)(e,"tensor","boolMask"),a=(0,b._1)(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;_.hu(o>0,(()=>"mask cannot be scalar")),_.k5(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+o;e++)u*=i[e];const l=i.slice(0,s).concat([u],i.slice(s+o)),c=(0,xe.X)(r,l),p=(0,xe.X)(a,[-1]),d=await(0,Cn.i)(p),h=(0,on.L)(d,[1]),f=(0,Se.I)(c,h,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),h.dispose(),c.dispose(),p.dispose(),d.dispose(),f};var An=n(3334),Dn=n(7536),On=n(9065),Fn=n(3561),Bn=n(747);const Mn=(0,S.op)({movingAverage_:function(e,t,n,r,a=!0){const s=(0,b._1)(e,"v","movingAverage"),i=(0,b._1)(t,"x","movingAverage"),u=(0,b._1)(n,"decay","movingAverage");(0,Bn.assertTypesMatch)(s,i),_.hu(_.cO(s.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=(0,Lt.i)(1),c=(0,nt.l)(l,u);let p=(0,k.d)((0,nt.l)(i,s),c);if(a){_.hu(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=(0,b._1)(r,"step","movingAverage");p=(0,ue.h)(p,(0,nt.l)(l,(0,yt.s)(u,e)))}return(0,o.I)(s,p)}});var Pn=n(3100),Ln=n(9758),Vn=n(7494),zn=n(4077);const Wn=(0,S.op)({dropout_:function(e,t,n,r){const a=(0,b._1)(e,"x","dropout");if(_.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),_.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof zn.es?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(_.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),i=1-t,u=(0,ue.h)((0,we.G)((0,o.I)((0,$t.L)(s,0,1,"float32",r),i)),i);return(0,k.d)(a,u)}});function Un(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Gn(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return(0,fn.R)(a,"float32")}const Xn=async function(e,t,n=1){const r=(0,b._1)(e,"predictions","inTopK"),a=(0,b._1)(t,"targets","inTopK");(0,_.hu)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),(0,_.hu)(r.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`)),(0,_.k5)(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];(0,_.hu)(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await r.data(),i=await a.data(),[u,l]=[o.length/s,s],c=(0,_.WP)("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),(0,hn.X)(c,a.shape,"bool")};var Hn=n(4624);const qn=(0,S.op)({hammingWindow_:function(e){return Gn(e,.54,.46)}}),jn=(0,S.op)({hannWindow_:function(e){return Gn(e,.5,.5)}}),Kn=(0,S.op)({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push((0,N.t)(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=(0,v.z)([(0,N.t)(e,s,t-r),(0,ve.h)([r],a)]);o.push(i),s+=n}return 0===o.length?gn([],[0,t]):(0,xe.X)((0,v.z)(o),[o.length,t])}}),Yn=(0,S.op)({stft_:function(e,t,n,r,a=jn){null==r&&(r=Un(t));const s=Kn(e,t,n),o=(0,k.d)(s,a(t)),i=[];for(let e=0;e<s.shape[0];e++)i.push((0,nn.Q)((0,N.t)(o,[e,0],[1,t]),r));return(0,v.z)(i)}}),Qn=(0,S.op)({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=(0,b._1)(e,"image","cropAndResize"),i=(0,b._1)(t,"boxes","cropAndResize","float32"),u=(0,b._1)(n,"boxInd","cropAndResize","int32"),l=i.shape[0];_.hu(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),_.hu(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),_.hu(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),_.hu(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),_.hu(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),_.hu("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const c={image:o,boxes:i,boxInd:u},p={method:a,extrapolationValue:s,cropSize:r};return ae.BV.runKernel(se.Vc,c,p)}}),Zn=(0,S.op)({flipLeftRight_:function(e){const t=(0,b._1)(e,"image","flipLeftRight","float32");_.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ae.BV.runKernel(se.Uy,n,{})}}),Jn=(0,S.op)({rotateWithOffset_:function(e,t,n=0,r=.5){const a=(0,b._1)(e,"image","rotateWithOffset","float32");_.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const s={image:a},o={radians:t,fillValue:n,center:r};return ae.BV.runKernel(se.b9,s,o)}});function er(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),_.hu(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),_.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),_.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),_.hu(1===t.rank,(()=>"scores must be a 1D tensor")),_.hu(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),_.hu(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const tr=(0,S.op)({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=(0,b._1)(e,"boxes","nonMaxSuppression"),o=(0,b._1)(t,"scores","nonMaxSuppression"),i=er(s,o,n,r,a),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return ae.BV.runKernel(se.uv,{boxes:s,scores:o},u)}});var nr=n(3337);const rr=(0,S.op)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=(0,b._1)(e,"boxes","nonMaxSuppression"),i=(0,b._1)(t,"scores","nonMaxSuppression"),u=er(o,i,n,r,a,s),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:a=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},p=ae.BV.runKernel(se.W0,l,c);return{selectedIndices:p[0],selectedScores:p[1]}}}),ar=(0,S.op)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=(0,b._1)(e,"boxes","nonMaxSuppression"),i=(0,b._1)(t,"scores","nonMaxSuppression"),u=er(o,i,n,r,a,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},p=ae.BV.runKernel(se.cy,l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});var sr=n(3305),or=n(5098);const ir=(0,S.op)({bandPart_:function(e,t,n){(0,_.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,_.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=(0,b._1)(e,"a","bandPart");(0,_.hu)(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=(0,xe.X)((0,Tt.w)(0,s,1,"int32"),[-1,1]),u=(0,Tt.w)(0,o,1,"int32"),l=(0,nt.l)(i,u),c=(0,Ve.H)((0,Ae.z)(l,(0,Lt.i)(+t,"int32")),(0,Ne.b)(l,(0,Lt.i)(-n,"int32"))),p=(0,En.l)([s,o],r.dtype);return(0,xe.X)((0,un.k)((0,Nn.H)((0,xe.X)(r,[-1,s,o])).map((e=>(0,Tn.a)(c,e,p)))),a)}}),ur=(0,S.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,_.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,_.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,rn.V)(e,e.shape[0],0).map((e=>(0,on.L)(e,[0])));(0,_.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(ae.BV.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=(0,k.d)((0,pn.S)((0,k.d)(n[r],e)),n[r]);e=(0,nt.l)(e,t)}return(0,ue.h)(e,(0,Fn.K)(e,"euclidean"))})));return t?(0,un.k)(n,0):n}});var lr=n(4368);function cr(e,t=!1){return ae.BV.tidy((()=>{(0,_.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=be(n),s=(0,V.d)(e);const o=gn([[1]],[1,1]);let i=(0,V.d)(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=s,u=i,l=a;[i,s,a]=ae.BV.tidy((()=>{const t=(0,N.t)(s,[e,e],[n-e,1]),u=(0,Fn.K)(t),l=(0,N.t)(s,[e,e],[1,1]),c=(0,Tn.a)((0,Ie.p)(l,0),gn([[-1]]),gn([[1]])),p=(0,nt.l)(l,(0,k.d)(c,u)),d=(0,ue.h)(t,p);i=1===d.shape[0]?(0,V.d)(o):(0,v.z)([o,(0,N.t)(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=(0,ot.W)((0,ue.h)((0,w.O)(c,p),u)),f=(0,N.t)(s,[e,0],[n-e,r]),m=(0,k.d)(h,i),g=(0,On.p)(i);if(0===e)s=(0,nt.l)(f,(0,w.O)(m,(0,w.O)(g,f)));else{const t=(0,nt.l)(f,(0,w.O)(m,(0,w.O)(g,f)));s=(0,v.z)([(0,N.t)(s,[0,0],[e,r]),t],0)}const x=(0,On.p)(m),y=(0,N.t)(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=(0,nt.l)(y,(0,w.O)((0,w.O)(y,i),x));else{const t=(0,nt.l)(y,(0,w.O)((0,w.O)(y,i),x));a=(0,v.z)([(0,N.t)(a,[0,0],[n,e]),t],1)}return[i,s,a]})),(0,lr.B9)([t,u,l])}return!t&&n>r&&(a=(0,N.t)(a,[0,0],[n,r]),s=(0,N.t)(s,[0,0],[r,r])),[a,s]}))}const pr=(0,S.op)({qr_:function(e,t=!1){if((0,_.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return cr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=(0,Nn.H)((0,xe.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];return r.forEach((e=>{const[n,r]=cr(e,t);a.push(n),s.push(r)})),[(0,xe.X)((0,un.k)(a,0),e.shape),(0,xe.X)((0,un.k)(s,0),e.shape)]}}});var dr=n(9876);const hr=(0,S.op)({computeWeightedLoss_:function(e,t,n=dr.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,b._1)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=(0,b._1)(t,"weights","computeWeightedLoss"));const s=null==a?r:(0,k.d)(r,a);if(n===dr.I.NONE)return s;if(n===dr.I.SUM)return(0,pn.S)(s);if(n===dr.I.MEAN){if(null==a)return(0,Ke.J)(s);{const e=r.size/a.size,t=(0,ue.h)((0,pn.S)(s),(0,pn.S)(a));return e>1?(0,ue.h)(t,(0,Lt.i)(e)):t}}if(n===dr.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,ue.h)((0,pn.S)(s),(0,Lt.i)(r.size));{const e=(0,k.d)(a,(0,lt.i)(r.shape)),t=(0,M.p)((0,pn.S)((0,it.Q)(e,(0,Lt.i)(0))),"float32");return(0,ue.h)((0,pn.S)(s),t)}}throw Error(`Unknown reduction: ${n}`)}}),fr=(0,S.op)({absoluteDifference_:function(e,t,n,a=dr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,b._1)(e,"labels","absoluteDifference"),o=(0,b._1)(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=(0,b._1)(n,"weights","absoluteDifference")),(0,_.k5)(s.shape,o.shape,"Error in absoluteDifference: ");const u=(0,r.W)((0,nt.l)(s,o));return hr(u,i,a)}}),mr=(0,S.op)({cosineDistance_:function(e,t,n,r,a=dr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,b._1)(e,"labels","cosineDistance"),o=(0,b._1)(t,"predictions","cosineDistance");let i=null;null!=r&&(i=(0,b._1)(r,"weights","cosineDistance")),(0,_.k5)(s.shape,o.shape,"Error in cosineDistance: ");const u=(0,Lt.i)(1),l=(0,nt.l)(u,(0,pn.S)((0,k.d)(s,o),n,!0));return hr(l,i,a)}}),gr=(0,S.op)({hingeLoss_:function(e,t,n,r=dr.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,b._1)(e,"labels","hingeLoss");const s=(0,b._1)(t,"predictions","hingeLoss");let o=null;null!=n&&(o=(0,b._1)(n,"weights","hingeLoss")),(0,_.k5)(a.shape,s.shape,"Error in hingeLoss: ");const i=(0,Lt.i)(1);a=(0,nt.l)((0,k.d)((0,Lt.i)(2),a),i);const u=(0,_t.U)((0,nt.l)(i,(0,k.d)(a,s)));return hr(u,o,r)}}),xr=(0,S.op)({huberLoss_:function(e,t,n,a=1,s=dr.I.SUM_BY_NONZERO_WEIGHTS){const i=(0,b._1)(e,"labels","huberLoss"),u=(0,b._1)(t,"predictions","huberLoss");let l=null;null!=n&&(l=(0,b._1)(n,"weights","huberLoss")),(0,_.k5)(i.shape,u.shape,"Error in huberLoss: ");const c=(0,Lt.i)(a),p=(0,r.W)((0,nt.l)(u,i)),d=(0,Qe.L)(p,c),h=(0,nt.l)(p,d),f=(0,o.I)((0,k.d)((0,Lt.i)(.5),(0,tt.h)(d)),(0,k.d)(c,h));return hr(f,l,s)}}),yr=(0,S.op)({logLoss_:function(e,t,n,r=1e-7,a=dr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,b._1)(e,"labels","logLoss"),i=(0,b._1)(t,"predictions","logLoss");let u=null;null!=n&&(u=(0,b._1)(n,"weights","logLoss")),(0,_.k5)(s.shape,i.shape,"Error in logLoss: ");const l=(0,Lt.i)(1),c=(0,Lt.i)(r),p=(0,ot.W)((0,k.d)(s,(0,Fe.c)((0,o.I)(i,c)))),d=(0,k.d)((0,nt.l)(l,s),(0,Fe.c)((0,o.I)((0,nt.l)(l,i),c))),h=(0,nt.l)(p,d);return hr(h,u,a)}}),br=(0,S.op)({meanSquaredError_:function(e,t,n,r=dr.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,b._1)(e,"labels","meanSquaredError"),s=(0,b._1)(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=(0,b._1)(n,"weights","meanSquaredError")),(0,_.k5)(a.shape,s.shape,"Error in meanSquaredError: ");const i=(0,sn.$)(a,s);return hr(i,o,r)}}),vr=(0,S.op)({sigmoidCrossEntropy_:function(e,t,n,a=0,s=dr.I.SUM_BY_NONZERO_WEIGHTS){let i=(0,b._1)(e,"multiClassLabels","sigmoidCrossEntropy");const u=(0,b._1)(t,"logits","sigmoidCrossEntropy");let l=null;if(null!=n&&(l=(0,b._1)(n,"weights","sigmoidCrossEntropy")),(0,_.k5)(i.shape,u.shape,"Error in sigmoidCrossEntropy: "),a>0){const e=(0,Lt.i)(a),t=(0,Lt.i)(1),n=(0,Lt.i)(.5);i=(0,o.I)((0,k.d)(i,(0,nt.l)(t,e)),(0,k.d)(n,e))}const c=function(e,t){const n=(0,b._1)(e,"labels","sigmoidCrossEntropyWithLogits"),a=(0,b._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,_.k5)(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=(0,_t.U)(a),i=(0,k.d)(a,n),u=(0,Be.K)((0,fe.Q)((0,ot.W)((0,r.W)(a))));return(0,o.I)((0,nt.l)(s,i),u)}(i,u);return hr(c,l,s)}});var wr=n(633);const kr=(0,S.op)({softmaxCrossEntropy_:function(e,t,n,r=0,a=dr.I.SUM_BY_NONZERO_WEIGHTS){let s=(0,b._1)(e,"onehotLabels","softmaxCrossEntropy");const i=(0,b._1)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=(0,b._1)(n,"weights","softmaxCrossEntropy")),(0,_.k5)(s.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=(0,Lt.i)(r),t=(0,Lt.i)(1),n=(0,Lt.i)(s.shape[1]);s=(0,o.I)((0,k.d)(s,(0,nt.l)(t,e)),(0,ue.h)(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=(0,wr.cb)(((e,t,r)=>{const a=(0,Le.l)(t,[n],!0),s=(0,nt.l)((0,M.p)(t,"float32"),a);r([e,s]);const o=(0,ot.W)((0,k.d)(s,e));return{value:(0,pn.S)(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=(0,et.rv)(e.shape,[n]);return[(0,k.d)((0,xe.X)(e,s),(0,nt.l)((0,M.p)(r,"float32"),(0,fe.Q)(a))),(0,k.d)((0,xe.X)(e,s),(0,nt.l)((0,fe.Q)(a),(0,M.p)(r,"float32")))]}}}));return r(e,t)}(s,i);return hr(l,u,a)}}),Sr={fft:Jt.k,ifft:en.S,rfft:nn.Q,irfft:tn.w},Ir={hammingWindow:qn,hannWindow:jn,frame:Kn,stft:Yn},Nr={flipLeftRight:Zn,resizeNearestNeighbor:or.j,resizeBilinear:sr.I,rotateWithOffset:Jn,cropAndResize:Qn,nonMaxSuppression:tr,nonMaxSuppressionAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=(0,b._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,b._1)(t,"scores","nonMaxSuppressionAsync"),i=er(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=(0,nr.GP)(l,c,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),(0,fn.R)(p,"int32")},nonMaxSuppressionWithScore:rr,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=(0,b._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,b._1)(t,"scores","nonMaxSuppressionAsync"),u=er(o,i,n,r,a,s);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:d,selectedScores:h}=(0,nr.pA)(c,p,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:(0,fn.R)(d,"int32"),selectedScores:(0,fn.R)(h)}},nonMaxSuppressionPadded:ar,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=(0,b._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,b._1)(t,"scores","nonMaxSuppressionAsync"),u=er(o,i,n,r,a,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[d,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=(0,nr.qP)(d,h,l,c,p,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:(0,fn.R)(f,"int32"),validOutputs:(0,Lt.i)(m,"int32")}}},$r={bandPart:ir,gramSchmidt:ur,qr:pr},Tr={absoluteDifference:fr,computeWeightedLoss:hr,cosineDistance:mr,hingeLoss:gr,huberLoss:xr,logLoss:yr,meanSquaredError:br,sigmoidCrossEntropy:vr,softmaxCrossEntropy:kr}},9682:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({pad_:function(e,t,n=0){const o=(0,s._1)(e,"x","pad");if(0===o.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const i={paddings:t,constantValue:n},u={x:o};return r.BV.runKernel(a.ly,u,i)}})},5860:(e,t,n)=>{"use strict";n.d(t,{d:()=>d});var r=n(3740),a=n(569),s=n(5176),o=n(8441),i=n(2582),u=n(1174),l=n(2668),c=n(4968),p=n(7918);const d=(0,l.op)({pool_:function(e,t,n,l,d,h){null==d&&(d=[1,1]),null==h&&(h=1),0===l&&(l="valid");const f=(0,r._1)(e,"x","maxPool");let m=f,g=!1;3===f.rank&&(g=!0,m=(0,c.X)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),a.hu(i.jT(h,d),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${h} and dilations '${d}'`));const x=i.Xw(m.shape,t,h,d,l),y=[x.dilationHeight,x.dilationWidth];let b;b="same"===l?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([x.filterHeight,x.filterWidth],y):[[0,0],[0,0]];const v=1===y[0]&&1===y[1],[w,k]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[r[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([x.inHeight,x.inWidth],y,b),S=v?l:"valid",I=v?m:(0,p.f)(m,y,w),N=("avg"===n?()=>(0,s.w)(I,t,h,S):()=>(0,u._)(I,t,h,S))(),$=v?N:(0,o.E)(N,y,k);return g?(0,c.X)($,[$.shape[1],$.shape[2],$.shape[3]]):$}})},3453:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({pow_:function(e,t){let n=(0,o._1)(e,"base","pow"),i=(0,o._1)(t,"exp","pow");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.pe,u)}})},8151:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({prelu_:function(e,t){const n={x:(0,s._1)(e,"x","prelu"),alpha:(0,s._1)(t,"alpha","prelu")};return r.BV.runKernel(a.o0,n)}})},9798:(e,t,n)=>{"use strict";function r(e,t=!1){console.log(e.toString(t))}n.d(t,{S:()=>r})},9451:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2271);const i=(0,n(2668).op)({prod_:function(e,t=null,n=!1){let i=(0,s._1)(e,"x","prod");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.Dl,u,l)}})},6845:(e,t,n)=>{"use strict";n.d(t,{T9:()=>s,Yi:()=>a,wv:()=>o});var r=n(6377);class a{constructor(e,t,n,a,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const o=s||Math.random();this.random=r.alea(o.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class s{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const o=s||Math.random();this.randu=r.alea(o.toString()),this.randn=new a(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class o{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=r.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},5002:(e,t,n)=>{"use strict";n.d(t,{L:()=>o});var r=n(2657),a=n(2668),s=n(6845);const o=(0,a.op)({randomUniform_:function(e,t=0,n=1,a="float32",o){const i=(0,r.f)(e,a),u=new s.wv(t,n,null,o);for(let e=0;e<i.values.length;e++)i.values[e]=u.nextValue();return i.toTensor()}})},7245:(e,t,n)=>{"use strict";n.d(t,{w:()=>s});var r=n(7097),a=n(9121);function s(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:s};return r.BV.runKernel(a.e6,{},o)}},766:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({real_:function(e){const t={input:(0,s._1)(e,"input","real")};return r.BV.runKernel(a.xJ,t)}})},9036:(e,t,n)=>{"use strict";n.d(t,{M:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({reciprocal_:function(e){const t={x:(0,s._1)(e,"x","reciprocal")};return r.BV.runKernel(a.$H,t)}})},7409:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({relu_:function(e){const t={x:(0,s._1)(e,"x","relu")};return r.BV.runKernel(a.qk,t)}})},3582:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({relu6_:function(e){const t={x:(0,s._1)(e,"x","relu6")};return r.BV.runKernel(a.Sb,t)}})},4968:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({reshape_:function(e,t){const n={x:(0,s._1)(e,"x","reshape","string_or_numeric")},o={shape:t};return r.BV.runKernel(a.HZ,n,o)}})},7486:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({reverse_:function(e,t){const n={x:(0,s._1)(e,"x","reverse")},o={dims:t};return r.BV.runKernel(a.mK,n,o)}})},7809:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({round_:function(e){const t={x:(0,s._1)(e,"x","round")};return r.BV.runKernel(a.e0,t)}})},2634:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({rsqrt_:function(e){const t={x:(0,s._1)(e,"x","rsqrt")};return r.BV.runKernel(a.bV,t)}})},9494:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var r=n(569),a=n(7852);function s(e,t){if(((0,r.fU)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,r.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],t)}},3100:(e,t,n)=>{"use strict";n.d(t,{s:()=>u});var r=n(7097),a=n(9121),s=n(3740),o=n(2668),i=n(3028);const u=(0,o.op)({scatterND_:function(e,t,n){const o=(0,s._1)(e,"indices","scatterND","int32"),u=(0,s._1)(t,"updates","scatterND");i.validateInput(u,o,n);const l={indices:o,updates:u},c={shape:n};return r.BV.runKernel(a.xQ,l,c)}})},3028:(e,t,n)=>{"use strict";n.r(t),n.d(t,{calculateShapes:()=>o,validateInput:()=>s,validateUpdateShape:()=>a});var r=n(569);function a(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function s(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(n,t,e)}function o(e,t,n){const a=t.shape.length,s=a>1?t.shape[a-1]:1,o=n.length;let i=1;for(let e=s;e<o;++e)i*=n[e];const u=s<1?1:s;return{sliceRank:s,numUpdates:(0,r.NA)(t.shape)/u,sliceSize:i,strides:[...(0,r.e3)(n.slice(0,s)),1],outputSize:(0,r.NA)(n)}}},5503:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({selu_:function(e){const t={x:(0,s._1)(e,"x","selu")};return r.BV.runKernel(a.oF,t)}})},8678:(e,t,n)=>{"use strict";n.d(t,{U:()=>l});var r=n(3740),a=n(569),s=n(4794),o=n(4718),i=n(2668),u=n(4968);const l=(0,i.op)({separableConv2d_:function(e,t,n,i,l,c=[1,1],p="NHWC"){const d=(0,r._1)(e,"x","separableConv2d"),h=(0,r._1)(t,"depthwiseFilter","separableConv2d"),f=(0,r._1)(n,"pointwiseFilter","separableConv2d");let m=d,g=!1;if(3===d.rank&&(g=!0,m=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),"NCHW"===p)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");a.hu(4===m.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`)),a.hu(4===h.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${h.rank}.`)),a.hu(4===f.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${h.rank}.`)),a.hu(1===f.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${f.shape[0]}.`)),a.hu(1===f.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${f.shape[1]}.`));const x=h.shape[2],y=h.shape[3];a.hu(f.shape[2]===x*y,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${x*y}, but got ${f.shape[2]}.`));const b=(0,o.B)(m,h,i,l,p,c),v=(0,s.T)(b,f,1,"valid",p);return g?(0,u.X)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},6567:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(4077),a=n(3740),s=n(569);const o=async function(e,t){const n=(0,a._1)(e,"x","setdiff1d"),o=(0,a._1)(t,"y","setdiff1d");s.hu(n.dtype===o.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${o.dtype}).`)),s.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),s.hu(1===o.rank,(()=>`y should be 1D tensor, but got y (${o.shape}).`));const i=await n.data(),u=await o.data(),l=new Set(u);let c=0;for(let e=0;e<i.length;e++)l.has(i[e])||c++;const p=new r.YD([c],n.dtype),d=new r.YD([c],"int32");for(let e=0,t=0;e<i.length;e++)l.has(i[e])||(p.values[t]=i[e],d.values[t]=e,t++);return[p.toTensor(),d.toTensor()]}},625:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sigmoid_:function(e){const t={x:(0,s._1)(e,"x","sigmoid")};return r.BV.runKernel(a.a5,t)}})},4434:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sign_:function(e){const t={x:(0,s._1)(e,"x","sign")};return r.BV.runKernel(a.i5,t)}})},9331:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sin_:function(e){const t={x:(0,s._1)(e,"x","sin")};return r.BV.runKernel(a.RQ,t)}})},3254:(e,t,n)=>{"use strict";n.d(t,{R:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sinh_:function(e){const t={x:(0,s._1)(e,"x","sinh")};return r.BV.runKernel(a.w3,t)}})},2676:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({slice_:function(e,t,n){const o=(0,s._1)(e,"x","slice","string_or_numeric");if(0===o.rank)throw new Error("Slicing scalar is not possible");const i={x:o},u={begin:t,size:n};return r.BV.runKernel(a.p2,i,u)}})},682:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({softmax_:function(e,t=-1){const n=(0,s._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const o={logits:n},i={dim:t};return r.BV.runKernel(a.Gc,o,i)}})},3694:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({softplus_:function(e){const t={x:(0,s._1)(e,"x","softplus")};return r.BV.runKernel(a.MR,t)}})},7918:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({spaceToBatchND_:function(e,t,n){const i=(0,s._1)(e,"x","spaceToBatchND");o.hu(i.rank>=1+t.length,(()=>`input rank ${i.rank} should be > than [blockShape] ${t.length}`)),o.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),o.hu(i.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${i.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const u={x:i},l={blockShape:t,paddings:n};return r.BV.runKernel(a.TQ,u,l)}})},9758:(e,t,n)=>{"use strict";n.d(t,{e:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sparseToDense_:function(e,t,n,o=0){const i=(0,s._1)(e,"sparseIndices","sparseToDense","int32"),u=(0,s._1)(t,"sparseValues","sparseToDense"),l=(0,s._1)(o,"defaultValue","sparseToDense",u.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(i,u,n,l);const c={sparseIndices:i,sparseValues:u,defaultValue:l},p={outputShape:n};return r.BV.runKernel(a.D2,c,p)}})},7020:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(7097),a=n(9121),s=n(569);const o=(0,n(2668).op)({fft_:function(e){(0,s.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(a.vw,t)}})},8447:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var r=n(7097),a=n(9121),s=n(569);const o=(0,n(2668).op)({ifft_:function(e){(0,s.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(a.Qg,t)}})},4415:(e,t,n)=>{"use strict";n.d(t,{w:()=>f});var r=n(1661),a=n(6884),s=n(4386),o=n(4841),i=n(2668),u=n(766),l=n(4968),c=n(7486),p=n(9494),d=n(2676),h=n(8447);const f=(0,i.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let i;if(t<=2){const r=(0,l.X)(e,[n,t]);i=(0,h.S)(r)}else{const f=[n,2*(t-1)],m=(0,l.X)((0,u.k)(e),[n,t]),g=(0,l.X)((0,s.a)(e),[n,t]),x=(0,c.G)((0,d.t)(m,[0,1],[n,t-2]),1),y=(0,o.d)((0,c.G)((0,d.t)(g,[0,1],[n,t-2]),1),(0,p.i)(-1)),b=(0,a.z)([m,x],1),v=(0,a.z)([g,y],1),w=(0,l.X)((0,r.P)(b,v),[f[0],f[1]]);i=(0,h.S)(w)}if(i=(0,u.k)(i),3===e.rank&&0!==e.shape[0]){const t=i,n=e.shape[0];i=(0,l.X)(i,[n,i.shape[0]/n,i.shape[1]]),t.dispose()}return i}})},3710:(e,t,n)=>{"use strict";n.d(t,{Q:()=>m});var r=n(569),a=n(1661),s=n(6884),o=n(4386),i=n(2668),u=n(766),l=n(4968),c=n(2676),p=n(8644),d=n(9640),h=n(6577),f=n(7020);const m=(0,i.op)({rfft_:function(e,t){(0,r.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const i=e.size/n;let m;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,m=(0,c.t)(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,m=(0,s.z)([e,(0,d.l)(r)],e.shape.length-1),n=t}else m=e;const g=(0,h.P)(m),x=(0,l.X)((0,a.P)(m,g),[i,n]),y=(0,f.k)(x),b=Math.floor(n/2)+1,v=(0,u.k)(y),w=(0,o.a)(y),k=(0,p.V)(v,[b,n-b],v.shape.length-1),S=(0,p.V)(w,[b,n-b],w.shape.length-1),I=m.shape.slice();return I[m.shape.length-1]=b,(0,l.X)((0,a.P)(k[0],S[0]),I)}})},8644:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({split_:function(e,t,n=0){const o={x:(0,s._1)(e,"x","split")},i={numOrSizeSplits:t,axis:n};return r.BV.runKernel(a.L8,o,i)}})},3261:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({sqrt_:function(e){const t={x:(0,s._1)(e,"x","sqrt")};return r.BV.runKernel(a.FK,t)}})},248:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(7097),a=n(3740);const s=(0,n(2668).op)({square_:function(e){const t=(0,a._1)(e,"x","square");return r.BV.runKernel("Square",{x:t},{})}})},5265:(e,t,n)=>{"use strict";n.d(t,{$:()=>u});var r=n(7097),a=n(9121),s=n(747),o=n(3740),i=n(2200);const u=(0,n(2668).op)({squaredDifference_:function(e,t){let n=(0,o._1)(e,"a","squaredDifference"),u=(0,o._1)(t,"b","squaredDifference");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.$N)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a._t,l,{})}})},9590:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var r=n(3740),a=n(569),s=n(2668),o=n(4968);const i=(0,s.op)({squeeze_:function(e,t){const n=(0,r._1)(e,"x","squeeze");return(0,o.X)(n,(0,a.bp)(n.shape,t).newShape)}})},2991:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({stack_:function(e,t=0){const n=(0,s.sI)(e,"tensors","stack","string_or_numeric");o.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&o.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const i=n,u={axis:t};return r.BV.runKernel(a.Qi,i,u)}})},1901:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({step_:function(e,t=0){const n={x:(0,s._1)(e,"x","step")},o={alpha:t};return r.BV.runKernel(a.h8,n,o)}})},5158:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({stridedSlice_:function(e,t,n,o,i=0,u=0,l=0,c=0,p=0){const d={x:(0,s._1)(e,"x","stridedSlice")},h={begin:t,end:n,strides:o,beginMask:i,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:p};return r.BV.runKernel(a.m2,d,h)}})},827:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var r=n(7097),a=n(9121),s=n(747),o=n(3740);const i=(0,n(2668).op)({sub_:function(e,t){let n=(0,o._1)(e,"a","sub"),i=(0,o._1)(t,"b","sub");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Tr,u)}})},5475:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(2271);const i=(0,n(2668).op)({sum_:function(e,t=null,n=!1){let i=(0,s._1)(e,"x","sum");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.GB,u,l)}})},1173:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({tan_:function(e){const t={x:(0,s._1)(e,"x","tan")};return r.BV.runKernel(a.sE,t)}})},1869:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({tanh_:function(e){const t={x:(0,s._1)(e,"x","tanh")};return r.BV.runKernel(a.MI,t)}})},701:(e,t,n)=>{"use strict";n.d(t,{X:()=>s});var r=n(3740),a=n(7852);function s(e,t,n){const s=(0,r.C)(e,n);return(0,a.H)(e,t,s,n)}},6092:(e,t,n)=>{"use strict";n.d(t,{R:()=>o});var r=n(3740),a=n(569),s=n(7852);function o(e,t){(0,a.Cq)(e);const n=(0,r.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,s.H)(e,null,n,t)}},9906:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var r=n(3740),a=n(569),s=n(7852);function o(e,t,n){if((0,a.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const o=(0,r.C)(e,n);if(3!==o.length&&1!==o.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===o.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,s.H)(e,t,o,n)}},7852:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var r=n(7097),a=n(569),s=n(9155);function o(e,t,n,o){if(null==o&&(o=(0,a.D2)(e)),"complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),r=(0,a.NA)(n);(0,a.hu)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==(0,a.NA)(t.slice(e));(0,a.hu)(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,a.fU)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,s.toTypedArray)(e,o):(0,a.xH)(e,[],!0),r.BV.makeTensor(e,t,o)}},7501:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({tile_:function(e,t){const n=(0,s._1)(e,"x","tile","string_or_numeric");o.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const i={x:n},u={reps:t};return r.BV.runKernel(a.n9,i,u)}})},3243:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({topk_:function(e,t=1,n=!0){const o=(0,s._1)(e,"x","topk");if(0===o.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const i=o.shape[o.shape.length-1];if(t>i)throw new Error(`'k' passed to topk() must be <= the last dimension (${i}) but got ${t}`);const u={x:o},l={k:t,sorted:n},[c,p]=r.BV.runKernel(a.cW,u,l);return{values:c,indices:p}}})},9065:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({transpose_:function(e,t){const n=(0,s._1)(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),o.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{o.hu(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const i={x:n},u={perm:t};return r.BV.runKernel(a.G3,i,u)}})},3596:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(2657),a=n(2668),s=n(6845);const o=(0,a.op)({truncatedNormal_:function(e,t=0,n=1,a,o){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const i=new s.Yi(t,n,a,!0,o),u=(0,r.f)(e,a);for(let e=0;e<u.values.length;e++)u.values[e]=i.nextValue();return u.toTensor()}})},9608:(e,t,n)=>{"use strict";n.d(t,{T:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({unique_:function(e,t=0){const n=(0,s._1)(e,"x","unique","string_or_numeric");(0,o.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const i={x:n},u={axis:t},[l,c]=r.BV.runKernel(a.kp,i,u);return{values:l,indices:c}}})},8749:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({unsortedSegmentSum_:function(e,t,n){const i=(0,s._1)(e,"x","unsortedSegmentSum"),u=(0,s._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,o.hu)((0,o.GN)(n),(()=>"numSegments must be of dtype int"));const l={x:i,segmentIds:u},c={numSegments:n};return r.BV.runKernel(a.Qv,l,c)}})},4136:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var r=n(7097),a=n(9121),s=n(3740),o=n(569);const i=(0,n(2668).op)({unstack_:function(e,t=0){const n=(0,s._1)(e,"x","unstack","string_or_numeric");o.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const i={value:n},u={axis:t};return r.BV.runKernel(a.To,i,u)}})},5912:(e,t,n)=>{"use strict";n.d(t,{a:()=>l});var r=n(7097),a=n(9121),s=n(3740),o=n(569),i=n(8247),u=n(2200);const l=(0,n(2668).op)({where_:function(e,t,n){const l=(0,s._1)(t,"a","where"),c=(0,s._1)(n,"b","where"),p=(0,s._1)(e,"condition","where","bool"),d=(0,u.$N)(l.shape,c.shape),h=(0,i.U)(l,d),f=(0,i.U)(c,d);1===p.rank&&(0,o.hu)(p.shape[0]===l.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==p.rank&&(0,o.k5)(p.shape,f.shape,"Error in where: ");const m={condition:p,t:h,e:f};return r.BV.runKernel(a.Ph,m)}})},6380:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var r=n(8333),a=n(3740);const s=async function(e){const t=(0,a._1)(e,"condition","whereAsync","bool"),n=await t.data(),s=(0,r.Z)(t.shape,n);return e!==t&&t.dispose(),s}},9640:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(7097),a=n(569),s=n(1661);function o(e,t="float32"){if("complex64"===t){const t=o(e,"float32"),n=o(e,"float32");return(0,s.P)(t,n)}const n=(0,a.wT)((0,a.NA)(e),t);return r.BV.makeTensor(n,e,t)}},6577:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var r=n(7097),a=n(9121),s=n(3740);const o=(0,n(2668).op)({zerosLike_:function(e){const t={x:(0,s._1)(e,"x","zerosLike")};return r.BV.runKernel(a.Ru,t)}})},4077:(e,t,n)=>{"use strict";n.d(t,{es:()=>x,YD:()=>c,_w:()=>y,FZ:()=>g,Vp:()=>m,Vi:()=>f});var r=n(569);function a(e,t,n,a){const o=(0,r.e3)(t),l=function(e,t,n,a){const o=(0,r.NA)(t),i=a[a.length-1],l=new Array(i).fill(0),c=t.length,p="complex64"===n?u(e):e;if(c>1)for(let e=0;e<o/i;e++){const t=e*i;for(let e=0;e<i;e++)l[e]=Math.max(l[e],s(p[t+e],0,n).length)}return l}(e,t,n,o),c=t.length,p=i(e,t,n,o,l),d=["Tensor"];return a&&(d.push(`  dtype: ${n}`),d.push(`  rank: ${c}`),d.push(`  shape: [${t}]`),d.push("  values:")),d.push(p.map((e=>"    "+e)).join("\n")),d.join("\n")}function s(e,t,n){let a;return a=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,r.HD)(e)?`'${e}'`:"bool"===n?o(e):parseFloat(e.toFixed(7)).toString(),(0,r.oj)(a,t)}function o(e){return 0===e?"false":"true"}function i(e,t,n,r,a,l=!0){const c="complex64"===n?2:1,p=t[0],d=t.length;if(0===d)return"complex64"===n?[s(u(e)[0],0,n)]:"bool"===n?[o(e[0])]:[e[0].toString()];if(1===d){if(p>20){const t=3*c;let r=Array.from(e.slice(0,t)),o=Array.from(e.slice((p-3)*c,p*c));return"complex64"===n&&(r=u(r),o=u(o)),["["+r.map(((e,t)=>s(e,a[t],n))).join(", ")+", ..., "+o.map(((e,t)=>s(e,a[p-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?u(e):Array.from(e)).map(((e,t)=>s(e,a[t],n))).join(", ")+"]"]}const h=t.slice(1),f=r.slice(1),m=r[0]*c,g=[];if(p>20){for(let t=0;t<3;t++){const r=t*m,s=r+m;g.push(...i(e.slice(r,s),h,n,f,a,!1))}g.push("...");for(let t=p-3;t<p;t++){const r=t*m,s=r+m;g.push(...i(e.slice(r,s),h,n,f,a,t===p-1))}}else for(let t=0;t<p;t++){const r=t*m,s=r+m;g.push(...i(e.slice(r,s),h,n,f,a,t===p-1))}const x=2===d?",":"";g[0]="["+g[0]+x;for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+x;let y=",\n";for(let e=2;e<d;e++)y+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(l?"":y),g}function u(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var l=n(9155);class c{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=r.NA(e),null!=n){const e=n.length;r.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||r.rQ(t,this.size),this.strides=(0,r.e3)(e)}set(e,...t){0===t.length&&(t=[0]),r.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return p().makeTensor(this.values,this.shape,this.dtype)}}let p=null,d=null,h=null;function f(e){p=e}function m(e){d=e}function g(e){h=e}class x{constructor(e,t,n,a){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=r.NA(e),this.strides=(0,r.e3)(e),this.dataId=n,this.id=a,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return d.buffer(this.shape,this.dtype,e)}bufferSync(){return d.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,r.GX)(this.shape,e)}arraySync(){return(0,r.GX)(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=p().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>l.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=p().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>l.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await p().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(p().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return d.print(this,e)}clone(){return this.throwIfDisposed(),d.clone(this)}toString(e=!1){return a(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),d.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),p().makeVariable(this,e,t,n)}}Object.defineProperty(x,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class y extends x{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!r.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);p().disposeTensor(this),this.dataId=e.dataId,p().incRef(this,null)}dispose(){p().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(y,Symbol.hasInstance,{value:e=>e instanceof x&&null!=e.assign&&e.assign instanceof Function})},747:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertTypesMatch:()=>i,getTensorsInContainer:()=>l,isTensorInList:()=>u,makeTypesMatch:()=>o});var r=n(4077),a=n(1221),s=n(569);function o(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,a.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function i(e,t){(0,s.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function u(e,t){return t.some((t=>t.id===e.id))}function l(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof r.es)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),c(r,t,n))}}},3740:(e,t,n)=>{"use strict";n.d(t,{C:()=>u,_1:()=>p,sI:()=>d});var r=n(7097),a=n(2885),s=n(4077),o=n(569),i=n(9155);function u(e,t){let n=e;if((0,o.fU)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||(0,o.fU)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&l(e,r,[]),r}function l(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.fU)(e))return void(0,o.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,o.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,o.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)l(e[t],r,n.concat(t))}function c(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function p(e,t,n,a="numeric"){if(e instanceof s.es)return c(a,e.dtype,t,n),e;let l=(0,o.D2)(e);if("string"!==l&&["bool","int32","float32"].indexOf(a)>=0&&(l=a),c(a,l,t,n),null==e||!(0,o.fU)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const p=u(e,l);(0,o.fU)(e)||Array.isArray(e)||(e=[e]);const d="string"!==l?(0,i.toTypedArray)(e,l):(0,o.xH)(e,[],!0);return r.BV.makeTensor(d,p,l)}function d(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>p(e,`${t}[${a}]`,n,r)))}},1221:(e,t,n)=>{"use strict";var r,a,s,o,i;n.d(t,{x8:()=>l,yw:()=>r,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(i||(i={}));const u={float32:o,int32:a,bool:s,complex64:i};function l(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function c(e){return l(e,"int32")}},9155:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,createScalarValue:()=>s,createShuffledIndices:()=>a.U$,decodeString:()=>c,distSquared:()=>a.E7,encodeString:()=>l,fetch:()=>u,flatten:()=>a.xH,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.N9,isString:()=>a.HD,isTypedArray:()=>a.fU,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,now:()=>i,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,tanh:()=>a.AE,toNestedArray:()=>a.GX,toTypedArray:()=>o});var r=n(2885),a=n(569);function s(e,t){return"string"===t?l(e):o([e],t)}function o(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.xH(e)),(0,r.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function i(){return(0,r.OB)().platform.now()}function u(e,t){return(0,r.OB)().platform.fetch(e,t)}function l(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.encode(e,t)}function c(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.decode(e,t)}},569:(e,t,n)=>{"use strict";function r(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function a(e,t,n){return Math.max(e,Math.min(t,n))}function s(e){return e%2==0?e:e+1}function o(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function i(e,t){const n=Math.random();return t*n+(1-n)*e}function u(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function l(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function c(e,t,n=""){l(m(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function p(e){l(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function d(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||_(e)&&!n)for(let r=0;r<e.length;++r)d(e[r],t,n);else t.push(e);return t}function h(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function f(e){return 0===e.length}function m(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function g(e){return e%1==0}function x(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function y(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function b(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t}function v(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function w(e,t=(e=>0),n){return new Promise(((r,a)=>{let s=0;const o=()=>{if(e())return void r();s++;const i=t(s);null!=n&&s>=n?a():setTimeout(o,i)};o()}))}function k(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function S(e,t){const n=t.length;return l((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),l(e.every((e=>g(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function I(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:S(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function N(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function $(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function T(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function C(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function E(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function _(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function R(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function A(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function D(e){return"string"==typeof e||e instanceof String}function O(e){return"boolean"==typeof e}function F(e){return"number"==typeof e}function B(e){return Array.isArray(e)?B(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":F(e)?"float32":D(e)?"string":O(e)?"bool":"float32"}function M(e){return!!(e&&e.constructor&&e.call&&e.apply)}function P(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function L(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function V(e,t,n){const r=new Array;if(1===t.length){const a=t[0];for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],s=t.slice(1),o=s.reduce(((e,t)=>e*t));for(let t=0;t<a;t++)r[t]=V(e+t*o,s,n)}return r}function z(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return V(0,e,t)}function W(e,t){const n=U(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function U(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function G(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return z(e,new Float32Array(n));if("int32"===t)return z(e,new Int32Array(n));if("bool"===t)return z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function X(e){e.forEach((t=>{l(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function H(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function q(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function j(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{AE:()=>x,Cq:()=>p,D2:()=>B,D5:()=>T,E7:()=>u,EC:()=>S,GN:()=>g,GX:()=>z,HD:()=>D,JZ:()=>k,LP:()=>C,Mu:()=>X,N9:()=>f,NA:()=>h,NE:()=>q,QB:()=>E,Sm:()=>o,TV:()=>r,U$:()=>b,Ub:()=>A,WD:()=>w,WP:()=>N,YP:()=>y,bT:()=>R,bj:()=>i,bp:()=>I,cO:()=>m,e3:()=>L,fU:()=>_,hj:()=>F,hu:()=>l,jP:()=>P,jn:()=>O,k5:()=>c,l6:()=>G,mf:()=>M,nY:()=>s,oj:()=>v,p8:()=>W,qy:()=>H,rQ:()=>$,tI:()=>j,uZ:()=>a,wT:()=>U,xH:()=>d})},6377:(e,t,n)=>{var r=n(4832),a=n(8652),s=n(801),o=n(2030),i=n(3618),u=n(9049),l=n(1971);l.alea=r,l.xor128=a,l.xorwow=s,l.xorshift7=o,l.xor4096=i,l.tychei=u,e.exports=l},4832:function(e,t,n){var r;!function(e,a,s){function o(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new o(e),r=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.X&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.x&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},1971:(e,t,n)=>{var r;!function(a,s){var o,i=this,u=256,l=s.pow(u,6),c=s.pow(2,52),p=2*c,d=255;function h(e,t,n){var r=[],d=x(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,y(a)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(u):(e=new Uint8Array(u),(i.crypto||i.msCrypto).getRandomValues(e)),y(e)}catch(e){var t=i.navigator,n=t&&t.plugins;return[+new Date,i,n,i.screen,y(a)]}}():e,3),r),h=new f(r),b=function(){for(var e=h.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=h.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|h.g(4)},b.quick=function(){return h.g(4)/4294967296},b.double=b,x(y(h.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,h),e.state=function(){return m(h,{})}),n?(s.random=e,t):e})(b,d,"global"in t?t.global:this==s,t.state)}function f(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<u;)o[a]=a++;for(a=0;a<u;a++)o[a]=o[s=d&s+e[a%n]+(t=o[a])],o[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,o=r.S;e--;)t=o[a=d&a+1],n=n*u+o[d&(o[a]=o[s=d&s+t])+(o[s]=t)];return r.i=a,r.j=s,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function x(e,t){for(var n,r=e+"",a=0;a<r.length;)t[d&a]=d&(n^=19*t[d&a])+r.charCodeAt(a++);return y(t)}function y(e){return String.fromCharCode.apply(0,e)}if(s.seedrandom=h,x(s.random(),a),e.exports){e.exports=h;try{o=n(5042)}catch(e){}}else void 0===(r=function(){return h}.call(t,n,t,e))||(e.exports=r)}([],Math)},5410:()=>{},8628:()=>{},5042:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{n(558),n(3916),n(5597);const e=n(9987);var t=document.getElementById("preview"),r=null,a=new WebSocket("ws://2.tcp.ngrok.io:13825/detect"),s=document.getElementById("screen-connecting"),o=(document.getElementById("screen-preview"),document.getElementById("video-loader")),i=document.getElementById("prev-error"),u=document.getElementById("prev-errormsg"),l=document.getElementById("letter-display");async function c(e){const n=await e.estimateHands(t);n.length>0&&(console.log(n[0].landmarks),a.send(n[0].landmarks))}function p(){o.style.display="none"}document.getElementById("output-text"),l.scrollWidth,a.onopen=function(e){console.log("Connected!"),s.style.opacity="0",s.style.visibility="hidden"},a.onerror=function(e){},async function(){try{r=await navigator.mediaDevices.getUserMedia({video:!0,audio:!1}),t.srcObject=r}catch(e){return console.log(e),p(),"Couldn't access camera",i.style.display="flex",void(u.text="Couldn't access camera")}console.log("Starting...");const n=await e.load();setInterval(c,1e3/30,n),console.log("Started!"),p()}()})()})();